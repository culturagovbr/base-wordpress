!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):t.Popper=e()}(this,function(){"use strict";function t(t){return t&&"[object Function]"==={}.toString.call(t)}function e(t,e){if(1!==t.nodeType)return[];var n=getComputedStyle(t,null);return e?n[e]:n}function n(t){return"HTML"===t.nodeName?t:t.parentNode||t.host}function i(t){if(!t)return document.body;switch(t.nodeName){case"HTML":case"BODY":return t.ownerDocument.body;case"#document":return t.body}var o=e(t),r=o.overflow,a=o.overflowX,s=o.overflowY;return/(auto|scroll)/.test(r+s+a)?t:i(n(t))}function o(t){var n=t&&t.offsetParent,i=n&&n.nodeName;return i&&"BODY"!==i&&"HTML"!==i?-1!==["TD","TABLE"].indexOf(n.nodeName)&&"static"===e(n,"position")?o(n):n:t?t.ownerDocument.documentElement:document.documentElement}function r(t){return null!==t.parentNode?r(t.parentNode):t}function a(t,e){if(!(t&&t.nodeType&&e&&e.nodeType))return document.documentElement;var n=t.compareDocumentPosition(e)&Node.DOCUMENT_POSITION_FOLLOWING,i=n?t:e,s=n?e:t,l=document.createRange();l.setStart(i,0),l.setEnd(s,0);var c=l.commonAncestorContainer;if(t!==c&&e!==c||i.contains(s))return function(t){var e=t.nodeName;return"BODY"!==e&&("HTML"===e||o(t.firstElementChild)===t)}(c)?c:o(c);var f=r(t);return f.host?a(f.host,e):a(t,r(e).host)}function s(t){var e="top"===(arguments.length>1&&void 0!==arguments[1]?arguments[1]:"top")?"scrollTop":"scrollLeft",n=t.nodeName;if("BODY"===n||"HTML"===n){var i=t.ownerDocument.documentElement;return(t.ownerDocument.scrollingElement||i)[e]}return t[e]}function l(t,e){var n="x"===e?"Left":"Top",i="Left"===n?"Right":"Bottom";return parseFloat(t["border"+n+"Width"],10)+parseFloat(t["border"+i+"Width"],10)}function c(t,e,n,i){return Math.max(e["offset"+t],e["scroll"+t],n["client"+t],n["offset"+t],n["scroll"+t],U()?n["offset"+t]+i["margin"+("Height"===t?"Top":"Left")]+i["margin"+("Height"===t?"Bottom":"Right")]:0)}function f(){var t=document.body,e=document.documentElement,n=U()&&getComputedStyle(e);return{height:c("Height",t,e,n),width:c("Width",t,e,n)}}function d(t){return V({},t,{right:t.left+t.width,bottom:t.top+t.height})}function h(t){var n={};if(U())try{n=t.getBoundingClientRect();var i=s(t,"top"),o=s(t,"left");n.top+=i,n.left+=o,n.bottom+=i,n.right+=o}catch(t){}else n=t.getBoundingClientRect();var r={left:n.left,top:n.top,width:n.right-n.left,height:n.bottom-n.top},a="HTML"===t.nodeName?f():{},c=a.width||t.clientWidth||r.right-r.left,h=a.height||t.clientHeight||r.bottom-r.top,u=t.offsetWidth-c,p=t.offsetHeight-h;if(u||p){var m=e(t);u-=l(m,"x"),p-=l(m,"y"),r.width-=u,r.height-=p}return d(r)}function u(t,n){var o=U(),r="HTML"===n.nodeName,a=h(t),l=h(n),c=i(t),f=e(n),u=parseFloat(f.borderTopWidth,10),p=parseFloat(f.borderLeftWidth,10),m=d({top:a.top-l.top-u,left:a.left-l.left-p,width:a.width,height:a.height});if(m.marginTop=0,m.marginLeft=0,!o&&r){var g=parseFloat(f.marginTop,10),v=parseFloat(f.marginLeft,10);m.top-=u-g,m.bottom-=u-g,m.left-=p-v,m.right-=p-v,m.marginTop=g,m.marginLeft=v}return(o?n.contains(c):n===c&&"BODY"!==c.nodeName)&&(m=function(t,e){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],i=s(e,"top"),o=s(e,"left"),r=n?-1:1;return t.top+=i*r,t.bottom+=i*r,t.left+=o*r,t.right+=o*r,t}(m,n)),m}function p(t){var i=t.nodeName;return"BODY"!==i&&"HTML"!==i&&("fixed"===e(t,"position")||p(n(t)))}function m(t,e,o,r){var l={top:0,left:0},c=a(t,e);if("viewport"===r)l=function(t){var e=t.ownerDocument.documentElement,n=u(t,e),i=Math.max(e.clientWidth,window.innerWidth||0),o=Math.max(e.clientHeight,window.innerHeight||0),r=s(e),a=s(e,"left");return d({top:r-n.top+n.marginTop,left:a-n.left+n.marginLeft,width:i,height:o})}(c);else{var h=void 0;"scrollParent"===r?"BODY"===(h=i(n(e))).nodeName&&(h=t.ownerDocument.documentElement):h="window"===r?t.ownerDocument.documentElement:r;var m=u(h,c);if("HTML"!==h.nodeName||p(c))l=m;else{var g=f(),v=g.height,_=g.width;l.top+=m.top-m.marginTop,l.bottom=v+m.top,l.left+=m.left-m.marginLeft,l.right=_+m.left}}return l.left+=o,l.top+=o,l.right-=o,l.bottom-=o,l}function g(t,e,n,i,o){var r=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;if(-1===t.indexOf("auto"))return t;var a=m(n,i,r,o),s={top:{width:a.width,height:e.top-a.top},right:{width:a.right-e.right,height:a.height},bottom:{width:a.width,height:a.bottom-e.bottom},left:{width:e.left-a.left,height:a.height}},l=Object.keys(s).map(function(t){return V({key:t},s[t],{area:function(t){return t.width*t.height}(s[t])})}).sort(function(t,e){return e.area-t.area}),c=l.filter(function(t){var e=t.width,i=t.height;return e>=n.clientWidth&&i>=n.clientHeight}),f=c.length>0?c[0].key:l[0].key,d=t.split("-")[1];return f+(d?"-"+d:"")}function v(t,e,n){return u(n,a(e,n))}function _(t){var e=getComputedStyle(t),n=parseFloat(e.marginTop)+parseFloat(e.marginBottom),i=parseFloat(e.marginLeft)+parseFloat(e.marginRight);return{width:t.offsetWidth+i,height:t.offsetHeight+n}}function E(t){var e={left:"right",right:"left",bottom:"top",top:"bottom"};return t.replace(/left|right|bottom|top/g,function(t){return e[t]})}function b(t,e,n){n=n.split("-")[0];var i=_(t),o={width:i.width,height:i.height},r=-1!==["right","left"].indexOf(n),a=r?"top":"left",s=r?"left":"top",l=r?"height":"width",c=r?"width":"height";return o[a]=e[a]+e[l]/2-i[l]/2,o[s]=n===s?e[s]-i[c]:e[E(s)],o}function y(t,e){return Array.prototype.find?t.find(e):t.filter(e)[0]}function C(e,n,i){return(void 0===i?e:e.slice(0,function(t,e,n){if(Array.prototype.findIndex)return t.findIndex(function(t){return t[e]===n});var i=y(t,function(t){return t[e]===n});return t.indexOf(i)}(e,"name",i))).forEach(function(e){e.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var i=e.function||e.fn;e.enabled&&t(i)&&(n.offsets.popper=d(n.offsets.popper),n.offsets.reference=d(n.offsets.reference),n=i(n,e))}),n}function T(t,e){return t.some(function(t){var n=t.name;return t.enabled&&n===e})}function w(t){for(var e=[!1,"ms","Webkit","Moz","O"],n=t.charAt(0).toUpperCase()+t.slice(1),i=0;i<e.length-1;i++){var o=e[i],r=o?""+o+n:t;if(void 0!==document.body.style[r])return r}return null}function I(t){var e=t.ownerDocument;return e?e.defaultView:window}function A(t,e,n,o){var r="BODY"===t.nodeName,a=r?t.ownerDocument.defaultView:t;a.addEventListener(e,n,{passive:!0}),r||A(i(a.parentNode),e,n,o),o.push(a)}function D(){this.state.eventsEnabled||(this.state=function(t,e,n,o){n.updateBound=o,I(t).addEventListener("resize",n.updateBound,{passive:!0});var r=i(t);return A(r,"scroll",n.updateBound,n.scrollParents),n.scrollElement=r,n.eventsEnabled=!0,n}(this.reference,this.options,this.state,this.scheduleUpdate))}function S(){this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=function(t,e){return I(t).removeEventListener("resize",e.updateBound),e.scrollParents.forEach(function(t){t.removeEventListener("scroll",e.updateBound)}),e.updateBound=null,e.scrollParents=[],e.scrollElement=null,e.eventsEnabled=!1,e}(this.reference,this.state))}function N(t){return""!==t&&!isNaN(parseFloat(t))&&isFinite(t)}function O(t,e){Object.keys(e).forEach(function(n){var i="";-1!==["width","height","top","right","bottom","left"].indexOf(n)&&N(e[n])&&(i="px"),t.style[n]=e[n]+i})}function k(t,e,n){var i=y(t,function(t){return t.name===e}),o=!!i&&t.some(function(t){return t.name===n&&t.enabled&&t.order<i.order});if(!o){var r="`"+e+"`",a="`"+n+"`";console.warn(a+" modifier is required by "+r+" modifier in order to work, be sure to include it before "+r+"!")}return o}function L(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=Y.indexOf(t),i=Y.slice(n+1).concat(Y.slice(0,n));return e?i.reverse():i}function x(t,e,n,i){var o=[0,0],r=-1!==["right","left"].indexOf(i),a=t.split(/(\+|\-)/).map(function(t){return t.trim()}),s=a.indexOf(y(a,function(t){return-1!==t.search(/,|\s/)}));a[s]&&-1===a[s].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var l=/\s*,\s*|\s+/,c=-1!==s?[a.slice(0,s).concat([a[s].split(l)[0]]),[a[s].split(l)[1]].concat(a.slice(s+1))]:[a];return(c=c.map(function(t,i){var o=(1===i?!r:r)?"height":"width",a=!1;return t.reduce(function(t,e){return""===t[t.length-1]&&-1!==["+","-"].indexOf(e)?(t[t.length-1]=e,a=!0,t):a?(t[t.length-1]+=e,a=!1,t):t.concat(e)},[]).map(function(t){return function(t,e,n,i){var o=t.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),r=+o[1],a=o[2];if(!r)return t;if(0===a.indexOf("%")){var s=void 0;switch(a){case"%p":s=n;break;case"%":case"%r":default:s=i}return d(s)[e]/100*r}if("vh"===a||"vw"===a)return("vh"===a?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*r;return r}(t,o,e,n)})})).forEach(function(t,e){t.forEach(function(n,i){N(n)&&(o[e]+=n*("-"===t[i-1]?-1:1))})}),o}for(var P="undefined"!=typeof window&&"undefined"!=typeof document,R=["Edge","Trident","Firefox"],j=0,H=0;H<R.length;H+=1)if(P&&navigator.userAgent.indexOf(R[H])>=0){j=1;break}var M=P&&window.Promise?function(t){var e=!1;return function(){e||(e=!0,window.Promise.resolve().then(function(){e=!1,t()}))}}:function(t){var e=!1;return function(){e||(e=!0,setTimeout(function(){e=!1,t()},j))}},W=void 0,U=function(){return void 0===W&&(W=-1!==navigator.appVersion.indexOf("MSIE 10")),W},F=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},B=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),K=function(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t},V=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i])}return t},Q=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],Y=Q.slice(3),G={FLIP:"flip",CLOCKWISE:"clockwise",COUNTERCLOCKWISE:"counterclockwise"},q={placement:"bottom",eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(t){var e=t.placement,n=e.split("-")[0],i=e.split("-")[1];if(i){var o=t.offsets,r=o.reference,a=o.popper,s=-1!==["bottom","top"].indexOf(n),l=s?"left":"top",c=s?"width":"height",f={start:K({},l,r[l]),end:K({},l,r[l]+r[c]-a[c])};t.offsets.popper=V({},a,f[i])}return t}},offset:{order:200,enabled:!0,fn:function(t,e){var n=e.offset,i=t.placement,o=t.offsets,r=o.popper,a=o.reference,s=i.split("-")[0],l=void 0;return l=N(+n)?[+n,0]:x(n,r,a,s),"left"===s?(r.top+=l[0],r.left-=l[1]):"right"===s?(r.top+=l[0],r.left+=l[1]):"top"===s?(r.left+=l[0],r.top-=l[1]):"bottom"===s&&(r.left+=l[0],r.top+=l[1]),t.popper=r,t},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(t,e){var n=e.boundariesElement||o(t.instance.popper);t.instance.reference===n&&(n=o(n));var i=m(t.instance.popper,t.instance.reference,e.padding,n);e.boundaries=i;var r=e.priority,a=t.offsets.popper,s={primary:function(t){var n=a[t];return a[t]<i[t]&&!e.escapeWithReference&&(n=Math.max(a[t],i[t])),K({},t,n)},secondary:function(t){var n="right"===t?"left":"top",o=a[n];return a[t]>i[t]&&!e.escapeWithReference&&(o=Math.min(a[n],i[t]-("right"===t?a.width:a.height))),K({},n,o)}};return r.forEach(function(t){var e=-1!==["left","top"].indexOf(t)?"primary":"secondary";a=V({},a,s[e](t))}),t.offsets.popper=a,t},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(t){var e=t.offsets,n=e.popper,i=e.reference,o=t.placement.split("-")[0],r=Math.floor,a=-1!==["top","bottom"].indexOf(o),s=a?"right":"bottom",l=a?"left":"top",c=a?"width":"height";return n[s]<r(i[l])&&(t.offsets.popper[l]=r(i[l])-n[c]),n[l]>r(i[s])&&(t.offsets.popper[l]=r(i[s])),t}},arrow:{order:500,enabled:!0,fn:function(t,n){var i;if(!k(t.instance.modifiers,"arrow","keepTogether"))return t;var o=n.element;if("string"==typeof o){if(!(o=t.instance.popper.querySelector(o)))return t}else if(!t.instance.popper.contains(o))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),t;var r=t.placement.split("-")[0],a=t.offsets,s=a.popper,l=a.reference,c=-1!==["left","right"].indexOf(r),f=c?"height":"width",h=c?"Top":"Left",u=h.toLowerCase(),p=c?"left":"top",m=c?"bottom":"right",g=_(o)[f];l[m]-g<s[u]&&(t.offsets.popper[u]-=s[u]-(l[m]-g)),l[u]+g>s[m]&&(t.offsets.popper[u]+=l[u]+g-s[m]),t.offsets.popper=d(t.offsets.popper);var v=l[u]+l[f]/2-g/2,E=e(t.instance.popper),b=parseFloat(E["margin"+h],10),y=parseFloat(E["border"+h+"Width"],10),C=v-t.offsets.popper[u]-b-y;return C=Math.max(Math.min(s[f]-g,C),0),t.arrowElement=o,t.offsets.arrow=(i={},K(i,u,Math.round(C)),K(i,p,""),i),t},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(t,e){if(T(t.instance.modifiers,"inner"))return t;if(t.flipped&&t.placement===t.originalPlacement)return t;var n=m(t.instance.popper,t.instance.reference,e.padding,e.boundariesElement),i=t.placement.split("-")[0],o=E(i),r=t.placement.split("-")[1]||"",a=[];switch(e.behavior){case G.FLIP:a=[i,o];break;case G.CLOCKWISE:a=L(i);break;case G.COUNTERCLOCKWISE:a=L(i,!0);break;default:a=e.behavior}return a.forEach(function(s,l){if(i!==s||a.length===l+1)return t;i=t.placement.split("-")[0],o=E(i);var c=t.offsets.popper,f=t.offsets.reference,d=Math.floor,h="left"===i&&d(c.right)>d(f.left)||"right"===i&&d(c.left)<d(f.right)||"top"===i&&d(c.bottom)>d(f.top)||"bottom"===i&&d(c.top)<d(f.bottom),u=d(c.left)<d(n.left),p=d(c.right)>d(n.right),m=d(c.top)<d(n.top),g=d(c.bottom)>d(n.bottom),v="left"===i&&u||"right"===i&&p||"top"===i&&m||"bottom"===i&&g,_=-1!==["top","bottom"].indexOf(i),y=!!e.flipVariations&&(_&&"start"===r&&u||_&&"end"===r&&p||!_&&"start"===r&&m||!_&&"end"===r&&g);(h||v||y)&&(t.flipped=!0,(h||v)&&(i=a[l+1]),y&&(r=function(t){return"end"===t?"start":"start"===t?"end":t}(r)),t.placement=i+(r?"-"+r:""),t.offsets.popper=V({},t.offsets.popper,b(t.instance.popper,t.offsets.reference,t.placement)),t=C(t.instance.modifiers,t,"flip"))}),t},behavior:"flip",padding:5,boundariesElement:"viewport"},inner:{order:700,enabled:!1,fn:function(t){var e=t.placement,n=e.split("-")[0],i=t.offsets,o=i.popper,r=i.reference,a=-1!==["left","right"].indexOf(n),s=-1===["top","left"].indexOf(n);return o[a?"left":"top"]=r[n]-(s?o[a?"width":"height"]:0),t.placement=E(e),t.offsets.popper=d(o),t}},hide:{order:800,enabled:!0,fn:function(t){if(!k(t.instance.modifiers,"hide","preventOverflow"))return t;var e=t.offsets.reference,n=y(t.instance.modifiers,function(t){return"preventOverflow"===t.name}).boundaries;if(e.bottom<n.top||e.left>n.right||e.top>n.bottom||e.right<n.left){if(!0===t.hide)return t;t.hide=!0,t.attributes["x-out-of-boundaries"]=""}else{if(!1===t.hide)return t;t.hide=!1,t.attributes["x-out-of-boundaries"]=!1}return t}},computeStyle:{order:850,enabled:!0,fn:function(t,e){var n=e.x,i=e.y,r=t.offsets.popper,a=y(t.instance.modifiers,function(t){return"applyStyle"===t.name}).gpuAcceleration;void 0!==a&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var s=void 0!==a?a:e.gpuAcceleration,l=h(o(t.instance.popper)),c={position:r.position},f={left:Math.floor(r.left),top:Math.floor(r.top),bottom:Math.floor(r.bottom),right:Math.floor(r.right)},d="bottom"===n?"top":"bottom",u="right"===i?"left":"right",p=w("transform"),m=void 0,g=void 0;if(g="bottom"===d?-l.height+f.bottom:f.top,m="right"===u?-l.width+f.right:f.left,s&&p)c[p]="translate3d("+m+"px, "+g+"px, 0)",c[d]=0,c[u]=0,c.willChange="transform";else{var v="bottom"===d?-1:1,_="right"===u?-1:1;c[d]=g*v,c[u]=m*_,c.willChange=d+", "+u}var E={"x-placement":t.placement};return t.attributes=V({},E,t.attributes),t.styles=V({},c,t.styles),t.arrowStyles=V({},t.offsets.arrow,t.arrowStyles),t},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(t){return O(t.instance.popper,t.styles),function(t,e){Object.keys(e).forEach(function(n){!1!==e[n]?t.setAttribute(n,e[n]):t.removeAttribute(n)})}(t.instance.popper,t.attributes),t.arrowElement&&Object.keys(t.arrowStyles).length&&O(t.arrowElement,t.arrowStyles),t},onLoad:function(t,e,n,i,o){var r=v(0,e,t),a=g(n.placement,r,e,t,n.modifiers.flip.boundariesElement,n.modifiers.flip.padding);return e.setAttribute("x-placement",a),O(e,{position:"absolute"}),n},gpuAcceleration:void 0}}},z=function(){function e(n,i){var o=this,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};F(this,e),this.scheduleUpdate=function(){return requestAnimationFrame(o.update)},this.update=M(this.update.bind(this)),this.options=V({},e.Defaults,r),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=n&&n.jquery?n[0]:n,this.popper=i&&i.jquery?i[0]:i,this.options.modifiers={},Object.keys(V({},e.Defaults.modifiers,r.modifiers)).forEach(function(t){o.options.modifiers[t]=V({},e.Defaults.modifiers[t]||{},r.modifiers?r.modifiers[t]:{})}),this.modifiers=Object.keys(this.options.modifiers).map(function(t){return V({name:t},o.options.modifiers[t])}).sort(function(t,e){return t.order-e.order}),this.modifiers.forEach(function(e){e.enabled&&t(e.onLoad)&&e.onLoad(o.reference,o.popper,o.options,e,o.state)}),this.update();var a=this.options.eventsEnabled;a&&this.enableEventListeners(),this.state.eventsEnabled=a}return B(e,[{key:"update",value:function(){return function(){if(!this.state.isDestroyed){var t={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};t.offsets.reference=v(this.state,this.popper,this.reference),t.placement=g(this.options.placement,t.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),t.originalPlacement=t.placement,t.offsets.popper=b(this.popper,t.offsets.reference,t.placement),t.offsets.popper.position="absolute",t=C(this.modifiers,t),this.state.isCreated?this.options.onUpdate(t):(this.state.isCreated=!0,this.options.onCreate(t))}}.call(this)}},{key:"destroy",value:function(){return function(){return this.state.isDestroyed=!0,T(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.left="",this.popper.style.position="",this.popper.style.top="",this.popper.style[w("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}.call(this)}},{key:"enableEventListeners",value:function(){return D.call(this)}},{key:"disableEventListeners",value:function(){return S.call(this)}}]),e}();return z.Utils=("undefined"!=typeof window?window:global).PopperUtils,z.placements=Q,z.Defaults=q,z});var bootstrap=function(t,e,n){"use strict";function i(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function o(t,e,n){return e&&i(t.prototype,e),n&&i(t,n),t}e=e&&e.hasOwnProperty("default")?e.default:e,n=n&&n.hasOwnProperty("default")?n.default:n;var r=function(t){function e(t){return{}.toString.call(t).match(/\s([a-zA-Z]+)/)[1].toLowerCase()}function n(e){var n=this,i=!1;return t(this).one(r.TRANSITION_END,function(){i=!0}),setTimeout(function(){i||r.triggerTransitionEnd(n)},e),this}var i=!1,o={WebkitTransition:"webkitTransitionEnd",transition:"transitionend"},r={TRANSITION_END:"bsTransitionEnd",getUID:function(t){do{t+=~~(1e6*Math.random())}while(document.getElementById(t));return t},getSelectorFromElement:function(e){var n=e.getAttribute("data-target");n&&"#"!==n||(n=e.getAttribute("href")||""),"#"===n.charAt(0)&&(n=function(e){return e="function"==typeof t.escapeSelector?t.escapeSelector(e).substr(1):e.replace(/(:|\.|\[|\]|,|=|@)/g,"\\$1")}(n));try{return t(document).find(n).length>0?n:null}catch(t){return null}},reflow:function(t){return t.offsetHeight},triggerTransitionEnd:function(e){t(e).trigger(i.end)},supportsTransitionEnd:function(){return Boolean(i)},isElement:function(t){return(t[0]||t).nodeType},typeCheckConfig:function(t,n,i){for(var o in i)if(Object.prototype.hasOwnProperty.call(i,o)){var a=i[o],s=n[o],l=s&&r.isElement(s)?"element":e(s);if(!new RegExp(a).test(l))throw new Error(t.toUpperCase()+': Option "'+o+'" provided type "'+l+'" but expected type "'+a+'".')}}};return i=function(){if(window.QUnit)return!1;var t=document.createElement("bootstrap");for(var e in o)if(void 0!==t.style[e])return{end:o[e]};return!1}(),t.fn.emulateTransitionEnd=n,r.supportsTransitionEnd()&&(t.event.special[r.TRANSITION_END]={bindType:i.end,delegateType:i.end,handle:function(e){if(t(e.target).is(this))return e.handleObj.handler.apply(this,arguments)}}),r}(e),a=function(t){var e="bs.alert",n="."+e,i=t.fn.alert,a={CLOSE:"close"+n,CLOSED:"closed"+n,CLICK_DATA_API:"click"+n+".data-api"},s="alert",l="fade",c="show",f=function(){function n(t){this._element=t}var i=n.prototype;return i.close=function(t){t=t||this._element;var e=this._getRootElement(t);this._triggerCloseEvent(e).isDefaultPrevented()||this._removeElement(e)},i.dispose=function(){t.removeData(this._element,e),this._element=null},i._getRootElement=function(e){var n=r.getSelectorFromElement(e),i=!1;return n&&(i=t(n)[0]),i||(i=t(e).closest("."+s)[0]),i},i._triggerCloseEvent=function(e){var n=t.Event(a.CLOSE);return t(e).trigger(n),n},i._removeElement=function(e){var n=this;t(e).removeClass(c),r.supportsTransitionEnd()&&t(e).hasClass(l)?t(e).one(r.TRANSITION_END,function(t){return n._destroyElement(e,t)}).emulateTransitionEnd(150):this._destroyElement(e)},i._destroyElement=function(e){t(e).detach().trigger(a.CLOSED).remove()},n._jQueryInterface=function(i){return this.each(function(){var o=t(this),r=o.data(e);r||(r=new n(this),o.data(e,r)),"close"===i&&r[i](this)})},n._handleDismiss=function(t){return function(e){e&&e.preventDefault(),t.close(this)}},o(n,null,[{key:"VERSION",get:function(){return"4.0.0-beta.2"}}]),n}();return t(document).on(a.CLICK_DATA_API,'[data-dismiss="alert"]',f._handleDismiss(new f)),t.fn.alert=f._jQueryInterface,t.fn.alert.Constructor=f,t.fn.alert.noConflict=function(){return t.fn.alert=i,f._jQueryInterface},f}(e),s=function(t){var e="button",n="bs.button",i="."+n,r=".data-api",a=t.fn[e],s="active",l="btn",c="focus",f='[data-toggle^="button"]',d='[data-toggle="buttons"]',h="input",u=".active",p=".btn",m={CLICK_DATA_API:"click"+i+r,FOCUS_BLUR_DATA_API:"focus"+i+r+" blur"+i+r},g=function(){function e(t){this._element=t}var i=e.prototype;return i.toggle=function(){var e=!0,n=!0,i=t(this._element).closest(d)[0];if(i){var o=t(this._element).find(h)[0];if(o){if("radio"===o.type)if(o.checked&&t(this._element).hasClass(s))e=!1;else{var r=t(i).find(u)[0];r&&t(r).removeClass(s)}if(e){if(o.hasAttribute("disabled")||i.hasAttribute("disabled")||o.classList.contains("disabled")||i.classList.contains("disabled"))return;o.checked=!t(this._element).hasClass(s),t(o).trigger("change")}o.focus(),n=!1}}n&&this._element.setAttribute("aria-pressed",!t(this._element).hasClass(s)),e&&t(this._element).toggleClass(s)},i.dispose=function(){t.removeData(this._element,n),this._element=null},e._jQueryInterface=function(i){return this.each(function(){var o=t(this).data(n);o||(o=new e(this),t(this).data(n,o)),"toggle"===i&&o[i]()})},o(e,null,[{key:"VERSION",get:function(){return"4.0.0-beta.2"}}]),e}();return t(document).on(m.CLICK_DATA_API,f,function(e){e.preventDefault();var n=e.target;t(n).hasClass(l)||(n=t(n).closest(p)),g._jQueryInterface.call(t(n),"toggle")}).on(m.FOCUS_BLUR_DATA_API,f,function(e){var n=t(e.target).closest(p)[0];t(n).toggleClass(c,/^focus(in)?$/.test(e.type))}),t.fn[e]=g._jQueryInterface,t.fn[e].Constructor=g,t.fn[e].noConflict=function(){return t.fn[e]=a,g._jQueryInterface},g}(e),l=function(t){var e="carousel",n="bs.carousel",i="."+n,a=t.fn[e],s={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0},l={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean"},c="next",f="prev",d="left",h="right",u={SLIDE:"slide"+i,SLID:"slid"+i,KEYDOWN:"keydown"+i,MOUSEENTER:"mouseenter"+i,MOUSELEAVE:"mouseleave"+i,TOUCHEND:"touchend"+i,LOAD_DATA_API:"load"+i+".data-api",CLICK_DATA_API:"click"+i+".data-api"},p="carousel",m="active",g="slide",v="carousel-item-right",_="carousel-item-left",E="carousel-item-next",b="carousel-item-prev",y={ACTIVE:".active",ACTIVE_ITEM:".active.carousel-item",ITEM:".carousel-item",NEXT_PREV:".carousel-item-next, .carousel-item-prev",INDICATORS:".carousel-indicators",DATA_SLIDE:"[data-slide], [data-slide-to]",DATA_RIDE:'[data-ride="carousel"]'},C=function(){function a(e,n){this._items=null,this._interval=null,this._activeElement=null,this._isPaused=!1,this._isSliding=!1,this.touchTimeout=null,this._config=this._getConfig(n),this._element=t(e)[0],this._indicatorsElement=t(this._element).find(y.INDICATORS)[0],this._addEventListeners()}var C=a.prototype;return C.next=function(){this._isSliding||this._slide(c)},C.nextWhenVisible=function(){!document.hidden&&t(this._element).is(":visible")&&"hidden"!==t(this._element).css("visibility")&&this.next()},C.prev=function(){this._isSliding||this._slide(f)},C.pause=function(e){e||(this._isPaused=!0),t(this._element).find(y.NEXT_PREV)[0]&&r.supportsTransitionEnd()&&(r.triggerTransitionEnd(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null},C.cycle=function(t){t||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config.interval&&!this._isPaused&&(this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval))},C.to=function(e){var n=this;this._activeElement=t(this._element).find(y.ACTIVE_ITEM)[0];var i=this._getItemIndex(this._activeElement);if(!(e>this._items.length-1||e<0))if(this._isSliding)t(this._element).one(u.SLID,function(){return n.to(e)});else{if(i===e)return this.pause(),void this.cycle();var o=e>i?c:f;this._slide(o,this._items[e])}},C.dispose=function(){t(this._element).off(i),t.removeData(this._element,n),this._items=null,this._config=null,this._element=null,this._interval=null,this._isPaused=null,this._isSliding=null,this._activeElement=null,this._indicatorsElement=null},C._getConfig=function(n){return n=t.extend({},s,n),r.typeCheckConfig(e,n,l),n},C._addEventListeners=function(){var e=this;this._config.keyboard&&t(this._element).on(u.KEYDOWN,function(t){return e._keydown(t)}),"hover"===this._config.pause&&(t(this._element).on(u.MOUSEENTER,function(t){return e.pause(t)}).on(u.MOUSELEAVE,function(t){return e.cycle(t)}),"ontouchstart"in document.documentElement&&t(this._element).on(u.TOUCHEND,function(){e.pause(),e.touchTimeout&&clearTimeout(e.touchTimeout),e.touchTimeout=setTimeout(function(t){return e.cycle(t)},500+e._config.interval)}))},C._keydown=function(t){if(!/input|textarea/i.test(t.target.tagName))switch(t.which){case 37:t.preventDefault(),this.prev();break;case 39:t.preventDefault(),this.next();break;default:return}},C._getItemIndex=function(e){return this._items=t.makeArray(t(e).parent().find(y.ITEM)),this._items.indexOf(e)},C._getItemByDirection=function(t,e){var n=t===c,i=t===f,o=this._getItemIndex(e),r=this._items.length-1;if((i&&0===o||n&&o===r)&&!this._config.wrap)return e;var a=(o+(t===f?-1:1))%this._items.length;return-1===a?this._items[this._items.length-1]:this._items[a]},C._triggerSlideEvent=function(e,n){var i=this._getItemIndex(e),o=this._getItemIndex(t(this._element).find(y.ACTIVE_ITEM)[0]),r=t.Event(u.SLIDE,{relatedTarget:e,direction:n,from:o,to:i});return t(this._element).trigger(r),r},C._setActiveIndicatorElement=function(e){if(this._indicatorsElement){t(this._indicatorsElement).find(y.ACTIVE).removeClass(m);var n=this._indicatorsElement.children[this._getItemIndex(e)];n&&t(n).addClass(m)}},C._slide=function(e,n){var i,o,a,s=this,l=t(this._element).find(y.ACTIVE_ITEM)[0],f=this._getItemIndex(l),p=n||l&&this._getItemByDirection(e,l),C=this._getItemIndex(p),T=Boolean(this._interval);if(e===c?(i=_,o=E,a=d):(i=v,o=b,a=h),p&&t(p).hasClass(m))this._isSliding=!1;else{if(!this._triggerSlideEvent(p,a).isDefaultPrevented()&&l&&p){this._isSliding=!0,T&&this.pause(),this._setActiveIndicatorElement(p);var w=t.Event(u.SLID,{relatedTarget:p,direction:a,from:f,to:C});r.supportsTransitionEnd()&&t(this._element).hasClass(g)?(t(p).addClass(o),r.reflow(p),t(l).addClass(i),t(p).addClass(i),t(l).one(r.TRANSITION_END,function(){t(p).removeClass(i+" "+o).addClass(m),t(l).removeClass(m+" "+o+" "+i),s._isSliding=!1,setTimeout(function(){return t(s._element).trigger(w)},0)}).emulateTransitionEnd(600)):(t(l).removeClass(m),t(p).addClass(m),this._isSliding=!1,t(this._element).trigger(w)),T&&this.cycle()}}},a._jQueryInterface=function(e){return this.each(function(){var i=t(this).data(n),o=t.extend({},s,t(this).data());"object"==typeof e&&t.extend(o,e);var r="string"==typeof e?e:o.slide;if(i||(i=new a(this,o),t(this).data(n,i)),"number"==typeof e)i.to(e);else if("string"==typeof r){if(void 0===i[r])throw new Error('No method named "'+r+'"');i[r]()}else o.interval&&(i.pause(),i.cycle())})},a._dataApiClickHandler=function(e){var i=r.getSelectorFromElement(this);if(i){var o=t(i)[0];if(o&&t(o).hasClass(p)){var s=t.extend({},t(o).data(),t(this).data()),l=this.getAttribute("data-slide-to");l&&(s.interval=!1),a._jQueryInterface.call(t(o),s),l&&t(o).data(n).to(l),e.preventDefault()}}},o(a,null,[{key:"VERSION",get:function(){return"4.0.0-beta.2"}},{key:"Default",get:function(){return s}}]),a}();return t(document).on(u.CLICK_DATA_API,y.DATA_SLIDE,C._dataApiClickHandler),t(window).on(u.LOAD_DATA_API,function(){t(y.DATA_RIDE).each(function(){var e=t(this);C._jQueryInterface.call(e,e.data())})}),t.fn[e]=C._jQueryInterface,t.fn[e].Constructor=C,t.fn[e].noConflict=function(){return t.fn[e]=a,C._jQueryInterface},C}(e),c=function(t){var e="collapse",n="bs.collapse",i="."+n,a=t.fn[e],s={toggle:!0,parent:""},l={toggle:"boolean",parent:"(string|element)"},c={SHOW:"show"+i,SHOWN:"shown"+i,HIDE:"hide"+i,HIDDEN:"hidden"+i,CLICK_DATA_API:"click"+i+".data-api"},f="show",d="collapse",h="collapsing",u="collapsed",p="width",m="height",g={ACTIVES:".show, .collapsing",DATA_TOGGLE:'[data-toggle="collapse"]'},v=function(){function i(e,n){this._isTransitioning=!1,this._element=e,this._config=this._getConfig(n),this._triggerArray=t.makeArray(t('[data-toggle="collapse"][href="#'+e.id+'"],[data-toggle="collapse"][data-target="#'+e.id+'"]'));for(var i=t(g.DATA_TOGGLE),o=0;o<i.length;o++){var a=i[o],s=r.getSelectorFromElement(a);null!==s&&t(s).filter(e).length>0&&this._triggerArray.push(a)}this._parent=this._config.parent?this._getParent():null,this._config.parent||this._addAriaAndCollapsedClass(this._element,this._triggerArray),this._config.toggle&&this.toggle()}var a=i.prototype;return a.toggle=function(){t(this._element).hasClass(f)?this.hide():this.show()},a.show=function(){var e=this;if(!this._isTransitioning&&!t(this._element).hasClass(f)){var o,a;if(this._parent&&((o=t.makeArray(t(this._parent).children().children(g.ACTIVES))).length||(o=null)),!(o&&(a=t(o).data(n))&&a._isTransitioning)){var s=t.Event(c.SHOW);if(t(this._element).trigger(s),!s.isDefaultPrevented()){o&&(i._jQueryInterface.call(t(o),"hide"),a||t(o).data(n,null));var l=this._getDimension();t(this._element).removeClass(d).addClass(h),this._element.style[l]=0,this._triggerArray.length&&t(this._triggerArray).removeClass(u).attr("aria-expanded",!0),this.setTransitioning(!0);var p=function(){t(e._element).removeClass(h).addClass(d).addClass(f),e._element.style[l]="",e.setTransitioning(!1),t(e._element).trigger(c.SHOWN)};if(r.supportsTransitionEnd()){var m="scroll"+(l[0].toUpperCase()+l.slice(1));t(this._element).one(r.TRANSITION_END,p).emulateTransitionEnd(600),this._element.style[l]=this._element[m]+"px"}else p()}}}},a.hide=function(){var e=this;if(!this._isTransitioning&&t(this._element).hasClass(f)){var n=t.Event(c.HIDE);if(t(this._element).trigger(n),!n.isDefaultPrevented()){var i=this._getDimension();if(this._element.style[i]=this._element.getBoundingClientRect()[i]+"px",r.reflow(this._element),t(this._element).addClass(h).removeClass(d).removeClass(f),this._triggerArray.length)for(var o=0;o<this._triggerArray.length;o++){var a=this._triggerArray[o],s=r.getSelectorFromElement(a);if(null!==s){t(s).hasClass(f)||t(a).addClass(u).attr("aria-expanded",!1)}}this.setTransitioning(!0);var l=function(){e.setTransitioning(!1),t(e._element).removeClass(h).addClass(d).trigger(c.HIDDEN)};this._element.style[i]="",r.supportsTransitionEnd()?t(this._element).one(r.TRANSITION_END,l).emulateTransitionEnd(600):l()}}},a.setTransitioning=function(t){this._isTransitioning=t},a.dispose=function(){t.removeData(this._element,n),this._config=null,this._parent=null,this._element=null,this._triggerArray=null,this._isTransitioning=null},a._getConfig=function(n){return n=t.extend({},s,n),n.toggle=Boolean(n.toggle),r.typeCheckConfig(e,n,l),n},a._getDimension=function(){return t(this._element).hasClass(p)?p:m},a._getParent=function(){var e=this,n=null;r.isElement(this._config.parent)?(n=this._config.parent,void 0!==this._config.parent.jquery&&(n=this._config.parent[0])):n=t(this._config.parent)[0];var o='[data-toggle="collapse"][data-parent="'+this._config.parent+'"]';return t(n).find(o).each(function(t,n){e._addAriaAndCollapsedClass(i._getTargetFromElement(n),[n])}),n},a._addAriaAndCollapsedClass=function(e,n){if(e){var i=t(e).hasClass(f);n.length&&t(n).toggleClass(u,!i).attr("aria-expanded",i)}},i._getTargetFromElement=function(e){var n=r.getSelectorFromElement(e);return n?t(n)[0]:null},i._jQueryInterface=function(e){return this.each(function(){var o=t(this),r=o.data(n),a=t.extend({},s,o.data(),"object"==typeof e&&e);if(!r&&a.toggle&&/show|hide/.test(e)&&(a.toggle=!1),r||(r=new i(this,a),o.data(n,r)),"string"==typeof e){if(void 0===r[e])throw new Error('No method named "'+e+'"');r[e]()}})},o(i,null,[{key:"VERSION",get:function(){return"4.0.0-beta.2"}},{key:"Default",get:function(){return s}}]),i}();return t(document).on(c.CLICK_DATA_API,g.DATA_TOGGLE,function(e){"A"===e.currentTarget.tagName&&e.preventDefault();var i=t(this),o=r.getSelectorFromElement(this);t(o).each(function(){var e=t(this),o=e.data(n)?"toggle":i.data();v._jQueryInterface.call(e,o)})}),t.fn[e]=v._jQueryInterface,t.fn[e].Constructor=v,t.fn[e].noConflict=function(){return t.fn[e]=a,v._jQueryInterface},v}(e),f=function(t){var e="dropdown",i="bs.dropdown",a="."+i,s=t.fn[e],l=new RegExp("38|40|27"),c={HIDE:"hide"+a,HIDDEN:"hidden"+a,SHOW:"show"+a,SHOWN:"shown"+a,CLICK:"click"+a,CLICK_DATA_API:"click"+a+".data-api",KEYDOWN_DATA_API:"keydown"+a+".data-api",KEYUP_DATA_API:"keyup"+a+".data-api"},f="disabled",d="show",h="dropup",u="dropright",p="dropleft",m="dropdown-menu-right",g="dropdown-menu-left",v='[data-toggle="dropdown"]',_=".dropdown form",E=".dropdown-menu",b=".navbar-nav",y=".dropdown-menu .dropdown-item:not(.disabled)",C="top-start",T="top-end",w="bottom-start",I="bottom-end",A="right-start",D="left-start",S={offset:0,flip:!0},N={offset:"(number|string|function)",flip:"boolean"},O=function(){function s(t,e){this._element=t,this._popper=null,this._config=this._getConfig(e),this._menu=this._getMenuElement(),this._inNavbar=this._detectNavbar(),this._addEventListeners()}var _=s.prototype;return _.toggle=function(){if(!this._element.disabled&&!t(this._element).hasClass(f)){var e=s._getParentFromElement(this._element),i=t(this._menu).hasClass(d);if(s._clearMenus(),!i){var o={relatedTarget:this._element},r=t.Event(c.SHOW,o);if(t(e).trigger(r),!r.isDefaultPrevented()){if(!this._inNavbar){if(void 0===n)throw new Error("Bootstrap dropdown require Popper.js (https://popper.js.org)");var a=this._element;t(e).hasClass(h)&&(t(this._menu).hasClass(g)||t(this._menu).hasClass(m))&&(a=e),this._popper=new n(a,this._menu,this._getPopperConfig())}"ontouchstart"in document.documentElement&&!t(e).closest(b).length&&t("body").children().on("mouseover",null,t.noop),this._element.focus(),this._element.setAttribute("aria-expanded",!0),t(this._menu).toggleClass(d),t(e).toggleClass(d).trigger(t.Event(c.SHOWN,o))}}}},_.dispose=function(){t.removeData(this._element,i),t(this._element).off(a),this._element=null,this._menu=null,null!==this._popper&&(this._popper.destroy(),this._popper=null)},_.update=function(){this._inNavbar=this._detectNavbar(),null!==this._popper&&this._popper.scheduleUpdate()},_._addEventListeners=function(){var e=this;t(this._element).on(c.CLICK,function(t){t.preventDefault(),t.stopPropagation(),e.toggle()})},_._getConfig=function(n){return n=t.extend({},this.constructor.Default,t(this._element).data(),n),r.typeCheckConfig(e,n,this.constructor.DefaultType),n},_._getMenuElement=function(){if(!this._menu){var e=s._getParentFromElement(this._element);this._menu=t(e).find(E)[0]}return this._menu},_._getPlacement=function(){var e=t(this._element).parent(),n=w;return e.hasClass(h)?(n=C,t(this._menu).hasClass(m)&&(n=T)):e.hasClass(u)?n=A:e.hasClass(p)?n=D:t(this._menu).hasClass(m)&&(n=I),n},_._detectNavbar=function(){return t(this._element).closest(".navbar").length>0},_._getPopperConfig=function(){var e=this,n={};"function"==typeof this._config.offset?n.fn=function(n){return n.offsets=t.extend({},n.offsets,e._config.offset(n.offsets)||{}),n}:n.offset=this._config.offset;return{placement:this._getPlacement(),modifiers:{offset:n,flip:{enabled:this._config.flip}}}},s._jQueryInterface=function(e){return this.each(function(){var n=t(this).data(i);if(n||(n=new s(this,"object"==typeof e?e:null),t(this).data(i,n)),"string"==typeof e){if(void 0===n[e])throw new Error('No method named "'+e+'"');n[e]()}})},s._clearMenus=function(e){if(!e||3!==e.which&&("keyup"!==e.type||9===e.which))for(var n=t.makeArray(t(v)),o=0;o<n.length;o++){var r=s._getParentFromElement(n[o]),a=t(n[o]).data(i),l={relatedTarget:n[o]};if(a){var f=a._menu;if(t(r).hasClass(d)&&!(e&&("click"===e.type&&/input|textarea/i.test(e.target.tagName)||"keyup"===e.type&&9===e.which)&&t.contains(r,e.target))){var h=t.Event(c.HIDE,l);t(r).trigger(h),h.isDefaultPrevented()||("ontouchstart"in document.documentElement&&t("body").children().off("mouseover",null,t.noop),n[o].setAttribute("aria-expanded","false"),t(f).removeClass(d),t(r).removeClass(d).trigger(t.Event(c.HIDDEN,l)))}}}},s._getParentFromElement=function(e){var n,i=r.getSelectorFromElement(e);return i&&(n=t(i)[0]),n||e.parentNode},s._dataApiKeydownHandler=function(e){if((/input|textarea/i.test(e.target.tagName)?!(32===e.which||27!==e.which&&(40!==e.which&&38!==e.which||t(e.target).closest(E).length)):l.test(e.which))&&(e.preventDefault(),e.stopPropagation(),!this.disabled&&!t(this).hasClass(f))){var n=s._getParentFromElement(this),i=t(n).hasClass(d);if((i||27===e.which&&32===e.which)&&(!i||27!==e.which&&32!==e.which)){var o=t(n).find(y).get();if(o.length){var r=o.indexOf(e.target);38===e.which&&r>0&&r--,40===e.which&&r<o.length-1&&r++,r<0&&(r=0),o[r].focus()}}else{if(27===e.which){var a=t(n).find(v)[0];t(a).trigger("focus")}t(this).trigger("click")}}},o(s,null,[{key:"VERSION",get:function(){return"4.0.0-beta.2"}},{key:"Default",get:function(){return S}},{key:"DefaultType",get:function(){return N}}]),s}();return t(document).on(c.KEYDOWN_DATA_API,v,O._dataApiKeydownHandler).on(c.KEYDOWN_DATA_API,E,O._dataApiKeydownHandler).on(c.CLICK_DATA_API+" "+c.KEYUP_DATA_API,O._clearMenus).on(c.CLICK_DATA_API,v,function(e){e.preventDefault(),e.stopPropagation(),O._jQueryInterface.call(t(this),"toggle")}).on(c.CLICK_DATA_API,_,function(t){t.stopPropagation()}),t.fn[e]=O._jQueryInterface,t.fn[e].Constructor=O,t.fn[e].noConflict=function(){return t.fn[e]=s,O._jQueryInterface},O}(e),d=function(t){var e="bs.modal",n="."+e,i=t.fn.modal,a={backdrop:!0,keyboard:!0,focus:!0,show:!0},s={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean",show:"boolean"},l={HIDE:"hide"+n,HIDDEN:"hidden"+n,SHOW:"show"+n,SHOWN:"shown"+n,FOCUSIN:"focusin"+n,RESIZE:"resize"+n,CLICK_DISMISS:"click.dismiss"+n,KEYDOWN_DISMISS:"keydown.dismiss"+n,MOUSEUP_DISMISS:"mouseup.dismiss"+n,MOUSEDOWN_DISMISS:"mousedown.dismiss"+n,CLICK_DATA_API:"click.bs.modal.data-api"},c="modal-scrollbar-measure",f="modal-backdrop",d="modal-open",h="fade",u="show",p={DIALOG:".modal-dialog",DATA_TOGGLE:'[data-toggle="modal"]',DATA_DISMISS:'[data-dismiss="modal"]',FIXED_CONTENT:".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",STICKY_CONTENT:".sticky-top",NAVBAR_TOGGLER:".navbar-toggler"},m=function(){function i(e,n){this._config=this._getConfig(n),this._element=e,this._dialog=t(e).find(p.DIALOG)[0],this._backdrop=null,this._isShown=!1,this._isBodyOverflowing=!1,this._ignoreBackdropClick=!1,this._originalBodyPadding=0,this._scrollbarWidth=0}var m=i.prototype;return m.toggle=function(t){return this._isShown?this.hide():this.show(t)},m.show=function(e){var n=this;if(!this._isTransitioning&&!this._isShown){r.supportsTransitionEnd()&&t(this._element).hasClass(h)&&(this._isTransitioning=!0);var i=t.Event(l.SHOW,{relatedTarget:e});t(this._element).trigger(i),this._isShown||i.isDefaultPrevented()||(this._isShown=!0,this._checkScrollbar(),this._setScrollbar(),this._adjustDialog(),t(document.body).addClass(d),this._setEscapeEvent(),this._setResizeEvent(),t(this._element).on(l.CLICK_DISMISS,p.DATA_DISMISS,function(t){return n.hide(t)}),t(this._dialog).on(l.MOUSEDOWN_DISMISS,function(){t(n._element).one(l.MOUSEUP_DISMISS,function(e){t(e.target).is(n._element)&&(n._ignoreBackdropClick=!0)})}),this._showBackdrop(function(){return n._showElement(e)}))}},m.hide=function(e){var n=this;if(e&&e.preventDefault(),!this._isTransitioning&&this._isShown){var i=t.Event(l.HIDE);if(t(this._element).trigger(i),this._isShown&&!i.isDefaultPrevented()){this._isShown=!1;var o=r.supportsTransitionEnd()&&t(this._element).hasClass(h);o&&(this._isTransitioning=!0),this._setEscapeEvent(),this._setResizeEvent(),t(document).off(l.FOCUSIN),t(this._element).removeClass(u),t(this._element).off(l.CLICK_DISMISS),t(this._dialog).off(l.MOUSEDOWN_DISMISS),o?t(this._element).one(r.TRANSITION_END,function(t){return n._hideModal(t)}).emulateTransitionEnd(300):this._hideModal()}}},m.dispose=function(){t.removeData(this._element,e),t(window,document,this._element,this._backdrop).off(n),this._config=null,this._element=null,this._dialog=null,this._backdrop=null,this._isShown=null,this._isBodyOverflowing=null,this._ignoreBackdropClick=null,this._scrollbarWidth=null},m.handleUpdate=function(){this._adjustDialog()},m._getConfig=function(e){return e=t.extend({},a,e),r.typeCheckConfig("modal",e,s),e},m._showElement=function(e){var n=this,i=r.supportsTransitionEnd()&&t(this._element).hasClass(h);this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.appendChild(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.scrollTop=0,i&&r.reflow(this._element),t(this._element).addClass(u),this._config.focus&&this._enforceFocus();var o=t.Event(l.SHOWN,{relatedTarget:e}),a=function(){n._config.focus&&n._element.focus(),n._isTransitioning=!1,t(n._element).trigger(o)};i?t(this._dialog).one(r.TRANSITION_END,a).emulateTransitionEnd(300):a()},m._enforceFocus=function(){var e=this;t(document).off(l.FOCUSIN).on(l.FOCUSIN,function(n){document===n.target||e._element===n.target||t(e._element).has(n.target).length||e._element.focus()})},m._setEscapeEvent=function(){var e=this;this._isShown&&this._config.keyboard?t(this._element).on(l.KEYDOWN_DISMISS,function(t){27===t.which&&(t.preventDefault(),e.hide())}):this._isShown||t(this._element).off(l.KEYDOWN_DISMISS)},m._setResizeEvent=function(){var e=this;this._isShown?t(window).on(l.RESIZE,function(t){return e.handleUpdate(t)}):t(window).off(l.RESIZE)},m._hideModal=function(){var e=this;this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._isTransitioning=!1,this._showBackdrop(function(){t(document.body).removeClass(d),e._resetAdjustments(),e._resetScrollbar(),t(e._element).trigger(l.HIDDEN)})},m._removeBackdrop=function(){this._backdrop&&(t(this._backdrop).remove(),this._backdrop=null)},m._showBackdrop=function(e){var n=this,i=t(this._element).hasClass(h)?h:"";if(this._isShown&&this._config.backdrop){var o=r.supportsTransitionEnd()&&i;if(this._backdrop=document.createElement("div"),this._backdrop.className=f,i&&t(this._backdrop).addClass(i),t(this._backdrop).appendTo(document.body),t(this._element).on(l.CLICK_DISMISS,function(t){n._ignoreBackdropClick?n._ignoreBackdropClick=!1:t.target===t.currentTarget&&("static"===n._config.backdrop?n._element.focus():n.hide())}),o&&r.reflow(this._backdrop),t(this._backdrop).addClass(u),!e)return;if(!o)return void e();t(this._backdrop).one(r.TRANSITION_END,e).emulateTransitionEnd(150)}else if(!this._isShown&&this._backdrop){t(this._backdrop).removeClass(u);var a=function(){n._removeBackdrop(),e&&e()};r.supportsTransitionEnd()&&t(this._element).hasClass(h)?t(this._backdrop).one(r.TRANSITION_END,a).emulateTransitionEnd(150):a()}else e&&e()},m._adjustDialog=function(){var t=this._element.scrollHeight>document.documentElement.clientHeight;!this._isBodyOverflowing&&t&&(this._element.style.paddingLeft=this._scrollbarWidth+"px"),this._isBodyOverflowing&&!t&&(this._element.style.paddingRight=this._scrollbarWidth+"px")},m._resetAdjustments=function(){this._element.style.paddingLeft="",this._element.style.paddingRight=""},m._checkScrollbar=function(){var t=document.body.getBoundingClientRect();this._isBodyOverflowing=t.left+t.right<window.innerWidth,this._scrollbarWidth=this._getScrollbarWidth()},m._setScrollbar=function(){var e=this;if(this._isBodyOverflowing){t(p.FIXED_CONTENT).each(function(n,i){var o=t(i)[0].style.paddingRight,r=t(i).css("padding-right");t(i).data("padding-right",o).css("padding-right",parseFloat(r)+e._scrollbarWidth+"px")}),t(p.STICKY_CONTENT).each(function(n,i){var o=t(i)[0].style.marginRight,r=t(i).css("margin-right");t(i).data("margin-right",o).css("margin-right",parseFloat(r)-e._scrollbarWidth+"px")}),t(p.NAVBAR_TOGGLER).each(function(n,i){var o=t(i)[0].style.marginRight,r=t(i).css("margin-right");t(i).data("margin-right",o).css("margin-right",parseFloat(r)+e._scrollbarWidth+"px")});var n=document.body.style.paddingRight,i=t("body").css("padding-right");t("body").data("padding-right",n).css("padding-right",parseFloat(i)+this._scrollbarWidth+"px")}},m._resetScrollbar=function(){t(p.FIXED_CONTENT).each(function(e,n){var i=t(n).data("padding-right");void 0!==i&&t(n).css("padding-right",i).removeData("padding-right")}),t(p.STICKY_CONTENT+", "+p.NAVBAR_TOGGLER).each(function(e,n){var i=t(n).data("margin-right");void 0!==i&&t(n).css("margin-right",i).removeData("margin-right")});var e=t("body").data("padding-right");void 0!==e&&t("body").css("padding-right",e).removeData("padding-right")},m._getScrollbarWidth=function(){var t=document.createElement("div");t.className=c,document.body.appendChild(t);var e=t.getBoundingClientRect().width-t.clientWidth;return document.body.removeChild(t),e},i._jQueryInterface=function(n,o){return this.each(function(){var r=t(this).data(e),a=t.extend({},i.Default,t(this).data(),"object"==typeof n&&n);if(r||(r=new i(this,a),t(this).data(e,r)),"string"==typeof n){if(void 0===r[n])throw new Error('No method named "'+n+'"');r[n](o)}else a.show&&r.show(o)})},o(i,null,[{key:"VERSION",get:function(){return"4.0.0-beta.2"}},{key:"Default",get:function(){return a}}]),i}();return t(document).on(l.CLICK_DATA_API,p.DATA_TOGGLE,function(n){var i,o=this,a=r.getSelectorFromElement(this);a&&(i=t(a)[0]);var s=t(i).data(e)?"toggle":t.extend({},t(i).data(),t(this).data());"A"!==this.tagName&&"AREA"!==this.tagName||n.preventDefault();var c=t(i).one(l.SHOW,function(e){e.isDefaultPrevented()||c.one(l.HIDDEN,function(){t(o).is(":visible")&&o.focus()})});m._jQueryInterface.call(t(i),s,this)}),t.fn.modal=m._jQueryInterface,t.fn.modal.Constructor=m,t.fn.modal.noConflict=function(){return t.fn.modal=i,m._jQueryInterface},m}(e),h=function(t){var e="tooltip",i="bs.tooltip",a="."+i,s=t.fn[e],l=new RegExp("(^|\\s)bs-tooltip\\S+","g"),c={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"(number|string)",container:"(string|element|boolean)",fallbackPlacement:"(string|array)"},f={AUTO:"auto",TOP:"top",RIGHT:"right",BOTTOM:"bottom",LEFT:"left"},d={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,selector:!1,placement:"top",offset:0,container:!1,fallbackPlacement:"flip"},h="show",u="out",p={HIDE:"hide"+a,HIDDEN:"hidden"+a,SHOW:"show"+a,SHOWN:"shown"+a,INSERTED:"inserted"+a,CLICK:"click"+a,FOCUSIN:"focusin"+a,FOCUSOUT:"focusout"+a,MOUSEENTER:"mouseenter"+a,MOUSELEAVE:"mouseleave"+a},m="fade",g="show",v=".tooltip-inner",_=".arrow",E="hover",b="focus",y="click",C="manual",T=function(){function s(t,e){if(void 0===n)throw new Error("Bootstrap tooltips require Popper.js (https://popper.js.org)");this._isEnabled=!0,this._timeout=0,this._hoverState="",this._activeTrigger={},this._popper=null,this.element=t,this.config=this._getConfig(e),this.tip=null,this._setListeners()}var T=s.prototype;return T.enable=function(){this._isEnabled=!0},T.disable=function(){this._isEnabled=!1},T.toggleEnabled=function(){this._isEnabled=!this._isEnabled},T.toggle=function(e){if(this._isEnabled)if(e){var n=this.constructor.DATA_KEY,i=t(e.currentTarget).data(n);i||(i=new this.constructor(e.currentTarget,this._getDelegateConfig()),t(e.currentTarget).data(n,i)),i._activeTrigger.click=!i._activeTrigger.click,i._isWithActiveTrigger()?i._enter(null,i):i._leave(null,i)}else{if(t(this.getTipElement()).hasClass(g))return void this._leave(null,this);this._enter(null,this)}},T.dispose=function(){clearTimeout(this._timeout),t.removeData(this.element,this.constructor.DATA_KEY),t(this.element).off(this.constructor.EVENT_KEY),t(this.element).closest(".modal").off("hide.bs.modal"),this.tip&&t(this.tip).remove(),this._isEnabled=null,this._timeout=null,this._hoverState=null,this._activeTrigger=null,null!==this._popper&&this._popper.destroy(),this._popper=null,this.element=null,this.config=null,this.tip=null},T.show=function(){var e=this;if("none"===t(this.element).css("display"))throw new Error("Please use show on visible elements");var i=t.Event(this.constructor.Event.SHOW);if(this.isWithContent()&&this._isEnabled){t(this.element).trigger(i);var o=t.contains(this.element.ownerDocument.documentElement,this.element);if(i.isDefaultPrevented()||!o)return;var a=this.getTipElement(),l=r.getUID(this.constructor.NAME);a.setAttribute("id",l),this.element.setAttribute("aria-describedby",l),this.setContent(),this.config.animation&&t(a).addClass(m);var c="function"==typeof this.config.placement?this.config.placement.call(this,a,this.element):this.config.placement,f=this._getAttachment(c);this.addAttachmentClass(f);var d=!1===this.config.container?document.body:t(this.config.container);t(a).data(this.constructor.DATA_KEY,this),t.contains(this.element.ownerDocument.documentElement,this.tip)||t(a).appendTo(d),t(this.element).trigger(this.constructor.Event.INSERTED),this._popper=new n(this.element,a,{placement:f,modifiers:{offset:{offset:this.config.offset},flip:{behavior:this.config.fallbackPlacement},arrow:{element:_}},onCreate:function(t){t.originalPlacement!==t.placement&&e._handlePopperPlacementChange(t)},onUpdate:function(t){e._handlePopperPlacementChange(t)}}),t(a).addClass(g),"ontouchstart"in document.documentElement&&t("body").children().on("mouseover",null,t.noop);var h=function(){e.config.animation&&e._fixTransition();var n=e._hoverState;e._hoverState=null,t(e.element).trigger(e.constructor.Event.SHOWN),n===u&&e._leave(null,e)};r.supportsTransitionEnd()&&t(this.tip).hasClass(m)?t(this.tip).one(r.TRANSITION_END,h).emulateTransitionEnd(s._TRANSITION_DURATION):h()}},T.hide=function(e){var n=this,i=this.getTipElement(),o=t.Event(this.constructor.Event.HIDE),a=function(){n._hoverState!==h&&i.parentNode&&i.parentNode.removeChild(i),n._cleanTipClass(),n.element.removeAttribute("aria-describedby"),t(n.element).trigger(n.constructor.Event.HIDDEN),null!==n._popper&&n._popper.destroy(),e&&e()};t(this.element).trigger(o),o.isDefaultPrevented()||(t(i).removeClass(g),"ontouchstart"in document.documentElement&&t("body").children().off("mouseover",null,t.noop),this._activeTrigger[y]=!1,this._activeTrigger[b]=!1,this._activeTrigger[E]=!1,r.supportsTransitionEnd()&&t(this.tip).hasClass(m)?t(i).one(r.TRANSITION_END,a).emulateTransitionEnd(150):a(),this._hoverState="")},T.update=function(){null!==this._popper&&this._popper.scheduleUpdate()},T.isWithContent=function(){return Boolean(this.getTitle())},T.addAttachmentClass=function(e){t(this.getTipElement()).addClass("bs-tooltip-"+e)},T.getTipElement=function(){return this.tip=this.tip||t(this.config.template)[0],this.tip},T.setContent=function(){var e=t(this.getTipElement());this.setElementContent(e.find(v),this.getTitle()),e.removeClass(m+" "+g)},T.setElementContent=function(e,n){var i=this.config.html;"object"==typeof n&&(n.nodeType||n.jquery)?i?t(n).parent().is(e)||e.empty().append(n):e.text(t(n).text()):e[i?"html":"text"](n)},T.getTitle=function(){var t=this.element.getAttribute("data-original-title");return t||(t="function"==typeof this.config.title?this.config.title.call(this.element):this.config.title),t},T._getAttachment=function(t){return f[t.toUpperCase()]},T._setListeners=function(){var e=this;this.config.trigger.split(" ").forEach(function(n){if("click"===n)t(e.element).on(e.constructor.Event.CLICK,e.config.selector,function(t){return e.toggle(t)});else if(n!==C){var i=n===E?e.constructor.Event.MOUSEENTER:e.constructor.Event.FOCUSIN,o=n===E?e.constructor.Event.MOUSELEAVE:e.constructor.Event.FOCUSOUT;t(e.element).on(i,e.config.selector,function(t){return e._enter(t)}).on(o,e.config.selector,function(t){return e._leave(t)})}t(e.element).closest(".modal").on("hide.bs.modal",function(){return e.hide()})}),this.config.selector?this.config=t.extend({},this.config,{trigger:"manual",selector:""}):this._fixTitle()},T._fixTitle=function(){var t=typeof this.element.getAttribute("data-original-title");(this.element.getAttribute("title")||"string"!==t)&&(this.element.setAttribute("data-original-title",this.element.getAttribute("title")||""),this.element.setAttribute("title",""))},T._enter=function(e,n){var i=this.constructor.DATA_KEY;(n=n||t(e.currentTarget).data(i))||(n=new this.constructor(e.currentTarget,this._getDelegateConfig()),t(e.currentTarget).data(i,n)),e&&(n._activeTrigger["focusin"===e.type?b:E]=!0),t(n.getTipElement()).hasClass(g)||n._hoverState===h?n._hoverState=h:(clearTimeout(n._timeout),n._hoverState=h,n.config.delay&&n.config.delay.show?n._timeout=setTimeout(function(){n._hoverState===h&&n.show()},n.config.delay.show):n.show())},T._leave=function(e,n){var i=this.constructor.DATA_KEY;(n=n||t(e.currentTarget).data(i))||(n=new this.constructor(e.currentTarget,this._getDelegateConfig()),t(e.currentTarget).data(i,n)),e&&(n._activeTrigger["focusout"===e.type?b:E]=!1),n._isWithActiveTrigger()||(clearTimeout(n._timeout),n._hoverState=u,n.config.delay&&n.config.delay.hide?n._timeout=setTimeout(function(){n._hoverState===u&&n.hide()},n.config.delay.hide):n.hide())},T._isWithActiveTrigger=function(){for(var t in this._activeTrigger)if(this._activeTrigger[t])return!0;return!1},T._getConfig=function(n){return"number"==typeof(n=t.extend({},this.constructor.Default,t(this.element).data(),n)).delay&&(n.delay={show:n.delay,hide:n.delay}),"number"==typeof n.title&&(n.title=n.title.toString()),"number"==typeof n.content&&(n.content=n.content.toString()),r.typeCheckConfig(e,n,this.constructor.DefaultType),n},T._getDelegateConfig=function(){var t={};if(this.config)for(var e in this.config)this.constructor.Default[e]!==this.config[e]&&(t[e]=this.config[e]);return t},T._cleanTipClass=function(){var e=t(this.getTipElement()),n=e.attr("class").match(l);null!==n&&n.length>0&&e.removeClass(n.join(""))},T._handlePopperPlacementChange=function(t){this._cleanTipClass(),this.addAttachmentClass(this._getAttachment(t.placement))},T._fixTransition=function(){var e=this.getTipElement(),n=this.config.animation;null===e.getAttribute("x-placement")&&(t(e).removeClass(m),this.config.animation=!1,this.hide(),this.show(),this.config.animation=n)},s._jQueryInterface=function(e){return this.each(function(){var n=t(this).data(i),o="object"==typeof e&&e;if((n||!/dispose|hide/.test(e))&&(n||(n=new s(this,o),t(this).data(i,n)),"string"==typeof e)){if(void 0===n[e])throw new Error('No method named "'+e+'"');n[e]()}})},o(s,null,[{key:"VERSION",get:function(){return"4.0.0-beta.2"}},{key:"Default",get:function(){return d}},{key:"NAME",get:function(){return e}},{key:"DATA_KEY",get:function(){return i}},{key:"Event",get:function(){return p}},{key:"EVENT_KEY",get:function(){return a}},{key:"DefaultType",get:function(){return c}}]),s}();return t.fn[e]=T._jQueryInterface,t.fn[e].Constructor=T,t.fn[e].noConflict=function(){return t.fn[e]=s,T._jQueryInterface},T}(e),u=function(t){var e="popover",n="bs.popover",i="."+n,r=t.fn[e],a=new RegExp("(^|\\s)bs-popover\\S+","g"),s=t.extend({},h.Default,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'}),l=t.extend({},h.DefaultType,{content:"(string|element|function)"}),c="fade",f="show",d=".popover-header",u=".popover-body",p={HIDE:"hide"+i,HIDDEN:"hidden"+i,SHOW:"show"+i,SHOWN:"shown"+i,INSERTED:"inserted"+i,CLICK:"click"+i,FOCUSIN:"focusin"+i,FOCUSOUT:"focusout"+i,MOUSEENTER:"mouseenter"+i,MOUSELEAVE:"mouseleave"+i},m=function(r){function h(){return r.apply(this,arguments)||this}!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(h,r);var m=h.prototype;return m.isWithContent=function(){return this.getTitle()||this._getContent()},m.addAttachmentClass=function(e){t(this.getTipElement()).addClass("bs-popover-"+e)},m.getTipElement=function(){return this.tip=this.tip||t(this.config.template)[0],this.tip},m.setContent=function(){var e=t(this.getTipElement());this.setElementContent(e.find(d),this.getTitle());var n=this._getContent();"function"==typeof n&&(n=n.call(this.element)),this.setElementContent(e.find(u),n),e.removeClass(c+" "+f)},m._getContent=function(){return this.element.getAttribute("data-content")||this.config.content},m._cleanTipClass=function(){var e=t(this.getTipElement()),n=e.attr("class").match(a);null!==n&&n.length>0&&e.removeClass(n.join(""))},h._jQueryInterface=function(e){return this.each(function(){var i=t(this).data(n),o="object"==typeof e?e:null;if((i||!/destroy|hide/.test(e))&&(i||(i=new h(this,o),t(this).data(n,i)),"string"==typeof e)){if(void 0===i[e])throw new Error('No method named "'+e+'"');i[e]()}})},o(h,null,[{key:"VERSION",get:function(){return"4.0.0-beta.2"}},{key:"Default",get:function(){return s}},{key:"NAME",get:function(){return e}},{key:"DATA_KEY",get:function(){return n}},{key:"Event",get:function(){return p}},{key:"EVENT_KEY",get:function(){return i}},{key:"DefaultType",get:function(){return l}}]),h}(h);return t.fn[e]=m._jQueryInterface,t.fn[e].Constructor=m,t.fn[e].noConflict=function(){return t.fn[e]=r,m._jQueryInterface},m}(e),p=function(t){var e="scrollspy",n="bs.scrollspy",i="."+n,a=t.fn[e],s={offset:10,method:"auto",target:""},l={offset:"number",method:"string",target:"(string|element)"},c={ACTIVATE:"activate"+i,SCROLL:"scroll"+i,LOAD_DATA_API:"load"+i+".data-api"},f="dropdown-item",d="active",h={DATA_SPY:'[data-spy="scroll"]',ACTIVE:".active",NAV_LIST_GROUP:".nav, .list-group",NAV_LINKS:".nav-link",NAV_ITEMS:".nav-item",LIST_ITEMS:".list-group-item",DROPDOWN:".dropdown",DROPDOWN_ITEMS:".dropdown-item",DROPDOWN_TOGGLE:".dropdown-toggle"},u="offset",p="position",m=function(){function a(e,n){var i=this;this._element=e,this._scrollElement="BODY"===e.tagName?window:e,this._config=this._getConfig(n),this._selector=this._config.target+" "+h.NAV_LINKS+","+this._config.target+" "+h.LIST_ITEMS+","+this._config.target+" "+h.DROPDOWN_ITEMS,this._offsets=[],this._targets=[],this._activeTarget=null,this._scrollHeight=0,t(this._scrollElement).on(c.SCROLL,function(t){return i._process(t)}),this.refresh(),this._process()}var m=a.prototype;return m.refresh=function(){var e=this,n=this._scrollElement!==this._scrollElement.window?p:u,i="auto"===this._config.method?n:this._config.method,o=i===p?this._getScrollTop():0;this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight();t.makeArray(t(this._selector)).map(function(e){var n,a=r.getSelectorFromElement(e);if(a&&(n=t(a)[0]),n){var s=n.getBoundingClientRect();if(s.width||s.height)return[t(n)[i]().top+o,a]}return null}).filter(function(t){return t}).sort(function(t,e){return t[0]-e[0]}).forEach(function(t){e._offsets.push(t[0]),e._targets.push(t[1])})},m.dispose=function(){t.removeData(this._element,n),t(this._scrollElement).off(i),this._element=null,this._scrollElement=null,this._config=null,this._selector=null,this._offsets=null,this._targets=null,this._activeTarget=null,this._scrollHeight=null},m._getConfig=function(n){if("string"!=typeof(n=t.extend({},s,n)).target){var i=t(n.target).attr("id");i||(i=r.getUID(e),t(n.target).attr("id",i)),n.target="#"+i}return r.typeCheckConfig(e,n,l),n},m._getScrollTop=function(){return this._scrollElement===window?this._scrollElement.pageYOffset:this._scrollElement.scrollTop},m._getScrollHeight=function(){return this._scrollElement.scrollHeight||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)},m._getOffsetHeight=function(){return this._scrollElement===window?window.innerHeight:this._scrollElement.getBoundingClientRect().height},m._process=function(){var t=this._getScrollTop()+this._config.offset,e=this._getScrollHeight(),n=this._config.offset+e-this._getOffsetHeight();if(this._scrollHeight!==e&&this.refresh(),t>=n){var i=this._targets[this._targets.length-1];this._activeTarget!==i&&this._activate(i)}else{if(this._activeTarget&&t<this._offsets[0]&&this._offsets[0]>0)return this._activeTarget=null,void this._clear();for(var o=this._offsets.length;o--;){this._activeTarget!==this._targets[o]&&t>=this._offsets[o]&&(void 0===this._offsets[o+1]||t<this._offsets[o+1])&&this._activate(this._targets[o])}}},m._activate=function(e){this._activeTarget=e,this._clear();var n=this._selector.split(",");n=n.map(function(t){return t+'[data-target="'+e+'"],'+t+'[href="'+e+'"]'});var i=t(n.join(","));i.hasClass(f)?(i.closest(h.DROPDOWN).find(h.DROPDOWN_TOGGLE).addClass(d),i.addClass(d)):(i.addClass(d),i.parents(h.NAV_LIST_GROUP).prev(h.NAV_LINKS+", "+h.LIST_ITEMS).addClass(d),i.parents(h.NAV_LIST_GROUP).prev(h.NAV_ITEMS).children(h.NAV_LINKS).addClass(d)),t(this._scrollElement).trigger(c.ACTIVATE,{relatedTarget:e})},m._clear=function(){t(this._selector).filter(h.ACTIVE).removeClass(d)},a._jQueryInterface=function(e){return this.each(function(){var i=t(this).data(n);if(i||(i=new a(this,"object"==typeof e&&e),t(this).data(n,i)),"string"==typeof e){if(void 0===i[e])throw new Error('No method named "'+e+'"');i[e]()}})},o(a,null,[{key:"VERSION",get:function(){return"4.0.0-beta.2"}},{key:"Default",get:function(){return s}}]),a}();return t(window).on(c.LOAD_DATA_API,function(){for(var e=t.makeArray(t(h.DATA_SPY)),n=e.length;n--;){var i=t(e[n]);m._jQueryInterface.call(i,i.data())}}),t.fn[e]=m._jQueryInterface,t.fn[e].Constructor=m,t.fn[e].noConflict=function(){return t.fn[e]=a,m._jQueryInterface},m}(e),m=function(t){var e=".bs.tab",n=t.fn.tab,i={HIDE:"hide"+e,HIDDEN:"hidden"+e,SHOW:"show"+e,SHOWN:"shown"+e,CLICK_DATA_API:"click.bs.tab.data-api"},a="dropdown-menu",s="active",l="disabled",c="fade",f="show",d=".dropdown",h=".nav, .list-group",u=".active",p="> li > .active",m='[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]',g=".dropdown-toggle",v="> .dropdown-menu .active",_=function(){function e(t){this._element=t}var n=e.prototype;return n.show=function(){var e=this;if(!(this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE&&t(this._element).hasClass(s)||t(this._element).hasClass(l))){var n,o,a=t(this._element).closest(h)[0],c=r.getSelectorFromElement(this._element);if(a){var f="UL"===a.nodeName?p:u;o=(o=t.makeArray(t(a).find(f)))[o.length-1]}var d=t.Event(i.HIDE,{relatedTarget:this._element}),m=t.Event(i.SHOW,{relatedTarget:o});if(o&&t(o).trigger(d),t(this._element).trigger(m),!m.isDefaultPrevented()&&!d.isDefaultPrevented()){c&&(n=t(c)[0]),this._activate(this._element,a);var g=function(){var n=t.Event(i.HIDDEN,{relatedTarget:e._element}),r=t.Event(i.SHOWN,{relatedTarget:o});t(o).trigger(n),t(e._element).trigger(r)};n?this._activate(n,n.parentNode,g):g()}}},n.dispose=function(){t.removeData(this._element,"bs.tab"),this._element=null},n._activate=function(e,n,i){var o=this,a=("UL"===n.nodeName?t(n).find(p):t(n).children(u))[0],s=i&&r.supportsTransitionEnd()&&a&&t(a).hasClass(c),l=function(){return o._transitionComplete(e,a,s,i)};a&&s?t(a).one(r.TRANSITION_END,l).emulateTransitionEnd(150):l(),a&&t(a).removeClass(f)},n._transitionComplete=function(e,n,i,o){if(n){t(n).removeClass(s);var l=t(n.parentNode).find(v)[0];l&&t(l).removeClass(s),"tab"===n.getAttribute("role")&&n.setAttribute("aria-selected",!1)}if(t(e).addClass(s),"tab"===e.getAttribute("role")&&e.setAttribute("aria-selected",!0),i?(r.reflow(e),t(e).addClass(f)):t(e).removeClass(c),e.parentNode&&t(e.parentNode).hasClass(a)){var h=t(e).closest(d)[0];h&&t(h).find(g).addClass(s),e.setAttribute("aria-expanded",!0)}o&&o()},e._jQueryInterface=function(n){return this.each(function(){var i=t(this),o=i.data("bs.tab");if(o||(o=new e(this),i.data("bs.tab",o)),"string"==typeof n){if(void 0===o[n])throw new Error('No method named "'+n+'"');o[n]()}})},o(e,null,[{key:"VERSION",get:function(){return"4.0.0-beta.2"}}]),e}();return t(document).on(i.CLICK_DATA_API,m,function(e){e.preventDefault(),_._jQueryInterface.call(t(this),"show")}),t.fn.tab=_._jQueryInterface,t.fn.tab.Constructor=_,t.fn.tab.noConflict=function(){return t.fn.tab=n,_._jQueryInterface},_}(e);return function(t){if(void 0===t)throw new Error("Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.");var e=t.fn.jquery.split(" ")[0].split(".");if(e[0]<2&&e[1]<9||1===e[0]&&9===e[1]&&e[2]<1||e[0]>=4)throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0")}(e),t.Util=r,t.Alert=a,t.Button=s,t.Carousel=l,t.Collapse=c,t.Dropdown=f,t.Modal=d,t.Popover=u,t.Scrollspy=p,t.Tab=m,t.Tooltip=h,t}({},jQuery,Popper);!function(t){t(document).ready(function(){e.init()});var e={init:function(){console.log("Ok here! 123...")},navigation:function(){t(".menu-toggle").on("click",function(){t("body").addClass("menu-active"),t("body").append('<div id="sidenav-overlay"></div>')}),t("body").on("click","#sidenav-overlay, .main-navigation .menu-close",function(){t("body").removeClass("menu-active"),t("#sidenav-overlay").remove()})},aboutSection:function(){t(".about-nav li").mouseenter(function(){var e=t(this).find("a").attr("href");t(".about-nav li, .about-content").removeClass("active"),t(e).addClass("active"),t(this).addClass("active")})},animsInit:function(){t("#intro").length&&particlesJS.load("intro",ppmSettings.templatePath+"/assets/data/particlesjs-config.json",function(){}),t(".ppm-animated").waypoint(function(e){var n=t(t(this)[0].element),i=n.attr("data-anim"),o=n.attr("data-delay");"0"!==o?setTimeout(function(){t(".ppm-animated").addClass(i)},o):n.addClass(i)},{offset:"100%"})},utils:function(){t('[data-toggle="tooltip"]').tooltip(),t('.checkbox input[type="checkbox"], div[data-type=true_false] .acf-input input[type=checkbox]').on("change",function(e){t(this).is(":checked")?(t(".acf-form-submit input[type=submit]").removeAttr("disabled"),t(this).parent().parent().addClass("selected")):(t(".acf-form-submit input[type=submit]").attr("disabled","disabled"),t(this).parent().parent().removeClass("selected"))}),t(".gallery").length&&(t(".gallery-item a").attr("data-fancybox","group"),t(".gallery-item a").fancybox({})),t(".carousel-indicators-custom li").click(function(){t(".carousel-indicators-custom li").removeClass("active"),t(this).addClass("active")}),Raven.config("https://ec6112b1028046e28753f2688e5dfdb6@sentry.io/220799").install()},formHandlers:function(){if(t("#ppm-register-form").length){function e(){"pessoa-fisica"===t('input[name="reg_person_type"]:checked').val()?(t(".pessoa-fisica-input").removeClass("hidden"),t(".pessoa-juridica-input").addClass("hidden"),t("#reg-cpf").attr("required",!0),t("#reg-cnpj").removeAttr("required")):(t(".pessoa-juridica-input").removeClass("hidden"),t(".pessoa-fisica-input").addClass("hidden"),t("#reg-cnpj").attr("required",!0),t("#reg-cpf").removeAttr("required"))}e(),t('input[name="reg_person_type"]').on("click",e)}},votingHandlers:function(){if(t("#main.ppm-voting-form-page").length){t(".voting-col").on("click",function(){var e=t(this).attr("data-modality"),n=t(this).find("h2").text();t("body").addClass("modal-open modal-ppm-form"),t('div[data-name="'+e+'"]').addClass("overlayed"),t('div[data-name="'+e+'"] > .acf-input > .acf-repeater').css("height",t(window).height()-100+"px"),t('div[data-name="'+e+'"] > .acf-input > .acf-repeater .modality-title').remove(),t('div[data-name="'+e+'"] > .acf-input > .acf-repeater').prepend('<div class="acf-label modality-title"><label>'+n+"</label></div>"),t('div[data-name="'+e+'"]').prepend('<a href="#" class="close-modality"><i class="fa fa-times" aria-hidden="true"></i></a>');t("#ppm-voting-form div.overlayed > .acf-input > .acf-repeater > .acf-table > tbody > tr.acf-row").length>1?(t("#ppm-voting-form div.overlayed").removeClass("no-rows"),t("#ppm-voting-form div.overlayed>.acf-input>.acf-repeater>.acf-actions li:last a").text("Nova inscrição"),t("#ppm-voting-form div.overlayed>.acf-input>.acf-repeater>.acf-actions").removeClass("no-rows-btn")):(t("#ppm-voting-form div.overlayed").addClass("no-rows"),t("#ppm-voting-form div.overlayed>.acf-input>.acf-repeater>.acf-actions li:last a").text("Fazer inscrição"),t("#ppm-voting-form div.overlayed>.acf-input>.acf-repeater>.acf-actions").addClass("no-rows-btn"))}),t("body").on("click",".close-modality, .save-voting-row a",function(e){e.preventDefault();var n=t("#ppm-voting-form div.overlayed").attr("data-name");t('.voting-col[data-modality="'+n+'"]').find(".list-group").html(""),t.each(t("#ppm-voting-form div.overlayed > .acf-input > .acf-repeater > .acf-table > tbody > .acf-row"),function(e,i){if(!t(i).hasClass("acf-clone")){var o=t(i).find('div[data-name="categorias"] select').val(),r='<li class="list-group-item">'+t(i).find('div[data-name="nome_do_concorrente"] input').val()+"<br><small>"+o+"</small></li>";t('.voting-col[data-modality="'+n+'"]').find(".list-group").append(r)}}),t("#ppm-voting-form div").removeClass("overlayed"),t("body").removeClass("modal-open modal-ppm-form")}),t("body").on("click","#ppm-voting-form div.overlayed > .acf-input > .acf-repeater > .acf-actions li a",function(e){setTimeout(function(){t("#ppm-voting-form div.overlayed").attr("data-name");var e=t("#ppm-voting-form div.overlayed > .acf-input > .acf-repeater > .acf-table > tbody > tr.acf-row");e.length>2&&t.each(e,function(e,n){t(n).hasClass("acf-clone")||(t(n).addClass("voting-row-defined").removeClass("current-row"),t(n).parent().find(".acf-clone").prev(".acf-row").removeClass("voting-row-defined")),t(n).hasClass("acf-clone")||t(n).hasClass("voting-row-defined")||t(n).addClass("current-row")}),function(){var e=t("#ppm-voting-form div.overlayed").attr("data-name");t('.voting-col[data-modality="'+e+'"]').find(".list-group").html(""),t.each(t("#ppm-voting-form div.overlayed .acf-row.voting-row-defined"),function(n,i){var o=t(i).find('div[data-name="categorias"] select').val(),r=t(i).find('div[data-name="nome_do_concorrente"] input').val(),a='<li class="list-group-item">'+r+"<br><small>"+o+"</small></li>";t('.voting-col[data-modality="'+e+'"]').find(".list-group").append(a)})}()},500),t("#ppm-voting-form div.overlayed>.acf-input>.acf-repeater>.acf-actions .save-voting-row").remove(),t("#ppm-voting-form div.overlayed>.acf-input>.acf-repeater>.acf-actions").prepend('<li class="save-voting-row"><a class="" href="#">Salvar inscrição</a></li>'),t("#ppm-voting-form div.overlayed>.acf-input>.acf-repeater>.acf-actions li:last a").text("Nova inscrição"),t("#ppm-voting-form div.overlayed>.acf-input>.acf-repeater>.acf-actions").removeClass("no-rows-btn"),t("#confimation-modal-btn").removeClass("hidden")});t("body").on("click","#ppm-voting-form .expand-row",function(e){e.preventDefault(),t(this).closest("tr").removeClass("voting-row-defined")}),t("body").on("click",".acf-row-handle.remove a.acf-icon.-minus",function(e){setTimeout(function(){t(".acf-tooltip").html('Tem certeza? <a href="#" class="acf-confirm-y -red">Remover</a> <a href="#" class="acf-confirm-n">Cancelar</a>')},0)}),t("body").on("click","#ppm-voting-form-send-btn",function(){t(this).text("Enviando..."),t('#ppm-voting-form .acf-form-submit input[type="submit"]').trigger("click"),setTimeout(function(){t("#ppm-voting-form .acf-error-message").length&&(t(".validation-form-check").removeClass("hidden"),t("#ppm-voting-form-send-btn").text("Finalizar inscrição"),t('#ppm-voting-form div[data-name="inscricoes-criacao"] .acf-error-message').length&&(t(".voting-col.creation .validation-error").remove(),t(".voting-col.creation h2").after('<p class="validation-error">Falha na validação. Alguns campos requerem sua atenção</p>')),t('#ppm-voting-form div[data-name="inscricoes-producao"] .acf-error-message').length&&(t(".voting-col.production .validation-error").remove(),t(".voting-col.production h2").after('<p class="validation-error">Falha na validação. Alguns campos requerem sua atenção</p>')),t('#ppm-voting-form div[data-name="inscricoes-convergencia"] .acf-error-message').length&&(t(".voting-col.distribution .validation-error").remove(),t(".voting-col.distribution h2").after('<p class="validation-error">Falha na validação. Alguns campos requerem sua atenção</p>')),t("#confimation-modal").modal("hide"))},1e3)})}}}}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
