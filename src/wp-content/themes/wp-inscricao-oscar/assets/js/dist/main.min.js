if("undefined"==typeof jQuery)throw new Error("Bootstrap's JavaScript requires jQuery");+function(t){"use strict";var e=t.fn.jquery.split(" ")[0].split(".");if(e[0]<2&&e[1]<9||1==e[0]&&9==e[1]&&e[2]<1||e[0]>3)throw new Error("Bootstrap's JavaScript requires jQuery version 1.9.1 or higher, but lower than version 4")}(jQuery),function(t){"use strict";function e(){var t=document.createElement("bootstrap"),e={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(var i in e)if(void 0!==t.style[i])return{end:e[i]};return!1}t.fn.emulateTransitionEnd=function(e){var i=!1,o=this;t(this).one("bsTransitionEnd",function(){i=!0});var n=function(){i||t(o).trigger(t.support.transition.end)};return setTimeout(n,e),this},t(function(){t.support.transition=e(),t.support.transition&&(t.event.special.bsTransitionEnd={bindType:t.support.transition.end,delegateType:t.support.transition.end,handle:function(e){if(t(e.target).is(this))return e.handleObj.handler.apply(this,arguments)}})})}(jQuery),function(t){"use strict";function e(e){return this.each(function(){var i=t(this),n=i.data("bs.alert");n||i.data("bs.alert",n=new o(this)),"string"==typeof e&&n[e].call(i)})}var i='[data-dismiss="alert"]',o=function(e){t(e).on("click",i,this.close)};o.VERSION="3.3.7",o.TRANSITION_DURATION=150,o.prototype.close=function(e){function i(){a.detach().trigger("closed.bs.alert").remove()}var n=t(this),s=n.attr("data-target");s||(s=n.attr("href"),s=s&&s.replace(/.*(?=#[^\s]*$)/,""));var a=t("#"===s?[]:s);e&&e.preventDefault(),a.length||(a=n.closest(".alert")),a.trigger(e=t.Event("close.bs.alert")),e.isDefaultPrevented()||(a.removeClass("in"),t.support.transition&&a.hasClass("fade")?a.one("bsTransitionEnd",i).emulateTransitionEnd(o.TRANSITION_DURATION):i())};var n=t.fn.alert;t.fn.alert=e,t.fn.alert.Constructor=o,t.fn.alert.noConflict=function(){return t.fn.alert=n,this},t(document).on("click.bs.alert.data-api",i,o.prototype.close)}(jQuery),function(t){"use strict";function e(e){return this.each(function(){var o=t(this),n=o.data("bs.button"),s="object"==typeof e&&e;n||o.data("bs.button",n=new i(this,s)),"toggle"==e?n.toggle():e&&n.setState(e)})}var i=function(e,o){this.$element=t(e),this.options=t.extend({},i.DEFAULTS,o),this.isLoading=!1};i.VERSION="3.3.7",i.DEFAULTS={loadingText:"loading..."},i.prototype.setState=function(e){var i="disabled",o=this.$element,n=o.is("input")?"val":"html",s=o.data();e+="Text",null==s.resetText&&o.data("resetText",o[n]()),setTimeout(t.proxy(function(){o[n](null==s[e]?this.options[e]:s[e]),"loadingText"==e?(this.isLoading=!0,o.addClass(i).attr(i,i).prop(i,!0)):this.isLoading&&(this.isLoading=!1,o.removeClass(i).removeAttr(i).prop(i,!1))},this),0)},i.prototype.toggle=function(){var t=!0,e=this.$element.closest('[data-toggle="buttons"]');if(e.length){var i=this.$element.find("input");"radio"==i.prop("type")?(i.prop("checked")&&(t=!1),e.find(".active").removeClass("active"),this.$element.addClass("active")):"checkbox"==i.prop("type")&&(i.prop("checked")!==this.$element.hasClass("active")&&(t=!1),this.$element.toggleClass("active")),i.prop("checked",this.$element.hasClass("active")),t&&i.trigger("change")}else this.$element.attr("aria-pressed",!this.$element.hasClass("active")),this.$element.toggleClass("active")};var o=t.fn.button;t.fn.button=e,t.fn.button.Constructor=i,t.fn.button.noConflict=function(){return t.fn.button=o,this},t(document).on("click.bs.button.data-api",'[data-toggle^="button"]',function(i){var o=t(i.target).closest(".btn");e.call(o,"toggle"),t(i.target).is('input[type="radio"], input[type="checkbox"]')||(i.preventDefault(),o.is("input,button")?o.trigger("focus"):o.find("input:visible,button:visible").first().trigger("focus"))}).on("focus.bs.button.data-api blur.bs.button.data-api",'[data-toggle^="button"]',function(e){t(e.target).closest(".btn").toggleClass("focus",/^focus(in)?$/.test(e.type))})}(jQuery),function(t){"use strict";function e(e){return this.each(function(){var o=t(this),n=o.data("bs.carousel"),s=t.extend({},i.DEFAULTS,o.data(),"object"==typeof e&&e),a="string"==typeof e?e:s.slide;n||o.data("bs.carousel",n=new i(this,s)),"number"==typeof e?n.to(e):a?n[a]():s.interval&&n.pause().cycle()})}var i=function(e,i){this.$element=t(e),this.$indicators=this.$element.find(".carousel-indicators"),this.options=i,this.paused=null,this.sliding=null,this.interval=null,this.$active=null,this.$items=null,this.options.keyboard&&this.$element.on("keydown.bs.carousel",t.proxy(this.keydown,this)),"hover"==this.options.pause&&!("ontouchstart"in document.documentElement)&&this.$element.on("mouseenter.bs.carousel",t.proxy(this.pause,this)).on("mouseleave.bs.carousel",t.proxy(this.cycle,this))};i.VERSION="3.3.7",i.TRANSITION_DURATION=600,i.DEFAULTS={interval:5e3,pause:"hover",wrap:!0,keyboard:!0},i.prototype.keydown=function(t){if(!/input|textarea/i.test(t.target.tagName)){switch(t.which){case 37:this.prev();break;case 39:this.next();break;default:return}t.preventDefault()}},i.prototype.cycle=function(e){return e||(this.paused=!1),this.interval&&clearInterval(this.interval),this.options.interval&&!this.paused&&(this.interval=setInterval(t.proxy(this.next,this),this.options.interval)),this},i.prototype.getItemIndex=function(t){return this.$items=t.parent().children(".item"),this.$items.index(t||this.$active)},i.prototype.getItemForDirection=function(t,e){var i=this.getItemIndex(e);if(("prev"==t&&0===i||"next"==t&&i==this.$items.length-1)&&!this.options.wrap)return e;var o="prev"==t?-1:1,n=(i+o)%this.$items.length;return this.$items.eq(n)},i.prototype.to=function(t){var e=this,i=this.getItemIndex(this.$active=this.$element.find(".item.active"));if(!(t>this.$items.length-1||t<0))return this.sliding?this.$element.one("slid.bs.carousel",function(){e.to(t)}):i==t?this.pause().cycle():this.slide(t>i?"next":"prev",this.$items.eq(t))},i.prototype.pause=function(e){return e||(this.paused=!0),this.$element.find(".next, .prev").length&&t.support.transition&&(this.$element.trigger(t.support.transition.end),this.cycle(!0)),this.interval=clearInterval(this.interval),this},i.prototype.next=function(){if(!this.sliding)return this.slide("next")},i.prototype.prev=function(){if(!this.sliding)return this.slide("prev")},i.prototype.slide=function(e,o){var n=this.$element.find(".item.active"),s=o||this.getItemForDirection(e,n),a=this.interval,r="next"==e?"left":"right",l=this;if(s.hasClass("active"))return this.sliding=!1;var h=s[0],d=t.Event("slide.bs.carousel",{relatedTarget:h,direction:r});if(this.$element.trigger(d),!d.isDefaultPrevented()){if(this.sliding=!0,a&&this.pause(),this.$indicators.length){this.$indicators.find(".active").removeClass("active");var p=t(this.$indicators.children()[this.getItemIndex(s)]);p&&p.addClass("active")}var c=t.Event("slid.bs.carousel",{relatedTarget:h,direction:r});return t.support.transition&&this.$element.hasClass("slide")?(s.addClass(e),s[0].offsetWidth,n.addClass(r),s.addClass(r),n.one("bsTransitionEnd",function(){s.removeClass([e,r].join(" ")).addClass("active"),n.removeClass(["active",r].join(" ")),l.sliding=!1,setTimeout(function(){l.$element.trigger(c)},0)}).emulateTransitionEnd(i.TRANSITION_DURATION)):(n.removeClass("active"),s.addClass("active"),this.sliding=!1,this.$element.trigger(c)),a&&this.cycle(),this}};var o=t.fn.carousel;t.fn.carousel=e,t.fn.carousel.Constructor=i,t.fn.carousel.noConflict=function(){return t.fn.carousel=o,this};var n=function(i){var o,n=t(this),s=t(n.attr("data-target")||(o=n.attr("href"))&&o.replace(/.*(?=#[^\s]+$)/,""));if(s.hasClass("carousel")){var a=t.extend({},s.data(),n.data()),r=n.attr("data-slide-to");r&&(a.interval=!1),e.call(s,a),r&&s.data("bs.carousel").to(r),i.preventDefault()}};t(document).on("click.bs.carousel.data-api","[data-slide]",n).on("click.bs.carousel.data-api","[data-slide-to]",n),t(window).on("load",function(){t('[data-ride="carousel"]').each(function(){var i=t(this);e.call(i,i.data())})})}(jQuery),function(t){"use strict";function e(e){var i,o=e.attr("data-target")||(i=e.attr("href"))&&i.replace(/.*(?=#[^\s]+$)/,"");return t(o)}function i(e){return this.each(function(){var i=t(this),n=i.data("bs.collapse"),s=t.extend({},o.DEFAULTS,i.data(),"object"==typeof e&&e);!n&&s.toggle&&/show|hide/.test(e)&&(s.toggle=!1),n||i.data("bs.collapse",n=new o(this,s)),"string"==typeof e&&n[e]()})}var o=function(e,i){this.$element=t(e),this.options=t.extend({},o.DEFAULTS,i),this.$trigger=t('[data-toggle="collapse"][href="#'+e.id+'"],[data-toggle="collapse"][data-target="#'+e.id+'"]'),this.transitioning=null,this.options.parent?this.$parent=this.getParent():this.addAriaAndCollapsedClass(this.$element,this.$trigger),this.options.toggle&&this.toggle()};o.VERSION="3.3.7",o.TRANSITION_DURATION=350,o.DEFAULTS={toggle:!0},o.prototype.dimension=function(){return this.$element.hasClass("width")?"width":"height"},o.prototype.show=function(){if(!this.transitioning&&!this.$element.hasClass("in")){var e,n=this.$parent&&this.$parent.children(".panel").children(".in, .collapsing");if(!(n&&n.length&&(e=n.data("bs.collapse"))&&e.transitioning)){var s=t.Event("show.bs.collapse");if(this.$element.trigger(s),!s.isDefaultPrevented()){n&&n.length&&(i.call(n,"hide"),e||n.data("bs.collapse",null));var a=this.dimension();this.$element.removeClass("collapse").addClass("collapsing")[a](0).attr("aria-expanded",!0),this.$trigger.removeClass("collapsed").attr("aria-expanded",!0),this.transitioning=1;var r=function(){this.$element.removeClass("collapsing").addClass("collapse in")[a](""),this.transitioning=0,this.$element.trigger("shown.bs.collapse")};if(!t.support.transition)return r.call(this);var l=t.camelCase(["scroll",a].join("-"));this.$element.one("bsTransitionEnd",t.proxy(r,this)).emulateTransitionEnd(o.TRANSITION_DURATION)[a](this.$element[0][l])}}}},o.prototype.hide=function(){if(!this.transitioning&&this.$element.hasClass("in")){var e=t.Event("hide.bs.collapse");if(this.$element.trigger(e),!e.isDefaultPrevented()){var i=this.dimension();this.$element[i](this.$element[i]())[0].offsetHeight,this.$element.addClass("collapsing").removeClass("collapse in").attr("aria-expanded",!1),this.$trigger.addClass("collapsed").attr("aria-expanded",!1),this.transitioning=1;var n=function(){this.transitioning=0,this.$element.removeClass("collapsing").addClass("collapse").trigger("hidden.bs.collapse")};if(!t.support.transition)return n.call(this);this.$element[i](0).one("bsTransitionEnd",t.proxy(n,this)).emulateTransitionEnd(o.TRANSITION_DURATION)}}},o.prototype.toggle=function(){this[this.$element.hasClass("in")?"hide":"show"]()},o.prototype.getParent=function(){return t(this.options.parent).find('[data-toggle="collapse"][data-parent="'+this.options.parent+'"]').each(t.proxy(function(i,o){var n=t(o);this.addAriaAndCollapsedClass(e(n),n)},this)).end()},o.prototype.addAriaAndCollapsedClass=function(t,e){var i=t.hasClass("in");t.attr("aria-expanded",i),e.toggleClass("collapsed",!i).attr("aria-expanded",i)};var n=t.fn.collapse;t.fn.collapse=i,t.fn.collapse.Constructor=o,t.fn.collapse.noConflict=function(){return t.fn.collapse=n,this},t(document).on("click.bs.collapse.data-api",'[data-toggle="collapse"]',function(o){var n=t(this);n.attr("data-target")||o.preventDefault();var s=e(n),a=s.data("bs.collapse"),r=a?"toggle":n.data();i.call(s,r)})}(jQuery),function(t){"use strict";function e(e){var i=e.attr("data-target");i||(i=e.attr("href"),i=i&&/#[A-Za-z]/.test(i)&&i.replace(/.*(?=#[^\s]*$)/,""));var o=i&&t(i);return o&&o.length?o:e.parent()}function i(i){i&&3===i.which||(t(n).remove(),t(s).each(function(){var o=t(this),n=e(o),s={relatedTarget:this};n.hasClass("open")&&(i&&"click"==i.type&&/input|textarea/i.test(i.target.tagName)&&t.contains(n[0],i.target)||(n.trigger(i=t.Event("hide.bs.dropdown",s)),i.isDefaultPrevented()||(o.attr("aria-expanded","false"),n.removeClass("open").trigger(t.Event("hidden.bs.dropdown",s)))))}))}function o(e){return this.each(function(){var i=t(this),o=i.data("bs.dropdown");o||i.data("bs.dropdown",o=new a(this)),"string"==typeof e&&o[e].call(i)})}var n=".dropdown-backdrop",s='[data-toggle="dropdown"]',a=function(e){t(e).on("click.bs.dropdown",this.toggle)};a.VERSION="3.3.7",a.prototype.toggle=function(o){var n=t(this);if(!n.is(".disabled, :disabled")){var s=e(n),a=s.hasClass("open");if(i(),!a){"ontouchstart"in document.documentElement&&!s.closest(".navbar-nav").length&&t(document.createElement("div")).addClass("dropdown-backdrop").insertAfter(t(this)).on("click",i);var r={relatedTarget:this};if(s.trigger(o=t.Event("show.bs.dropdown",r)),o.isDefaultPrevented())return;n.trigger("focus").attr("aria-expanded","true"),s.toggleClass("open").trigger(t.Event("shown.bs.dropdown",r))}return!1}},a.prototype.keydown=function(i){if(/(38|40|27|32)/.test(i.which)&&!/input|textarea/i.test(i.target.tagName)){var o=t(this);if(i.preventDefault(),i.stopPropagation(),!o.is(".disabled, :disabled")){var n=e(o),a=n.hasClass("open");if(!a&&27!=i.which||a&&27==i.which)return 27==i.which&&n.find(s).trigger("focus"),o.trigger("click");var r=n.find(".dropdown-menu li:not(.disabled):visible a");if(r.length){var l=r.index(i.target);38==i.which&&l>0&&l--,40==i.which&&l<r.length-1&&l++,~l||(l=0),r.eq(l).trigger("focus")}}}};var r=t.fn.dropdown;t.fn.dropdown=o,t.fn.dropdown.Constructor=a,t.fn.dropdown.noConflict=function(){return t.fn.dropdown=r,this},t(document).on("click.bs.dropdown.data-api",i).on("click.bs.dropdown.data-api",".dropdown form",function(t){t.stopPropagation()}).on("click.bs.dropdown.data-api",s,a.prototype.toggle).on("keydown.bs.dropdown.data-api",s,a.prototype.keydown).on("keydown.bs.dropdown.data-api",".dropdown-menu",a.prototype.keydown)}(jQuery),function(t){"use strict";function e(e,o){return this.each(function(){var n=t(this),s=n.data("bs.modal"),a=t.extend({},i.DEFAULTS,n.data(),"object"==typeof e&&e);s||n.data("bs.modal",s=new i(this,a)),"string"==typeof e?s[e](o):a.show&&s.show(o)})}var i=function(e,i){this.options=i,this.$body=t(document.body),this.$element=t(e),this.$dialog=this.$element.find(".modal-dialog"),this.$backdrop=null,this.isShown=null,this.originalBodyPad=null,this.scrollbarWidth=0,this.ignoreBackdropClick=!1,this.options.remote&&this.$element.find(".modal-content").load(this.options.remote,t.proxy(function(){this.$element.trigger("loaded.bs.modal")},this))};i.VERSION="3.3.7",i.TRANSITION_DURATION=300,i.BACKDROP_TRANSITION_DURATION=150,i.DEFAULTS={backdrop:!0,keyboard:!0,show:!0},i.prototype.toggle=function(t){return this.isShown?this.hide():this.show(t)},i.prototype.show=function(e){var o=this,n=t.Event("show.bs.modal",{relatedTarget:e});this.$element.trigger(n),this.isShown||n.isDefaultPrevented()||(this.isShown=!0,this.checkScrollbar(),this.setScrollbar(),this.$body.addClass("modal-open"),this.escape(),this.resize(),this.$element.on("click.dismiss.bs.modal",'[data-dismiss="modal"]',t.proxy(this.hide,this)),this.$dialog.on("mousedown.dismiss.bs.modal",function(){o.$element.one("mouseup.dismiss.bs.modal",function(e){t(e.target).is(o.$element)&&(o.ignoreBackdropClick=!0)})}),this.backdrop(function(){var n=t.support.transition&&o.$element.hasClass("fade");o.$element.parent().length||o.$element.appendTo(o.$body),o.$element.show().scrollTop(0),o.adjustDialog(),n&&o.$element[0].offsetWidth,o.$element.addClass("in"),o.enforceFocus();var s=t.Event("shown.bs.modal",{relatedTarget:e});n?o.$dialog.one("bsTransitionEnd",function(){o.$element.trigger("focus").trigger(s)}).emulateTransitionEnd(i.TRANSITION_DURATION):o.$element.trigger("focus").trigger(s)}))},i.prototype.hide=function(e){e&&e.preventDefault(),e=t.Event("hide.bs.modal"),this.$element.trigger(e),this.isShown&&!e.isDefaultPrevented()&&(this.isShown=!1,this.escape(),this.resize(),t(document).off("focusin.bs.modal"),this.$element.removeClass("in").off("click.dismiss.bs.modal").off("mouseup.dismiss.bs.modal"),this.$dialog.off("mousedown.dismiss.bs.modal"),t.support.transition&&this.$element.hasClass("fade")?this.$element.one("bsTransitionEnd",t.proxy(this.hideModal,this)).emulateTransitionEnd(i.TRANSITION_DURATION):this.hideModal())},i.prototype.enforceFocus=function(){t(document).off("focusin.bs.modal").on("focusin.bs.modal",t.proxy(function(t){document===t.target||this.$element[0]===t.target||this.$element.has(t.target).length||this.$element.trigger("focus")},this))},i.prototype.escape=function(){this.isShown&&this.options.keyboard?this.$element.on("keydown.dismiss.bs.modal",t.proxy(function(t){27==t.which&&this.hide()},this)):this.isShown||this.$element.off("keydown.dismiss.bs.modal")},i.prototype.resize=function(){this.isShown?t(window).on("resize.bs.modal",t.proxy(this.handleUpdate,this)):t(window).off("resize.bs.modal")},i.prototype.hideModal=function(){var t=this;this.$element.hide(),this.backdrop(function(){t.$body.removeClass("modal-open"),t.resetAdjustments(),t.resetScrollbar(),t.$element.trigger("hidden.bs.modal")})},i.prototype.removeBackdrop=function(){this.$backdrop&&this.$backdrop.remove(),this.$backdrop=null},i.prototype.backdrop=function(e){var o=this,n=this.$element.hasClass("fade")?"fade":"";if(this.isShown&&this.options.backdrop){var s=t.support.transition&&n;if(this.$backdrop=t(document.createElement("div")).addClass("modal-backdrop "+n).appendTo(this.$body),this.$element.on("click.dismiss.bs.modal",t.proxy(function(t){if(this.ignoreBackdropClick)return void(this.ignoreBackdropClick=!1);t.target===t.currentTarget&&("static"==this.options.backdrop?this.$element[0].focus():this.hide())},this)),s&&this.$backdrop[0].offsetWidth,this.$backdrop.addClass("in"),!e)return;s?this.$backdrop.one("bsTransitionEnd",e).emulateTransitionEnd(i.BACKDROP_TRANSITION_DURATION):e()}else if(!this.isShown&&this.$backdrop){this.$backdrop.removeClass("in");var a=function(){o.removeBackdrop(),e&&e()};t.support.transition&&this.$element.hasClass("fade")?this.$backdrop.one("bsTransitionEnd",a).emulateTransitionEnd(i.BACKDROP_TRANSITION_DURATION):a()}else e&&e()},i.prototype.handleUpdate=function(){this.adjustDialog()},i.prototype.adjustDialog=function(){var t=this.$element[0].scrollHeight>document.documentElement.clientHeight;this.$element.css({paddingLeft:!this.bodyIsOverflowing&&t?this.scrollbarWidth:"",paddingRight:this.bodyIsOverflowing&&!t?this.scrollbarWidth:""})},i.prototype.resetAdjustments=function(){this.$element.css({paddingLeft:"",paddingRight:""})},i.prototype.checkScrollbar=function(){var t=window.innerWidth;if(!t){var e=document.documentElement.getBoundingClientRect();t=e.right-Math.abs(e.left)}this.bodyIsOverflowing=document.body.clientWidth<t,this.scrollbarWidth=this.measureScrollbar()},i.prototype.setScrollbar=function(){var t=parseInt(this.$body.css("padding-right")||0,10);this.originalBodyPad=document.body.style.paddingRight||"",this.bodyIsOverflowing&&this.$body.css("padding-right",t+this.scrollbarWidth)},i.prototype.resetScrollbar=function(){this.$body.css("padding-right",this.originalBodyPad)},i.prototype.measureScrollbar=function(){var t=document.createElement("div");t.className="modal-scrollbar-measure",this.$body.append(t);var e=t.offsetWidth-t.clientWidth;return this.$body[0].removeChild(t),e};var o=t.fn.modal;t.fn.modal=e,t.fn.modal.Constructor=i,t.fn.modal.noConflict=function(){return t.fn.modal=o,this},t(document).on("click.bs.modal.data-api",'[data-toggle="modal"]',function(i){var o=t(this),n=o.attr("href"),s=t(o.attr("data-target")||n&&n.replace(/.*(?=#[^\s]+$)/,"")),a=s.data("bs.modal")?"toggle":t.extend({remote:!/#/.test(n)&&n},s.data(),o.data());o.is("a")&&i.preventDefault(),s.one("show.bs.modal",function(t){t.isDefaultPrevented()||s.one("hidden.bs.modal",function(){o.is(":visible")&&o.trigger("focus")})}),e.call(s,a,this)})}(jQuery),function(t){"use strict";function e(e){return this.each(function(){var o=t(this),n=o.data("bs.tooltip"),s="object"==typeof e&&e;!n&&/destroy|hide/.test(e)||(n||o.data("bs.tooltip",n=new i(this,s)),"string"==typeof e&&n[e]())})}var i=function(t,e){this.type=null,this.options=null,this.enabled=null,this.timeout=null,this.hoverState=null,this.$element=null,this.inState=null,this.init("tooltip",t,e)};i.VERSION="3.3.7",i.TRANSITION_DURATION=150,i.DEFAULTS={animation:!0,placement:"top",selector:!1,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,container:!1,viewport:{selector:"body",padding:0}},i.prototype.init=function(e,i,o){if(this.enabled=!0,this.type=e,this.$element=t(i),this.options=this.getOptions(o),this.$viewport=this.options.viewport&&t(t.isFunction(this.options.viewport)?this.options.viewport.call(this,this.$element):this.options.viewport.selector||this.options.viewport),this.inState={click:!1,hover:!1,focus:!1},this.$element[0]instanceof document.constructor&&!this.options.selector)throw new Error("`selector` option must be specified when initializing "+this.type+" on the window.document object!");for(var n=this.options.trigger.split(" "),s=n.length;s--;){var a=n[s];if("click"==a)this.$element.on("click."+this.type,this.options.selector,t.proxy(this.toggle,this));else if("manual"!=a){var r="hover"==a?"mouseenter":"focusin",l="hover"==a?"mouseleave":"focusout";this.$element.on(r+"."+this.type,this.options.selector,t.proxy(this.enter,this)),this.$element.on(l+"."+this.type,this.options.selector,t.proxy(this.leave,this))}}this.options.selector?this._options=t.extend({},this.options,{trigger:"manual",selector:""}):this.fixTitle()},i.prototype.getDefaults=function(){return i.DEFAULTS},i.prototype.getOptions=function(e){return e=t.extend({},this.getDefaults(),this.$element.data(),e),e.delay&&"number"==typeof e.delay&&(e.delay={show:e.delay,hide:e.delay}),e},i.prototype.getDelegateOptions=function(){var e={},i=this.getDefaults();return this._options&&t.each(this._options,function(t,o){i[t]!=o&&(e[t]=o)}),e},i.prototype.enter=function(e){var i=e instanceof this.constructor?e:t(e.currentTarget).data("bs."+this.type);return i||(i=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,i)),e instanceof t.Event&&(i.inState["focusin"==e.type?"focus":"hover"]=!0),i.tip().hasClass("in")||"in"==i.hoverState?void(i.hoverState="in"):(clearTimeout(i.timeout),i.hoverState="in",i.options.delay&&i.options.delay.show?void(i.timeout=setTimeout(function(){"in"==i.hoverState&&i.show()},i.options.delay.show)):i.show())},i.prototype.isInStateTrue=function(){for(var t in this.inState)if(this.inState[t])return!0;return!1},i.prototype.leave=function(e){var i=e instanceof this.constructor?e:t(e.currentTarget).data("bs."+this.type);if(i||(i=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,i)),e instanceof t.Event&&(i.inState["focusout"==e.type?"focus":"hover"]=!1),!i.isInStateTrue()){if(clearTimeout(i.timeout),i.hoverState="out",!i.options.delay||!i.options.delay.hide)return i.hide();i.timeout=setTimeout(function(){"out"==i.hoverState&&i.hide()},i.options.delay.hide)}},i.prototype.show=function(){var e=t.Event("show.bs."+this.type);if(this.hasContent()&&this.enabled){this.$element.trigger(e);var o=t.contains(this.$element[0].ownerDocument.documentElement,this.$element[0]);if(e.isDefaultPrevented()||!o)return;var n=this,s=this.tip(),a=this.getUID(this.type);this.setContent(),s.attr("id",a),this.$element.attr("aria-describedby",a),this.options.animation&&s.addClass("fade");var r="function"==typeof this.options.placement?this.options.placement.call(this,s[0],this.$element[0]):this.options.placement,l=/\s?auto?\s?/i,h=l.test(r);h&&(r=r.replace(l,"")||"top"),s.detach().css({top:0,left:0,display:"block"}).addClass(r).data("bs."+this.type,this),this.options.container?s.appendTo(this.options.container):s.insertAfter(this.$element),this.$element.trigger("inserted.bs."+this.type);var d=this.getPosition(),p=s[0].offsetWidth,c=s[0].offsetHeight;if(h){var f=r,u=this.getPosition(this.$viewport);r="bottom"==r&&d.bottom+c>u.bottom?"top":"top"==r&&d.top-c<u.top?"bottom":"right"==r&&d.right+p>u.width?"left":"left"==r&&d.left-p<u.left?"right":r,s.removeClass(f).addClass(r)}var g=this.getCalculatedOffset(r,d,p,c);this.applyPlacement(g,r);var m=function(){var t=n.hoverState;n.$element.trigger("shown.bs."+n.type),n.hoverState=null,"out"==t&&n.leave(n)};t.support.transition&&this.$tip.hasClass("fade")?s.one("bsTransitionEnd",m).emulateTransitionEnd(i.TRANSITION_DURATION):m()}},i.prototype.applyPlacement=function(e,i){var o=this.tip(),n=o[0].offsetWidth,s=o[0].offsetHeight,a=parseInt(o.css("margin-top"),10),r=parseInt(o.css("margin-left"),10);isNaN(a)&&(a=0),isNaN(r)&&(r=0),e.top+=a,e.left+=r,t.offset.setOffset(o[0],t.extend({using:function(t){o.css({top:Math.round(t.top),left:Math.round(t.left)})}},e),0),o.addClass("in");var l=o[0].offsetWidth,h=o[0].offsetHeight;"top"==i&&h!=s&&(e.top=e.top+s-h);var d=this.getViewportAdjustedDelta(i,e,l,h);d.left?e.left+=d.left:e.top+=d.top;var p=/top|bottom/.test(i),c=p?2*d.left-n+l:2*d.top-s+h,f=p?"offsetWidth":"offsetHeight";o.offset(e),this.replaceArrow(c,o[0][f],p)},i.prototype.replaceArrow=function(t,e,i){this.arrow().css(i?"left":"top",50*(1-t/e)+"%").css(i?"top":"left","")},i.prototype.setContent=function(){var t=this.tip(),e=this.getTitle();t.find(".tooltip-inner")[this.options.html?"html":"text"](e),t.removeClass("fade in top bottom left right")},i.prototype.hide=function(e){function o(){"in"!=n.hoverState&&s.detach(),n.$element&&n.$element.removeAttr("aria-describedby").trigger("hidden.bs."+n.type),e&&e()}var n=this,s=t(this.$tip),a=t.Event("hide.bs."+this.type);if(this.$element.trigger(a),!a.isDefaultPrevented())return s.removeClass("in"),t.support.transition&&s.hasClass("fade")?s.one("bsTransitionEnd",o).emulateTransitionEnd(i.TRANSITION_DURATION):o(),this.hoverState=null,this},i.prototype.fixTitle=function(){var t=this.$element;(t.attr("title")||"string"!=typeof t.attr("data-original-title"))&&t.attr("data-original-title",t.attr("title")||"").attr("title","")},i.prototype.hasContent=function(){return this.getTitle()},i.prototype.getPosition=function(e){e=e||this.$element;var i=e[0],o="BODY"==i.tagName,n=i.getBoundingClientRect();null==n.width&&(n=t.extend({},n,{width:n.right-n.left,height:n.bottom-n.top}));var s=window.SVGElement&&i instanceof window.SVGElement,a=o?{top:0,left:0}:s?null:e.offset(),r={scroll:o?document.documentElement.scrollTop||document.body.scrollTop:e.scrollTop()},l=o?{width:t(window).width(),height:t(window).height()}:null;return t.extend({},n,r,l,a)},i.prototype.getCalculatedOffset=function(t,e,i,o){return"bottom"==t?{top:e.top+e.height,left:e.left+e.width/2-i/2}:"top"==t?{top:e.top-o,left:e.left+e.width/2-i/2}:"left"==t?{top:e.top+e.height/2-o/2,left:e.left-i}:{top:e.top+e.height/2-o/2,left:e.left+e.width}},i.prototype.getViewportAdjustedDelta=function(t,e,i,o){var n={top:0,left:0};if(!this.$viewport)return n;var s=this.options.viewport&&this.options.viewport.padding||0,a=this.getPosition(this.$viewport);if(/right|left/.test(t)){var r=e.top-s-a.scroll,l=e.top+s-a.scroll+o;r<a.top?n.top=a.top-r:l>a.top+a.height&&(n.top=a.top+a.height-l)}else{var h=e.left-s,d=e.left+s+i;h<a.left?n.left=a.left-h:d>a.right&&(n.left=a.left+a.width-d)}return n},i.prototype.getTitle=function(){var t=this.$element,e=this.options;return t.attr("data-original-title")||("function"==typeof e.title?e.title.call(t[0]):e.title)},i.prototype.getUID=function(t){do{t+=~~(1e6*Math.random())}while(document.getElementById(t));return t},i.prototype.tip=function(){if(!this.$tip&&(this.$tip=t(this.options.template),1!=this.$tip.length))throw new Error(this.type+" `template` option must consist of exactly 1 top-level element!");return this.$tip},i.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".tooltip-arrow")},i.prototype.enable=function(){this.enabled=!0},i.prototype.disable=function(){this.enabled=!1},i.prototype.toggleEnabled=function(){this.enabled=!this.enabled},i.prototype.toggle=function(e){var i=this;e&&((i=t(e.currentTarget).data("bs."+this.type))||(i=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,i))),e?(i.inState.click=!i.inState.click,i.isInStateTrue()?i.enter(i):i.leave(i)):i.tip().hasClass("in")?i.leave(i):i.enter(i)},i.prototype.destroy=function(){var t=this;clearTimeout(this.timeout),this.hide(function(){t.$element.off("."+t.type).removeData("bs."+t.type),t.$tip&&t.$tip.detach(),t.$tip=null,t.$arrow=null,t.$viewport=null,t.$element=null})};var o=t.fn.tooltip;t.fn.tooltip=e,t.fn.tooltip.Constructor=i,t.fn.tooltip.noConflict=function(){return t.fn.tooltip=o,this}}(jQuery),function(t){"use strict";function e(e){return this.each(function(){var o=t(this),n=o.data("bs.popover"),s="object"==typeof e&&e;!n&&/destroy|hide/.test(e)||(n||o.data("bs.popover",n=new i(this,s)),"string"==typeof e&&n[e]())})}var i=function(t,e){this.init("popover",t,e)};if(!t.fn.tooltip)throw new Error("Popover requires tooltip.js");i.VERSION="3.3.7",i.DEFAULTS=t.extend({},t.fn.tooltip.Constructor.DEFAULTS,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'}),i.prototype=t.extend({},t.fn.tooltip.Constructor.prototype),i.prototype.constructor=i,i.prototype.getDefaults=function(){return i.DEFAULTS},i.prototype.setContent=function(){var t=this.tip(),e=this.getTitle(),i=this.getContent();t.find(".popover-title")[this.options.html?"html":"text"](e),t.find(".popover-content").children().detach().end()[this.options.html?"string"==typeof i?"html":"append":"text"](i),t.removeClass("fade top bottom left right in"),t.find(".popover-title").html()||t.find(".popover-title").hide()},i.prototype.hasContent=function(){return this.getTitle()||this.getContent()},i.prototype.getContent=function(){var t=this.$element,e=this.options;return t.attr("data-content")||("function"==typeof e.content?e.content.call(t[0]):e.content)},i.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".arrow")};var o=t.fn.popover;t.fn.popover=e,t.fn.popover.Constructor=i,t.fn.popover.noConflict=function(){return t.fn.popover=o,this}}(jQuery),function(t){"use strict";function e(i,o){this.$body=t(document.body),this.$scrollElement=t(t(i).is(document.body)?window:i),this.options=t.extend({},e.DEFAULTS,o),this.selector=(this.options.target||"")+" .nav li > a",this.offsets=[],this.targets=[],this.activeTarget=null,this.scrollHeight=0,this.$scrollElement.on("scroll.bs.scrollspy",t.proxy(this.process,this)),this.refresh(),this.process()}function i(i){return this.each(function(){var o=t(this),n=o.data("bs.scrollspy"),s="object"==typeof i&&i;n||o.data("bs.scrollspy",n=new e(this,s)),"string"==typeof i&&n[i]()})}e.VERSION="3.3.7",e.DEFAULTS={offset:10},e.prototype.getScrollHeight=function(){return this.$scrollElement[0].scrollHeight||Math.max(this.$body[0].scrollHeight,document.documentElement.scrollHeight)},e.prototype.refresh=function(){var e=this,i="offset",o=0;this.offsets=[],this.targets=[],this.scrollHeight=this.getScrollHeight(),t.isWindow(this.$scrollElement[0])||(i="position",o=this.$scrollElement.scrollTop()),this.$body.find(this.selector).map(function(){var e=t(this),n=e.data("target")||e.attr("href"),s=/^#./.test(n)&&t(n);return s&&s.length&&s.is(":visible")&&[[s[i]().top+o,n]]||null}).sort(function(t,e){return t[0]-e[0]}).each(function(){e.offsets.push(this[0]),e.targets.push(this[1])})},e.prototype.process=function(){var t,e=this.$scrollElement.scrollTop()+this.options.offset,i=this.getScrollHeight(),o=this.options.offset+i-this.$scrollElement.height(),n=this.offsets,s=this.targets,a=this.activeTarget;if(this.scrollHeight!=i&&this.refresh(),e>=o)return a!=(t=s[s.length-1])&&this.activate(t);if(a&&e<n[0])return this.activeTarget=null,this.clear();for(t=n.length;t--;)a!=s[t]&&e>=n[t]&&(void 0===n[t+1]||e<n[t+1])&&this.activate(s[t])},e.prototype.activate=function(e){
this.activeTarget=e,this.clear();var i=this.selector+'[data-target="'+e+'"],'+this.selector+'[href="'+e+'"]',o=t(i).parents("li").addClass("active");o.parent(".dropdown-menu").length&&(o=o.closest("li.dropdown").addClass("active")),o.trigger("activate.bs.scrollspy")},e.prototype.clear=function(){t(this.selector).parentsUntil(this.options.target,".active").removeClass("active")};var o=t.fn.scrollspy;t.fn.scrollspy=i,t.fn.scrollspy.Constructor=e,t.fn.scrollspy.noConflict=function(){return t.fn.scrollspy=o,this},t(window).on("load.bs.scrollspy.data-api",function(){t('[data-spy="scroll"]').each(function(){var e=t(this);i.call(e,e.data())})})}(jQuery),function(t){"use strict";function e(e){return this.each(function(){var o=t(this),n=o.data("bs.tab");n||o.data("bs.tab",n=new i(this)),"string"==typeof e&&n[e]()})}var i=function(e){this.element=t(e)};i.VERSION="3.3.7",i.TRANSITION_DURATION=150,i.prototype.show=function(){var e=this.element,i=e.closest("ul:not(.dropdown-menu)"),o=e.data("target");if(o||(o=e.attr("href"),o=o&&o.replace(/.*(?=#[^\s]*$)/,"")),!e.parent("li").hasClass("active")){var n=i.find(".active:last a"),s=t.Event("hide.bs.tab",{relatedTarget:e[0]}),a=t.Event("show.bs.tab",{relatedTarget:n[0]});if(n.trigger(s),e.trigger(a),!a.isDefaultPrevented()&&!s.isDefaultPrevented()){var r=t(o);this.activate(e.closest("li"),i),this.activate(r,r.parent(),function(){n.trigger({type:"hidden.bs.tab",relatedTarget:e[0]}),e.trigger({type:"shown.bs.tab",relatedTarget:n[0]})})}}},i.prototype.activate=function(e,o,n){function s(){a.removeClass("active").find("> .dropdown-menu > .active").removeClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!1),e.addClass("active").find('[data-toggle="tab"]').attr("aria-expanded",!0),r?(e[0].offsetWidth,e.addClass("in")):e.removeClass("fade"),e.parent(".dropdown-menu").length&&e.closest("li.dropdown").addClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!0),n&&n()}var a=o.find("> .active"),r=n&&t.support.transition&&(a.length&&a.hasClass("fade")||!!o.find("> .fade").length);a.length&&r?a.one("bsTransitionEnd",s).emulateTransitionEnd(i.TRANSITION_DURATION):s(),a.removeClass("in")};var o=t.fn.tab;t.fn.tab=e,t.fn.tab.Constructor=i,t.fn.tab.noConflict=function(){return t.fn.tab=o,this};var n=function(i){i.preventDefault(),e.call(t(this),"show")};t(document).on("click.bs.tab.data-api",'[data-toggle="tab"]',n).on("click.bs.tab.data-api",'[data-toggle="pill"]',n)}(jQuery),function(t){"use strict";function e(e){return this.each(function(){var o=t(this),n=o.data("bs.affix"),s="object"==typeof e&&e;n||o.data("bs.affix",n=new i(this,s)),"string"==typeof e&&n[e]()})}var i=function(e,o){this.options=t.extend({},i.DEFAULTS,o),this.$target=t(this.options.target).on("scroll.bs.affix.data-api",t.proxy(this.checkPosition,this)).on("click.bs.affix.data-api",t.proxy(this.checkPositionWithEventLoop,this)),this.$element=t(e),this.affixed=null,this.unpin=null,this.pinnedOffset=null,this.checkPosition()};i.VERSION="3.3.7",i.RESET="affix affix-top affix-bottom",i.DEFAULTS={offset:0,target:window},i.prototype.getState=function(t,e,i,o){var n=this.$target.scrollTop(),s=this.$element.offset(),a=this.$target.height();if(null!=i&&"top"==this.affixed)return n<i&&"top";if("bottom"==this.affixed)return null!=i?!(n+this.unpin<=s.top)&&"bottom":!(n+a<=t-o)&&"bottom";var r=null==this.affixed,l=r?n:s.top,h=r?a:e;return null!=i&&n<=i?"top":null!=o&&l+h>=t-o&&"bottom"},i.prototype.getPinnedOffset=function(){if(this.pinnedOffset)return this.pinnedOffset;this.$element.removeClass(i.RESET).addClass("affix");var t=this.$target.scrollTop(),e=this.$element.offset();return this.pinnedOffset=e.top-t},i.prototype.checkPositionWithEventLoop=function(){setTimeout(t.proxy(this.checkPosition,this),1)},i.prototype.checkPosition=function(){if(this.$element.is(":visible")){var e=this.$element.height(),o=this.options.offset,n=o.top,s=o.bottom,a=Math.max(t(document).height(),t(document.body).height());"object"!=typeof o&&(s=n=o),"function"==typeof n&&(n=o.top(this.$element)),"function"==typeof s&&(s=o.bottom(this.$element));var r=this.getState(a,e,n,s);if(this.affixed!=r){null!=this.unpin&&this.$element.css("top","");var l="affix"+(r?"-"+r:""),h=t.Event(l+".bs.affix");if(this.$element.trigger(h),h.isDefaultPrevented())return;this.affixed=r,this.unpin="bottom"==r?this.getPinnedOffset():null,this.$element.removeClass(i.RESET).addClass(l).trigger(l.replace("affix","affixed")+".bs.affix")}"bottom"==r&&this.$element.offset({top:a-e-s})}};var o=t.fn.affix;t.fn.affix=e,t.fn.affix.Constructor=i,t.fn.affix.noConflict=function(){return t.fn.affix=o,this},t(window).on("load",function(){t('[data-spy="affix"]').each(function(){var i=t(this),o=i.data();o.offset=o.offset||{},null!=o.offsetBottom&&(o.offset.bottom=o.offsetBottom),null!=o.offsetTop&&(o.offset.top=o.offsetTop),e.call(i,o)})})}(jQuery);
"use strict";!function(t,a,e){"function"==typeof define&&define.amd?define(["jquery"],t):"object"==typeof exports?module.exports=t(require("jquery")):t(a||e)}(function(t){var a=function(a,e,n){var s={invalid:[],getCaret:function(){try{var t,e=0,n=a.get(0),r=document.selection,o=n.selectionStart;return r&&-1===navigator.appVersion.indexOf("MSIE 10")?(t=r.createRange(),t.moveStart("character",-s.val().length),e=t.text.length):(o||"0"===o)&&(e=o),e}catch(t){}},setCaret:function(t){try{if(a.is(":focus")){var e,n=a.get(0);n.setSelectionRange?n.setSelectionRange(t,t):(e=n.createTextRange(),e.collapse(!0),e.moveEnd("character",t),e.moveStart("character",t),e.select())}}catch(t){}},events:function(){a.on("keydown.mask",function(t){a.data("mask-keycode",t.keyCode||t.which),a.data("mask-previus-value",a.val()),a.data("mask-previus-caret-pos",s.getCaret()),s.maskDigitPosMapOld=s.maskDigitPosMap}).on(t.jMaskGlobals.useInput?"input.mask":"keyup.mask",s.behaviour).on("paste.mask drop.mask",function(){setTimeout(function(){a.keydown().keyup()},100)}).on("change.mask",function(){a.data("changed",!0)}).on("blur.mask",function(){i===s.val()||a.data("changed")||a.trigger("change"),a.data("changed",!1)}).on("blur.mask",function(){i=s.val()}).on("focus.mask",function(a){!0===n.selectOnFocus&&t(a.target).select()}).on("focusout.mask",function(){n.clearIfNotMatch&&!r.test(s.val())&&s.val("")})},getRegexMask:function(){for(var t,a,n,s,r,i,c=[],l=0;l<e.length;l++)t=o.translation[e.charAt(l)],t?(a=t.pattern.toString().replace(/.{1}$|^.{1}/g,""),n=t.optional,s=t.recursive,s?(c.push(e.charAt(l)),r={digit:e.charAt(l),pattern:a}):c.push(n||s?a+"?":a)):c.push(e.charAt(l).replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&"));return i=c.join(""),r&&(i=i.replace(new RegExp("("+r.digit+"(.*"+r.digit+")?)"),"($1)?").replace(new RegExp(r.digit,"g"),r.pattern)),new RegExp(i)},destroyEvents:function(){a.off(["input","keydown","keyup","paste","drop","blur","focusout",""].join(".mask "))},val:function(t){var e,n=a.is("input"),s=n?"val":"text";return arguments.length>0?(a[s]()!==t&&a[s](t),e=a):e=a[s](),e},calculateCaretPosition:function(){var t=a.data("mask-previus-value")||"",e=s.getMasked(),n=s.getCaret();if(t!==e){var r=a.data("mask-previus-caret-pos")||0,o=e.length,i=t.length,c=0,l=0,u=0,f=0,k=0;for(k=n;k<o&&s.maskDigitPosMap[k];k++)l++;for(k=n-1;k>=0&&s.maskDigitPosMap[k];k--)c++;for(k=n-1;k>=0;k--)s.maskDigitPosMap[k]&&u++;for(k=r-1;k>=0;k--)s.maskDigitPosMapOld[k]&&f++;if(n>i)n=o;else if(r>=n&&r!==i){if(!s.maskDigitPosMapOld[n]){var v=n;n-=f-u,n-=c,s.maskDigitPosMap[n]&&(n=v)}}else n>r&&(n+=u-f,n+=l)}return n},behaviour:function(e){e=e||window.event,s.invalid=[];var n=a.data("mask-keycode");if(-1===t.inArray(n,o.byPassKeys)){var r=s.getMasked(),i=s.getCaret();return setTimeout(function(){s.setCaret(s.calculateCaretPosition())},10),s.val(r),s.setCaret(i),s.callbacks(e)}},getMasked:function(t,a){var r,i,c=[],l=void 0===a?s.val():a+"",u=0,f=e.length,k=0,v=l.length,d=1,p="push",h=-1,g=0,m=[];n.reverse?(p="unshift",d=-1,r=0,u=f-1,k=v-1,i=function(){return u>-1&&k>-1}):(r=f-1,i=function(){return u<f&&k<v});for(var M;i();){var y=e.charAt(u),b=l.charAt(k),w=o.translation[y];w?(b.match(w.pattern)?(c[p](b),w.recursive&&(-1===h?h=u:u===r&&(u=h-d),r===h&&(u-=d)),u+=d):b===M?(g--,M=void 0):w.optional?(u+=d,k-=d):w.fallback?(c[p](w.fallback),u+=d,k-=d):s.invalid.push({p:k,v:b,e:w.pattern}),k+=d):(t||c[p](y),b===y?(m.push(k),k+=d):(M=y,m.push(k+g),g++),u+=d)}var j=e.charAt(r);f!==v+1||o.translation[j]||c.push(j);var C=c.join("");return s.mapMaskdigitPositions(C,m,v),C},mapMaskdigitPositions:function(t,a,e){var r=n.reverse?t.length-e:0;s.maskDigitPosMap={};for(var o=0;o<a.length;o++)s.maskDigitPosMap[a[o]+r]=1},callbacks:function(t){var r=s.val(),o=r!==i,c=[r,t,a,n],l=function(t,a,e){"function"==typeof n[t]&&a&&n[t].apply(this,e)};l("onChange",!0===o,c),l("onKeyPress",!0===o,c),l("onComplete",r.length===e.length,c),l("onInvalid",s.invalid.length>0,[r,t,a,s.invalid,n])}};a=t(a);var r,o=this,i=s.val();e="function"==typeof e?e(s.val(),void 0,a,n):e,o.mask=e,o.options=n,o.remove=function(){var t=s.getCaret();return s.destroyEvents(),s.val(o.getCleanVal()),s.setCaret(t),a},o.getCleanVal=function(){return s.getMasked(!0)},o.getMaskedVal=function(t){return s.getMasked(!1,t)},o.init=function(i){if(i=i||!1,n=n||{},o.clearIfNotMatch=t.jMaskGlobals.clearIfNotMatch,o.byPassKeys=t.jMaskGlobals.byPassKeys,o.translation=t.extend({},t.jMaskGlobals.translation,n.translation),o=t.extend(!0,{},o,n),r=s.getRegexMask(),i)s.events(),s.val(s.getMasked());else{n.placeholder&&a.attr("placeholder",n.placeholder),a.data("mask")&&a.attr("autocomplete","off");for(var c=0,l=!0;c<e.length;c++){var u=o.translation[e.charAt(c)];if(u&&u.recursive){l=!1;break}}l&&a.attr("maxlength",e.length),s.destroyEvents(),s.events();var f=s.getCaret();s.val(s.getMasked()),s.setCaret(f)}},o.init(!a.is("input"))};t.maskWatchers={};var e=function(){var e=t(this),s={},r=e.attr("data-mask");if(e.attr("data-mask-reverse")&&(s.reverse=!0),e.attr("data-mask-clearifnotmatch")&&(s.clearIfNotMatch=!0),"true"===e.attr("data-mask-selectonfocus")&&(s.selectOnFocus=!0),n(e,r,s))return e.data("mask",new a(this,r,s))},n=function(a,e,n){n=n||{};var s=t(a).data("mask"),r=JSON.stringify,o=t(a).val()||t(a).text();try{return"function"==typeof e&&(e=e(o)),"object"!=typeof s||r(s.options)!==r(n)||s.mask!==e}catch(t){}};t.fn.mask=function(e,s){s=s||{};var r=this.selector,o=t.jMaskGlobals,i=o.watchInterval,c=s.watchInputs||o.watchInputs,l=function(){if(n(this,e,s))return t(this).data("mask",new a(this,e,s))};return t(this).each(l),r&&""!==r&&c&&(clearInterval(t.maskWatchers[r]),t.maskWatchers[r]=setInterval(function(){t(document).find(r).each(l)},i)),this},t.fn.masked=function(t){return this.data("mask").getMaskedVal(t)},t.fn.unmask=function(){return clearInterval(t.maskWatchers[this.selector]),delete t.maskWatchers[this.selector],this.each(function(){var a=t(this).data("mask");a&&a.remove().removeData("mask")})},t.fn.cleanVal=function(){return this.data("mask").getCleanVal()},t.applyDataMask=function(a){a=a||t.jMaskGlobals.maskElements,(a instanceof t?a:t(a)).filter(t.jMaskGlobals.dataMaskAttr).each(e)};var s={maskElements:"input,td,span,div",dataMaskAttr:"*[data-mask]",dataMask:!0,watchInterval:300,watchInputs:!0,useInput:!/Chrome\/[2-4][0-9]|SamsungBrowser/.test(window.navigator.userAgent)&&function(t){var a,e=document.createElement("div");return t="on"+t,a=t in e,a||(e.setAttribute(t,"return;"),a="function"==typeof e[t]),e=null,a}("input"),watchDataMask:!1,byPassKeys:[9,16,17,18,36,37,38,39,40,91],translation:{0:{pattern:/\d/},9:{pattern:/\d/,optional:!0},"#":{pattern:/\d/,recursive:!0},A:{pattern:/[a-zA-Z0-9]/},S:{pattern:/[a-zA-Z]/}}};t.jMaskGlobals=t.jMaskGlobals||{},s=t.jMaskGlobals=t.extend(!0,{},s,t.jMaskGlobals),s.dataMask&&t.applyDataMask(),setInterval(function(){t.jMaskGlobals.watchDataMask&&t.applyDataMask()},s.watchInterval)},window.jQuery,window.Zepto);
!function(e){e(document).ready(function(){a.init(),a.utils()});var a={init:function(){console.log("foo"),a.oscarMainForms()},utils:function(){e('.checkbox input[type="checkbox"], div[data-type=true_false] .acf-input input[type=checkbox]').on("change",function(a){e(this).is(":checked")?(e(".acf-form-submit input[type=submit]").removeAttr("disabled"),e(this).parent().parent().addClass("selected")):(e(".acf-form-submit input[type=submit]").attr("disabled","disabled"),e(this).parent().parent().removeClass("selected"))})},oscarMainForms:function(){if(e("#acf_inscricoes-oscar-2018").length){e('div[data-name="declaracao"] input[type="checkbox"]').is(":checked")?e('div[data-name="declaracao"] input[type="checkbox"]').parent().parent().addClass("selected"):e(".acf-form-submit input[type=submit]").attr("disabled","disabled"),e("#oscar-add-cast").on("click",function(a){a.preventDefault();var o=e("#nome-elenco"),t=e("#nacionalidade-elenco"),s=""===e("#elenco").val()?"":" | ";if(o.val().length&&t.val().length){e("#elenco").val(e("#elenco").val()+s+o.val()+" ("+t.val()+")"),o.val(""),t.val("");var i=e("#elenco").val(),n=i.split(" | ");e("#cast-holder ul").html(""),e(n).each(function(a,o){var t='<li class="list-group-item"><span>'+o+'</span><a href="!#"><span class="glyphicon glyphicon-remove-sign" aria-hidden="true"></span></a></li>';e("#cast-holder ul").append(t)})}else console.log("Campo vazio")}),e("body").on("click","#cast-holder .list-group .list-group-item a",function(a){a.preventDefault();var o=e("#elenco").val(),t=o.split(" | ");t.splice(t.indexOf(e(this).parent().find("span").text()),1),e("#elenco").val("");for(var s=0,i=t.length;s<i;s++){var n=""===e("#elenco").val()?"":" | ";e("#elenco").val(e("#elenco").val()+n+t[s])}e(this).parent().remove()}),e('div[data-name="data_estreia"] input').mask("00/00/0000");var a=function(e){return 11===e.replace(/\D/g,"").length?"(00) 00000-0000":"(00) 0000-00009"},o={onKeyPress:function(e,o,t,s){t.mask(a.apply({},arguments),s)}};e('div[data-name="empresa_telefone"] input, div[data-name="empresa_fax"] input').mask(a,o),e.each(e('div[data-name="anexos"] table > tbody > tr.acf-row'),function(a,o){console.log(o),e(this).find('.file-wrap .file-info strong[data-name="title"]').addClass("xxx"),""!==e(this).find('.file-wrap .file-info strong[data-name="title"]').text()&&(e(this).find(".file-wrap").show(),e(this).find(".hide-if-value").hide())})}e("#oscar-video-form").length&&(e(document).on("change","#oscar-video",function(a){e(this)[0].files[0]?(e("#oscar-video-name").text(e(this)[0].files[0].name),e("#oscar-video-upload-btn").removeAttr("disabled"),e("#oscar-video-form .video-drag-area").addClass("ready-to-upload")):(e("#oscar-video-name").text(""),e("#oscar-video-upload-btn").attr("disabled","disabled"),e("#oscar-video-form .video-drag-area").removeClass("ready-to-upload"))}),e("#oscar-video-form").on("submit",function(a){a.preventDefault(),e("#oscar-video-form .myprogress").css("width","0"),e("#oscar-video-form .msg").text("");if(""==e("#oscar-video").val())return void alert("Por favor, selecione um arquivo para upload.");var o=new FormData;o.append("oscarVideo",e("#oscar-video")[0].files[0]),o.append("action","upload_oscar_video"),e("#oscar-video-form .msg").text("Upload em progresso, por favor, aguarde..."),e.ajax({url:oscarJS.ajaxurl,data:o,processData:!1,contentType:!1,type:"POST",beforeSend:function(){e("#upload-status").removeClass("hidden")},xhr:function(){var a=new window.XMLHttpRequest;return a.upload.addEventListener("progress",function(a){if(a.lengthComputable){var o=a.loaded/a.total;o=parseInt(100*o),e("#oscar-video-form .myprogress").text(o+"%"),e("#oscar-video-form .myprogress").css("width",o+"%")}},!1),a},success:function(a){e("#oscar-video-form .msg").addClass("success"),e("#oscar-video-form .msg").html(a)}})})),e("#oscar-register-form").length&&e('input[name="cnpj"]').mask("00.000.000/0000-00",{reverse:!0})}}}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJvb3RzdHJhcC5qcyIsImpxdWVyeS5tYXNrLmpzIiwibWFpbi5qcyJdLCJuYW1lcyI6WyJqUXVlcnkiLCJFcnJvciIsIiQiLCJ2ZXJzaW9uIiwiZm4iLCJqcXVlcnkiLCJzcGxpdCIsInRyYW5zaXRpb25FbmQiLCJlbCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsInRyYW5zRW5kRXZlbnROYW1lcyIsIldlYmtpdFRyYW5zaXRpb24iLCJNb3pUcmFuc2l0aW9uIiwiT1RyYW5zaXRpb24iLCJ0cmFuc2l0aW9uIiwibmFtZSIsInVuZGVmaW5lZCIsInN0eWxlIiwiZW5kIiwiZW11bGF0ZVRyYW5zaXRpb25FbmQiLCJkdXJhdGlvbiIsImNhbGxlZCIsIiRlbCIsInRoaXMiLCJvbmUiLCJjYWxsYmFjayIsInRyaWdnZXIiLCJzdXBwb3J0Iiwic2V0VGltZW91dCIsImV2ZW50Iiwic3BlY2lhbCIsImJzVHJhbnNpdGlvbkVuZCIsImJpbmRUeXBlIiwiZGVsZWdhdGVUeXBlIiwiaGFuZGxlIiwiZSIsInRhcmdldCIsImlzIiwiaGFuZGxlT2JqIiwiaGFuZGxlciIsImFwcGx5IiwiYXJndW1lbnRzIiwiUGx1Z2luIiwib3B0aW9uIiwiZWFjaCIsIiR0aGlzIiwiZGF0YSIsIkFsZXJ0IiwiY2FsbCIsImRpc21pc3MiLCJvbiIsImNsb3NlIiwiVkVSU0lPTiIsIlRSQU5TSVRJT05fRFVSQVRJT04iLCJwcm90b3R5cGUiLCJyZW1vdmVFbGVtZW50IiwiJHBhcmVudCIsImRldGFjaCIsInJlbW92ZSIsInNlbGVjdG9yIiwiYXR0ciIsInJlcGxhY2UiLCJwcmV2ZW50RGVmYXVsdCIsImxlbmd0aCIsImNsb3Nlc3QiLCJFdmVudCIsImlzRGVmYXVsdFByZXZlbnRlZCIsInJlbW92ZUNsYXNzIiwiaGFzQ2xhc3MiLCJvbGQiLCJhbGVydCIsIkNvbnN0cnVjdG9yIiwibm9Db25mbGljdCIsIm9wdGlvbnMiLCJCdXR0b24iLCJ0b2dnbGUiLCJzZXRTdGF0ZSIsImVsZW1lbnQiLCIkZWxlbWVudCIsImV4dGVuZCIsIkRFRkFVTFRTIiwiaXNMb2FkaW5nIiwibG9hZGluZ1RleHQiLCJzdGF0ZSIsImQiLCJ2YWwiLCJyZXNldFRleHQiLCJwcm94eSIsImFkZENsYXNzIiwicHJvcCIsInJlbW92ZUF0dHIiLCJjaGFuZ2VkIiwiJGlucHV0IiwiZmluZCIsInRvZ2dsZUNsYXNzIiwiYnV0dG9uIiwiJGJ0biIsImZpcnN0IiwidGVzdCIsInR5cGUiLCJDYXJvdXNlbCIsImFjdGlvbiIsInNsaWRlIiwidG8iLCJpbnRlcnZhbCIsInBhdXNlIiwiY3ljbGUiLCIkaW5kaWNhdG9ycyIsInBhdXNlZCIsInNsaWRpbmciLCIkYWN0aXZlIiwiJGl0ZW1zIiwia2V5Ym9hcmQiLCJrZXlkb3duIiwiZG9jdW1lbnRFbGVtZW50Iiwid3JhcCIsInRhZ05hbWUiLCJ3aGljaCIsInByZXYiLCJuZXh0IiwiY2xlYXJJbnRlcnZhbCIsInNldEludGVydmFsIiwiZ2V0SXRlbUluZGV4IiwiaXRlbSIsInBhcmVudCIsImNoaWxkcmVuIiwiaW5kZXgiLCJnZXRJdGVtRm9yRGlyZWN0aW9uIiwiZGlyZWN0aW9uIiwiYWN0aXZlIiwiYWN0aXZlSW5kZXgiLCJkZWx0YSIsIml0ZW1JbmRleCIsImVxIiwicG9zIiwidGhhdCIsIiRuZXh0IiwiaXNDeWNsaW5nIiwicmVsYXRlZFRhcmdldCIsInNsaWRlRXZlbnQiLCIkbmV4dEluZGljYXRvciIsInNsaWRFdmVudCIsIm9mZnNldFdpZHRoIiwiam9pbiIsImNhcm91c2VsIiwiY2xpY2tIYW5kbGVyIiwiaHJlZiIsIiR0YXJnZXQiLCJzbGlkZUluZGV4Iiwid2luZG93IiwiJGNhcm91c2VsIiwiZ2V0VGFyZ2V0RnJvbVRyaWdnZXIiLCIkdHJpZ2dlciIsIkNvbGxhcHNlIiwiaWQiLCJ0cmFuc2l0aW9uaW5nIiwiZ2V0UGFyZW50IiwiYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzIiwiZGltZW5zaW9uIiwic2hvdyIsImFjdGl2ZXNEYXRhIiwiYWN0aXZlcyIsInN0YXJ0RXZlbnQiLCJjb21wbGV0ZSIsInNjcm9sbFNpemUiLCJjYW1lbENhc2UiLCJoaWRlIiwib2Zmc2V0SGVpZ2h0IiwiaSIsImlzT3BlbiIsImNvbGxhcHNlIiwiY2xlYXJNZW51cyIsImJhY2tkcm9wIiwiY29udGFpbnMiLCJEcm9wZG93biIsImlzQWN0aXZlIiwiaW5zZXJ0QWZ0ZXIiLCJzdG9wUHJvcGFnYXRpb24iLCJkcm9wZG93biIsIl9yZWxhdGVkVGFyZ2V0IiwiTW9kYWwiLCIkYm9keSIsImJvZHkiLCIkZGlhbG9nIiwiJGJhY2tkcm9wIiwiaXNTaG93biIsIm9yaWdpbmFsQm9keVBhZCIsInNjcm9sbGJhcldpZHRoIiwiaWdub3JlQmFja2Ryb3BDbGljayIsInJlbW90ZSIsImxvYWQiLCJCQUNLRFJPUF9UUkFOU0lUSU9OX0RVUkFUSU9OIiwiY2hlY2tTY3JvbGxiYXIiLCJzZXRTY3JvbGxiYXIiLCJlc2NhcGUiLCJyZXNpemUiLCJhcHBlbmRUbyIsInNjcm9sbFRvcCIsImFkanVzdERpYWxvZyIsImVuZm9yY2VGb2N1cyIsIm9mZiIsImhpZGVNb2RhbCIsImhhcyIsImhhbmRsZVVwZGF0ZSIsInJlc2V0QWRqdXN0bWVudHMiLCJyZXNldFNjcm9sbGJhciIsInJlbW92ZUJhY2tkcm9wIiwiYW5pbWF0ZSIsImRvQW5pbWF0ZSIsImN1cnJlbnRUYXJnZXQiLCJmb2N1cyIsImNhbGxiYWNrUmVtb3ZlIiwibW9kYWxJc092ZXJmbG93aW5nIiwic2Nyb2xsSGVpZ2h0IiwiY2xpZW50SGVpZ2h0IiwiY3NzIiwicGFkZGluZ0xlZnQiLCJib2R5SXNPdmVyZmxvd2luZyIsInBhZGRpbmdSaWdodCIsImZ1bGxXaW5kb3dXaWR0aCIsImlubmVyV2lkdGgiLCJkb2N1bWVudEVsZW1lbnRSZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwicmlnaHQiLCJNYXRoIiwiYWJzIiwibGVmdCIsImNsaWVudFdpZHRoIiwibWVhc3VyZVNjcm9sbGJhciIsImJvZHlQYWQiLCJwYXJzZUludCIsInNjcm9sbERpdiIsImNsYXNzTmFtZSIsImFwcGVuZCIsInJlbW92ZUNoaWxkIiwibW9kYWwiLCJzaG93RXZlbnQiLCJUb29sdGlwIiwiZW5hYmxlZCIsInRpbWVvdXQiLCJob3ZlclN0YXRlIiwiaW5TdGF0ZSIsImluaXQiLCJhbmltYXRpb24iLCJwbGFjZW1lbnQiLCJ0ZW1wbGF0ZSIsInRpdGxlIiwiZGVsYXkiLCJodG1sIiwiY29udGFpbmVyIiwidmlld3BvcnQiLCJwYWRkaW5nIiwiZ2V0T3B0aW9ucyIsIiR2aWV3cG9ydCIsImlzRnVuY3Rpb24iLCJjbGljayIsImhvdmVyIiwiY29uc3RydWN0b3IiLCJ0cmlnZ2VycyIsImV2ZW50SW4iLCJldmVudE91dCIsImVudGVyIiwibGVhdmUiLCJfb3B0aW9ucyIsImZpeFRpdGxlIiwiZ2V0RGVmYXVsdHMiLCJnZXREZWxlZ2F0ZU9wdGlvbnMiLCJkZWZhdWx0cyIsImtleSIsInZhbHVlIiwib2JqIiwic2VsZiIsInRpcCIsImNsZWFyVGltZW91dCIsImlzSW5TdGF0ZVRydWUiLCJoYXNDb250ZW50IiwiaW5Eb20iLCJvd25lckRvY3VtZW50IiwiJHRpcCIsInRpcElkIiwiZ2V0VUlEIiwic2V0Q29udGVudCIsImF1dG9Ub2tlbiIsImF1dG9QbGFjZSIsInRvcCIsImRpc3BsYXkiLCJnZXRQb3NpdGlvbiIsImFjdHVhbFdpZHRoIiwiYWN0dWFsSGVpZ2h0Iiwib3JnUGxhY2VtZW50Iiwidmlld3BvcnREaW0iLCJib3R0b20iLCJ3aWR0aCIsImNhbGN1bGF0ZWRPZmZzZXQiLCJnZXRDYWxjdWxhdGVkT2Zmc2V0IiwiYXBwbHlQbGFjZW1lbnQiLCJwcmV2SG92ZXJTdGF0ZSIsIm9mZnNldCIsImhlaWdodCIsIm1hcmdpblRvcCIsIm1hcmdpbkxlZnQiLCJpc05hTiIsInNldE9mZnNldCIsInVzaW5nIiwicHJvcHMiLCJyb3VuZCIsImdldFZpZXdwb3J0QWRqdXN0ZWREZWx0YSIsImlzVmVydGljYWwiLCJhcnJvd0RlbHRhIiwiYXJyb3dPZmZzZXRQb3NpdGlvbiIsInJlcGxhY2VBcnJvdyIsImFycm93IiwiZ2V0VGl0bGUiLCIkZSIsImlzQm9keSIsImVsUmVjdCIsImlzU3ZnIiwiU1ZHRWxlbWVudCIsImVsT2Zmc2V0Iiwic2Nyb2xsIiwib3V0ZXJEaW1zIiwidmlld3BvcnRQYWRkaW5nIiwidmlld3BvcnREaW1lbnNpb25zIiwidG9wRWRnZU9mZnNldCIsImJvdHRvbUVkZ2VPZmZzZXQiLCJsZWZ0RWRnZU9mZnNldCIsInJpZ2h0RWRnZU9mZnNldCIsIm8iLCJwcmVmaXgiLCJyYW5kb20iLCJnZXRFbGVtZW50QnlJZCIsIiRhcnJvdyIsImVuYWJsZSIsImRpc2FibGUiLCJ0b2dnbGVFbmFibGVkIiwiZGVzdHJveSIsInJlbW92ZURhdGEiLCJ0b29sdGlwIiwiUG9wb3ZlciIsImNvbnRlbnQiLCJnZXRDb250ZW50IiwicG9wb3ZlciIsIlNjcm9sbFNweSIsIiRzY3JvbGxFbGVtZW50Iiwib2Zmc2V0cyIsInRhcmdldHMiLCJhY3RpdmVUYXJnZXQiLCJwcm9jZXNzIiwicmVmcmVzaCIsImdldFNjcm9sbEhlaWdodCIsIm1heCIsIm9mZnNldE1ldGhvZCIsIm9mZnNldEJhc2UiLCJpc1dpbmRvdyIsIm1hcCIsIiRocmVmIiwic29ydCIsImEiLCJiIiwicHVzaCIsIm1heFNjcm9sbCIsImFjdGl2YXRlIiwiY2xlYXIiLCJwYXJlbnRzIiwicGFyZW50c1VudGlsIiwic2Nyb2xsc3B5IiwiJHNweSIsIlRhYiIsIiR1bCIsIiRwcmV2aW91cyIsImhpZGVFdmVudCIsInRhYiIsIkFmZml4IiwiY2hlY2tQb3NpdGlvbiIsImNoZWNrUG9zaXRpb25XaXRoRXZlbnRMb29wIiwiYWZmaXhlZCIsInVucGluIiwicGlubmVkT2Zmc2V0IiwiUkVTRVQiLCJnZXRTdGF0ZSIsIm9mZnNldFRvcCIsIm9mZnNldEJvdHRvbSIsInBvc2l0aW9uIiwidGFyZ2V0SGVpZ2h0IiwiaW5pdGlhbGl6aW5nIiwiY29sbGlkZXJUb3AiLCJjb2xsaWRlckhlaWdodCIsImdldFBpbm5lZE9mZnNldCIsImFmZml4IiwiYWZmaXhUeXBlIiwiZmFjdG9yeSIsIlplcHRvIiwiZGVmaW5lIiwiYW1kIiwiZXhwb3J0cyIsIm1vZHVsZSIsInJlcXVpcmUiLCJNYXNrIiwibWFzayIsInAiLCJpbnZhbGlkIiwiZ2V0Q2FyZXQiLCJzZWwiLCJjdHJsIiwiZ2V0IiwiZFNlbCIsInNlbGVjdGlvbiIsImNTZWxTdGFydCIsInNlbGVjdGlvblN0YXJ0IiwibmF2aWdhdG9yIiwiYXBwVmVyc2lvbiIsImluZGV4T2YiLCJjcmVhdGVSYW5nZSIsIm1vdmVTdGFydCIsInRleHQiLCJzZXRDYXJldCIsInJhbmdlIiwic2V0U2VsZWN0aW9uUmFuZ2UiLCJjcmVhdGVUZXh0UmFuZ2UiLCJtb3ZlRW5kIiwic2VsZWN0IiwiZXZlbnRzIiwia2V5Q29kZSIsIm1hc2tEaWdpdFBvc01hcE9sZCIsIm1hc2tEaWdpdFBvc01hcCIsImpNYXNrR2xvYmFscyIsInVzZUlucHV0IiwiYmVoYXZpb3VyIiwia2V5dXAiLCJvbGRWYWx1ZSIsInNlbGVjdE9uRm9jdXMiLCJjbGVhcklmTm90TWF0Y2giLCJyZWdleE1hc2siLCJnZXRSZWdleE1hc2siLCJ0cmFuc2xhdGlvbiIsInBhdHRlcm4iLCJvcHRpb25hbCIsInJlY3Vyc2l2ZSIsIm9SZWN1cnNpdmUiLCJyIiwibWFza0NodW5rcyIsImpNYXNrIiwiY2hhckF0IiwidG9TdHJpbmciLCJkaWdpdCIsIlJlZ0V4cCIsImRlc3Ryb3lFdmVudHMiLCJ2IiwiaXNJbnB1dCIsIm1ldGhvZCIsImNhbGN1bGF0ZUNhcmV0UG9zaXRpb24iLCJvbGRWYWwiLCJuZXdWYWwiLCJnZXRNYXNrZWQiLCJjYXJldFBvc05ldyIsImNhcmV0UG9zT2xkIiwibmV3VmFsTCIsIm9sZFZhbEwiLCJtYXNrRGlnaXRzQmVmb3JlQ2FyZXQiLCJtYXNrRGlnaXRzQWZ0ZXJDYXJldCIsIm1hc2tEaWdpdHNCZWZvcmVDYXJldEFsbCIsIm1hc2tEaWdpdHNCZWZvcmVDYXJldEFsbE9sZCIsImNhcmV0UG9zIiwiaW5BcnJheSIsImJ5UGFzc0tleXMiLCJjYWxsYmFja3MiLCJza2lwTWFza0NoYXJzIiwibGFzdE1hc2tDaGFyIiwiY2hlY2siLCJidWYiLCJtIiwibWFza0xlbiIsInZhbExlbiIsImFkZE1ldGhvZCIsInJlc2V0UG9zIiwibWFza0RpZ2l0Q291bnQiLCJtYXNrRGlnaXRQb3NBcnIiLCJyZXZlcnNlIiwibGFzdFVudHJhbnNsYXRlZE1hc2tDaGFyIiwibWFza0RpZ2l0IiwidmFsRGlnaXQiLCJtYXRjaCIsImZhbGxiYWNrIiwibGFzdE1hc2tDaGFyRGlnaXQiLCJtYXBNYXNrZGlnaXRQb3NpdGlvbnMiLCJtYXNrRGlmZiIsImRlZmF1bHRBcmdzIiwiY3JpdGVyaWEiLCJhcmdzIiwiY2FyZXQiLCJnZXRDbGVhblZhbCIsImdldE1hc2tlZFZhbCIsIm9ubHlNYXNrIiwicGxhY2Vob2xkZXIiLCJtYXhsZW5ndGgiLCJtYXNrV2F0Y2hlcnMiLCJIVE1MQXR0cmlidXRlcyIsImlucHV0Iiwibm90U2FtZU1hc2tPYmplY3QiLCJmaWVsZCIsIm1hc2tPYmplY3QiLCJzdHJpbmdpZnkiLCJKU09OIiwiZ2xvYmFscyIsIndhdGNoSW50ZXJ2YWwiLCJ3YXRjaElucHV0cyIsIm1hc2tGdW5jdGlvbiIsIm1hc2tlZCIsInVubWFzayIsImRhdGFNYXNrIiwiY2xlYW5WYWwiLCJhcHBseURhdGFNYXNrIiwibWFza0VsZW1lbnRzIiwiZmlsdGVyIiwiZGF0YU1hc2tBdHRyIiwidXNlckFnZW50IiwiZXZlbnROYW1lIiwiaXNTdXBwb3J0ZWQiLCJzZXRBdHRyaWJ1dGUiLCJ3YXRjaERhdGFNYXNrIiwiMCIsIjkiLCIjIiwiQSIsIlMiLCJyZWFkeSIsImFwcCIsInV0aWxzIiwiY29uc29sZSIsImxvZyIsIm9zY2FyTWFpbkZvcm1zIiwiY2FzdE5hbWUiLCJjYXN0TmF0aW9uYWxpdHkiLCJkZWxpbWl0ZXIiLCJjYXN0VmFsIiwicmVzIiwiYXJyIiwic3BsaWNlIiwibCIsIm1hc2tCZWhhdmlvciIsIm9uS2V5UHJlc3MiLCJyb3dFbCIsImZpbGVzIiwiZm9ybURhdGEiLCJGb3JtRGF0YSIsImFqYXgiLCJ1cmwiLCJvc2NhckpTIiwiYWpheHVybCIsInByb2Nlc3NEYXRhIiwiY29udGVudFR5cGUiLCJiZWZvcmVTZW5kIiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJ1cGxvYWQiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZ0IiwibGVuZ3RoQ29tcHV0YWJsZSIsInBlcmNlbnRDb21wbGV0ZSIsImxvYWRlZCIsInRvdGFsIiwic3VjY2VzcyJdLCJtYXBwaW5ncyI6IkFBTUEsR0FBc0IsbUJBQVhBLFFBQ1QsS0FBTSxJQUFJQyxPQUFNLDJDQUdqQixTQUFVQyxHQUNULFlBQ0EsSUFBSUMsR0FBVUQsRUFBRUUsR0FBR0MsT0FBT0MsTUFBTSxLQUFLLEdBQUdBLE1BQU0sSUFDOUMsSUFBS0gsRUFBUSxHQUFLLEdBQUtBLEVBQVEsR0FBSyxHQUFxQixHQUFkQSxFQUFRLElBQXlCLEdBQWRBLEVBQVEsSUFBV0EsRUFBUSxHQUFLLEdBQU9BLEVBQVEsR0FBSyxFQUNoSCxLQUFNLElBQUlGLE9BQU0sNkZBRWxCRCxRQVdELFNBQVVFLEdBQ1QsWUFLQSxTQUFTSyxLQUNQLEdBQUlDLEdBQUtDLFNBQVNDLGNBQWMsYUFFNUJDLEdBQ0ZDLGlCQUFtQixzQkFDbkJDLGNBQW1CLGdCQUNuQkMsWUFBbUIsZ0NBQ25CQyxXQUFtQixnQkFHckIsS0FBSyxHQUFJQyxLQUFRTCxHQUNmLE9BQXVCTSxLQUFuQlQsRUFBR1UsTUFBTUYsR0FDWCxPQUFTRyxJQUFLUixFQUFtQkssR0FJckMsUUFBTyxFQUlUZCxFQUFFRSxHQUFHZ0IscUJBQXVCLFNBQVVDLEdBQ3BDLEdBQUlDLElBQVMsRUFDVEMsRUFBTUMsSUFDVnRCLEdBQUVzQixNQUFNQyxJQUFJLGtCQUFtQixXQUFjSCxHQUFTLEdBQ3RELElBQUlJLEdBQVcsV0FBbUJKLEdBQVFwQixFQUFFcUIsR0FBS0ksUUFBUXpCLEVBQUUwQixRQUFRYixXQUFXSSxLQUU5RSxPQURBVSxZQUFXSCxFQUFVTCxHQUNkRyxNQUdUdEIsRUFBRSxX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LEdBQUlDLEdBQWtCRixFQUFJRyxPQUFTSCxFQUFJSSxLQUN2Q0YsR0FBa0J4VSxTQUEyQixJQUFsQndVLEdBQzNCN2lCLEVBQUUsaUNBQWlDNlosS0FBS2dKLEVBQWtCLEtBQzFEN2lCLEVBQUUsaUNBQWlDc04sSUFBSSxRQUFTdVYsRUFBa0IsUUFFdkUsR0FDSU4sR0FFWFMsUUFBUyxTQUFTbmdCLEdBQ2Q3QyxFQUFFLDBCQUEwQnVGLFNBQVMsV0FDckN2RixFQUFFLDBCQUEwQnVQLEtBQUsxTSxTQU83QzdDLEVBQUUsd0JBQXdCOEQsUUFDN0I5RCxFQUFFLHNCQUFzQjZZLEtBQUssc0JBQXVCK0UsU0FBUyxPQUt2RTlkIiwiZmlsZSI6Im1haW4ubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBCb290c3RyYXAgdjMuMy43IChodHRwOi8vZ2V0Ym9vdHN0cmFwLmNvbSlcbiAqIENvcHlyaWdodCAyMDExLTIwMTYgVHdpdHRlciwgSW5jLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKi9cblxuaWYgKHR5cGVvZiBqUXVlcnkgPT09ICd1bmRlZmluZWQnKSB7XG4gIHRocm93IG5ldyBFcnJvcignQm9vdHN0cmFwXFwncyBKYXZhU2NyaXB0IHJlcXVpcmVzIGpRdWVyeScpXG59XG5cbitmdW5jdGlvbiAoJCkge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciB2ZXJzaW9uID0gJC5mbi5qcXVlcnkuc3BsaXQoJyAnKVswXS5zcGxpdCgnLicpXG4gIGlmICgodmVyc2lvblswXSA8IDIgJiYgdmVyc2lvblsxXSA8IDkpIHx8ICh2ZXJzaW9uWzBdID09IDEgJiYgdmVyc2lvblsxXSA9PSA5ICYmIHZlcnNpb25bMl0gPCAxKSB8fCAodmVyc2lvblswXSA+IDMpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdCb290c3RyYXBcXCdzIEphdmFTY3JpcHQgcmVxdWlyZXMgalF1ZXJ5IHZlcnNpb24gMS45LjEgb3IgaGlnaGVyLCBidXQgbG93ZXIgdGhhbiB2ZXJzaW9uIDQnKVxuICB9XG59KGpRdWVyeSk7XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQm9vdHN0cmFwOiB0cmFuc2l0aW9uLmpzIHYzLjMuN1xuICogaHR0cDovL2dldGJvb3RzdHJhcC5jb20vamF2YXNjcmlwdC8jdHJhbnNpdGlvbnNcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29weXJpZ2h0IDIwMTEtMjAxNiBUd2l0dGVyLCBJbmMuXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cblxuK2Z1bmN0aW9uICgkKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBDU1MgVFJBTlNJVElPTiBTVVBQT1JUIChTaG91dG91dDogaHR0cDovL3d3dy5tb2Rlcm5penIuY29tLylcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgZnVuY3Rpb24gdHJhbnNpdGlvbkVuZCgpIHtcbiAgICB2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdib290c3RyYXAnKVxuXG4gICAgdmFyIHRyYW5zRW5kRXZlbnROYW1lcyA9IHtcbiAgICAgIFdlYmtpdFRyYW5zaXRpb24gOiAnd2Via2l0VHJhbnNpdGlvbkVuZCcsXG4gICAgICBNb3pUcmFuc2l0aW9uICAgIDogJ3RyYW5zaXRpb25lbmQnLFxuICAgICAgT1RyYW5zaXRpb24gICAgICA6ICdvVHJhbnNpdGlvbkVuZCBvdHJhbnNpdGlvbmVuZCcsXG4gICAgICB0cmFuc2l0aW9uICAgICAgIDogJ3RyYW5zaXRpb25lbmQnXG4gICAgfVxuXG4gICAgZm9yICh2YXIgbmFtZSBpbiB0cmFuc0VuZEV2ZW50TmFtZXMpIHtcbiAgICAgIGlmIChlbC5zdHlsZVtuYW1lXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB7IGVuZDogdHJhbnNFbmRFdmVudE5hbWVzW25hbWVdIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2UgLy8gZXhwbGljaXQgZm9yIGllOCAoICAuXy4pXG4gIH1cblxuICAvLyBodHRwOi8vYmxvZy5hbGV4bWFjY2F3LmNvbS9jc3MtdHJhbnNpdGlvbnNcbiAgJC5mbi5lbXVsYXRlVHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uIChkdXJhdGlvbikge1xuICAgIHZhciBjYWxsZWQgPSBmYWxzZVxuICAgIHZhciAkZWwgPSB0aGlzXG4gICAgJCh0aGlzKS5vbmUoJ2JzVHJhbnNpdGlvbkVuZCcsIGZ1bmN0aW9uICgpIHsgY2FsbGVkID0gdHJ1ZSB9KVxuICAgIHZhciBjYWxsYmFjayA9IGZ1bmN0aW9uICgpIHsgaWYgKCFjYWxsZWQpICQoJGVsKS50cmlnZ2VyKCQuc3VwcG9ydC50cmFuc2l0aW9uLmVuZCkgfVxuICAgIHNldFRpbWVvdXQoY2FsbGJhY2ssIGR1cmF0aW9uKVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAkKGZ1bmN0aW9uICgpIHtcbiAgICAkLnN1cHBvcnQudHJhbnNpdGlvbiA9IHRyYW5zaXRpb25FbmQoKVxuXG4gICAgaWYgKCEkLnN1cHBvcnQudHJhbnNpdGlvbikgcmV0dXJuXG5cbiAgICAkLmV2ZW50LnNwZWNpYWwuYnNUcmFuc2l0aW9uRW5kID0ge1xuICAgICAgYmluZFR5cGU6ICQuc3VwcG9ydC50cmFuc2l0aW9uLmVuZCxcbiAgICAgIGRlbGVnYXRlVHlwZTogJC5zdXBwb3J0LnRyYW5zaXRpb24uZW5kLFxuICAgICAgaGFuZGxlOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICBpZiAoJChlLnRhcmdldCkuaXModGhpcykpIHJldHVybiBlLmhhbmRsZU9iai5oYW5kbGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbiAgICAgIH1cbiAgICB9XG4gIH0pXG5cbn0oalF1ZXJ5KTtcblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBCb290c3RyYXA6IGFsZXJ0LmpzIHYzLjMuN1xuICogaHR0cDovL2dldGJvb3RzdHJhcC5jb20vamF2YXNjcmlwdC8jYWxlcnRzXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvcHlyaWdodCAyMDExLTIwMTYgVHdpdHRlciwgSW5jLlxuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG5cbitmdW5jdGlvbiAoJCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gQUxFUlQgQ0xBU1MgREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09XG5cbiAgdmFyIGRpc21pc3MgPSAnW2RhdGEtZGlzbWlzcz1cImFsZXJ0XCJdJ1xuICB2YXIgQWxlcnQgICA9IGZ1bmN0aW9uIChlbCkge1xuICAgICQoZWwpLm9uKCdjbGljaycsIGRpc21pc3MsIHRoaXMuY2xvc2UpXG4gIH1cblxuICBBbGVydC5WRVJTSU9OID0gJzMuMy43J1xuXG4gIEFsZXJ0LlRSQU5TSVRJT05fRFVSQVRJT04gPSAxNTBcblxuICBBbGVydC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiAoZSkge1xuICAgIHZhciAkdGhpcyAgICA9ICQodGhpcylcbiAgICB2YXIgc2VsZWN0b3IgPSAkdGhpcy5hdHRyKCdkYXRhLXRhcmdldCcpXG5cbiAgICBpZiAoIXNlbGVjdG9yKSB7XG4gICAgICBzZWxlY3RvciA9ICR0aGlzLmF0dHIoJ2hyZWYnKVxuICAgICAgc2VsZWN0b3IgPSBzZWxlY3RvciAmJiBzZWxlY3Rvci5yZXBsYWNlKC8uKig/PSNbXlxcc10qJCkvLCAnJykgLy8gc3RyaXAgZm9yIGllN1xuICAgIH1cblxuICAgIHZhciAkcGFyZW50ID0gJChzZWxlY3RvciA9PT0gJyMnID8gW10gOiBzZWxlY3RvcilcblxuICAgIGlmIChlKSBlLnByZXZlbnREZWZhdWx0KClcblxuICAgIGlmICghJHBhcmVudC5sZW5ndGgpIHtcbiAgICAgICRwYXJlbnQgPSAkdGhpcy5jbG9zZXN0KCcuYWxlcnQnKVxuICAgIH1cblxuICAgICRwYXJlbnQudHJpZ2dlcihlID0gJC5FdmVudCgnY2xvc2UuYnMuYWxlcnQnKSlcblxuICAgIGlmIChlLmlzRGVmYXVsdFByZXZlbnRlZCgpKSByZXR1cm5cblxuICAgICRwYXJlbnQucmVtb3ZlQ2xhc3MoJ2luJylcblxuICAgIGZ1bmN0aW9uIHJlbW92ZUVsZW1lbnQoKSB7XG4gICAgICAvLyBkZXRhY2ggZnJvbSBwYXJlbnQsIGZpcmUgZXZlbnQgdGhlbiBjbGVhbiB1cCBkYXRhXG4gICAgICAkcGFyZW50LmRldGFjaCgpLnRyaWdnZXIoJ2Nsb3NlZC5icy5hbGVydCcpLnJlbW92ZSgpXG4gICAgfVxuXG4gICAgJC5zdXBwb3J0LnRyYW5zaXRpb24gJiYgJHBhcmVudC5oYXNDbGFzcygnZmFkZScpID9cbiAgICAgICRwYXJlbnRcbiAgICAgICAgLm9uZSgnYnNUcmFuc2l0aW9uRW5kJywgcmVtb3ZlRWxlbWVudClcbiAgICAgICAgLmVtdWxhdGVUcmFuc2l0aW9uRW5kKEFsZXJ0LlRSQU5TSVRJT05fRFVSQVRJT04pIDpcbiAgICAgIHJlbW92ZUVsZW1lbnQoKVxuICB9XG5cblxuICAvLyBBTEVSVCBQTFVHSU4gREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIGZ1bmN0aW9uIFBsdWdpbihvcHRpb24pIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGhpcyA9ICQodGhpcylcbiAgICAgIHZhciBkYXRhICA9ICR0aGlzLmRhdGEoJ2JzLmFsZXJ0JylcblxuICAgICAgaWYgKCFkYXRhKSAkdGhpcy5kYXRhKCdicy5hbGVydCcsIChkYXRhID0gbmV3IEFsZXJ0KHRoaXMpKSlcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9uID09ICdzdHJpbmcnKSBkYXRhW29wdGlvbl0uY2FsbCgkdGhpcylcbiAgICB9KVxuICB9XG5cbiAgdmFyIG9sZCA9ICQuZm4uYWxlcnRcblxuICAkLmZuLmFsZXJ0ICAgICAgICAgICAgID0gUGx1Z2luXG4gICQuZm4uYWxlcnQuQ29uc3RydWN0b3IgPSBBbGVydFxuXG5cbiAgLy8gQUxFUlQgTk8gQ09ORkxJQ1RcbiAgLy8gPT09PT09PT09PT09PT09PT1cblxuICAkLmZuLmFsZXJ0Lm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJC5mbi5hbGVydCA9IG9sZFxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuXG4gIC8vIEFMRVJUIERBVEEtQVBJXG4gIC8vID09PT09PT09PT09PT09XG5cbiAgJChkb2N1bWVudCkub24oJ2NsaWNrLmJzLmFsZXJ0LmRhdGEtYXBpJywgZGlzbWlzcywgQWxlcnQucHJvdG90eXBlLmNsb3NlKVxuXG59KGpRdWVyeSk7XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQm9vdHN0cmFwOiBidXR0b24uanMgdjMuMy43XG4gKiBodHRwOi8vZ2V0Ym9vdHN0cmFwLmNvbS9qYXZhc2NyaXB0LyNidXR0b25zXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvcHlyaWdodCAyMDExLTIwMTYgVHdpdHRlciwgSW5jLlxuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG5cbitmdW5jdGlvbiAoJCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gQlVUVE9OIFBVQkxJQyBDTEFTUyBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIHZhciBCdXR0b24gPSBmdW5jdGlvbiAoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMuJGVsZW1lbnQgID0gJChlbGVtZW50KVxuICAgIHRoaXMub3B0aW9ucyAgID0gJC5leHRlbmQoe30sIEJ1dHRvbi5ERUZBVUxUUywgb3B0aW9ucylcbiAgICB0aGlzLmlzTG9hZGluZyA9IGZhbHNlXG4gIH1cblxuICBCdXR0b24uVkVSU0lPTiAgPSAnMy4zLjcnXG5cbiAgQnV0dG9uLkRFRkFVTFRTID0ge1xuICAgIGxvYWRpbmdUZXh0OiAnbG9hZGluZy4uLidcbiAgfVxuXG4gIEJ1dHRvbi5wcm90b3R5cGUuc2V0U3RhdGUgPSBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICB2YXIgZCAgICA9ICdkaXNhYmxlZCdcbiAgICB2YXIgJGVsICA9IHRoaXMuJGVsZW1lbnRcbiAgICB2YXIgdmFsICA9ICRlbC5pcygnaW5wdXQnKSA/ICd2YWwnIDogJ2h0bWwnXG4gICAgdmFyIGRhdGEgPSAkZWwuZGF0YSgpXG5cbiAgICBzdGF0ZSArPSAnVGV4dCdcblxuICAgIGlmIChkYXRhLnJlc2V0VGV4dCA9PSBudWxsKSAkZWwuZGF0YSgncmVzZXRUZXh0JywgJGVsW3ZhbF0oKSlcblxuICAgIC8vIHB1c2ggdG8gZXZlbnQgbG9vcCB0byBhbGxvdyBmb3JtcyB0byBzdWJtaXRcbiAgICBzZXRUaW1lb3V0KCQucHJveHkoZnVuY3Rpb24gKCkge1xuICAgICAgJGVsW3ZhbF0oZGF0YVtzdGF0ZV0gPT0gbnVsbCA/IHRoaXMub3B0aW9uc1tzdGF0ZV0gOiBkYXRhW3N0YXRlXSlcblxuICAgICAgaWYgKHN0YXRlID09ICdsb2FkaW5nVGV4dCcpIHtcbiAgICAgICAgdGhpcy5pc0xvYWRpbmcgPSB0cnVlXG4gICAgICAgICRlbC5hZGRDbGFzcyhkKS5hdHRyKGQsIGQpLnByb3AoZCwgdHJ1ZSlcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5pc0xvYWRpbmcpIHtcbiAgICAgICAgdGhpcy5pc0xvYWRpbmcgPSBmYWxzZVxuICAgICAgICAkZWwucmVtb3ZlQ2xhc3MoZCkucmVtb3ZlQXR0cihkKS5wcm9wKGQsIGZhbHNlKVxuICAgICAgfVxuICAgIH0sIHRoaXMpLCAwKVxuICB9XG5cbiAgQnV0dG9uLnByb3RvdHlwZS50b2dnbGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGNoYW5nZWQgPSB0cnVlXG4gICAgdmFyICRwYXJlbnQgPSB0aGlzLiRlbGVtZW50LmNsb3Nlc3QoJ1tkYXRhLXRvZ2dsZT1cImJ1dHRvbnNcIl0nKVxuXG4gICAgaWYgKCRwYXJlbnQubGVuZ3RoKSB7XG4gICAgICB2YXIgJGlucHV0ID0gdGhpcy4kZWxlbWVudC5maW5kKCdpbnB1dCcpXG4gICAgICBpZiAoJGlucHV0LnByb3AoJ3R5cGUnKSA9PSAncmFkaW8nKSB7XG4gICAgICAgIGlmICgkaW5wdXQucHJvcCgnY2hlY2tlZCcpKSBjaGFuZ2VkID0gZmFsc2VcbiAgICAgICAgJHBhcmVudC5maW5kKCcuYWN0aXZlJykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpXG4gICAgICAgIHRoaXMuJGVsZW1lbnQuYWRkQ2xhc3MoJ2FjdGl2ZScpXG4gICAgICB9IGVsc2UgaWYgKCRpbnB1dC5wcm9wKCd0eXBlJykgPT0gJ2NoZWNrYm94Jykge1xuICAgICAgICBpZiAoKCRpbnB1dC5wcm9wKCdjaGVja2VkJykpICE9PSB0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdhY3RpdmUnKSkgY2hhbmdlZCA9IGZhbHNlXG4gICAgICAgIHRoaXMuJGVsZW1lbnQudG9nZ2xlQ2xhc3MoJ2FjdGl2ZScpXG4gICAgICB9XG4gICAgICAkaW5wdXQucHJvcCgnY2hlY2tlZCcsIHRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2FjdGl2ZScpKVxuICAgICAgaWYgKGNoYW5nZWQpICRpbnB1dC50cmlnZ2VyKCdjaGFuZ2UnKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLiRlbGVtZW50LmF0dHIoJ2FyaWEtcHJlc3NlZCcsICF0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdhY3RpdmUnKSlcbiAgICAgIHRoaXMuJGVsZW1lbnQudG9nZ2xlQ2xhc3MoJ2FjdGl2ZScpXG4gICAgfVxuICB9XG5cblxuICAvLyBCVVRUT04gUExVR0lOIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgZnVuY3Rpb24gUGx1Z2luKG9wdGlvbikge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICR0aGlzICAgPSAkKHRoaXMpXG4gICAgICB2YXIgZGF0YSAgICA9ICR0aGlzLmRhdGEoJ2JzLmJ1dHRvbicpXG4gICAgICB2YXIgb3B0aW9ucyA9IHR5cGVvZiBvcHRpb24gPT0gJ29iamVjdCcgJiYgb3B0aW9uXG5cbiAgICAgIGlmICghZGF0YSkgJHRoaXMuZGF0YSgnYnMuYnV0dG9uJywgKGRhdGEgPSBuZXcgQnV0dG9uKHRoaXMsIG9wdGlvbnMpKSlcblxuICAgICAgaWYgKG9wdGlvbiA9PSAndG9nZ2xlJykgZGF0YS50b2dnbGUoKVxuICAgICAgZWxzZSBpZiAob3B0aW9uKSBkYXRhLnNldFN0YXRlKG9wdGlvbilcbiAgICB9KVxuICB9XG5cbiAgdmFyIG9sZCA9ICQuZm4uYnV0dG9uXG5cbiAgJC5mbi5idXR0b24gICAgICAgICAgICAgPSBQbHVnaW5cbiAgJC5mbi5idXR0b24uQ29uc3RydWN0b3IgPSBCdXR0b25cblxuXG4gIC8vIEJVVFRPTiBOTyBDT05GTElDVFxuICAvLyA9PT09PT09PT09PT09PT09PT1cblxuICAkLmZuLmJ1dHRvbi5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm4uYnV0dG9uID0gb2xkXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG5cbiAgLy8gQlVUVE9OIERBVEEtQVBJXG4gIC8vID09PT09PT09PT09PT09PVxuXG4gICQoZG9jdW1lbnQpXG4gICAgLm9uKCdjbGljay5icy5idXR0b24uZGF0YS1hcGknLCAnW2RhdGEtdG9nZ2xlXj1cImJ1dHRvblwiXScsIGZ1bmN0aW9uIChlKSB7XG4gICAgICB2YXIgJGJ0biA9ICQoZS50YXJnZXQpLmNsb3Nlc3QoJy5idG4nKVxuICAgICAgUGx1Z2luLmNhbGwoJGJ0biwgJ3RvZ2dsZScpXG4gICAgICBpZiAoISgkKGUudGFyZ2V0KS5pcygnaW5wdXRbdHlwZT1cInJhZGlvXCJdLCBpbnB1dFt0eXBlPVwiY2hlY2tib3hcIl0nKSkpIHtcbiAgICAgICAgLy8gUHJldmVudCBkb3VibGUgY2xpY2sgb24gcmFkaW9zLCBhbmQgdGhlIGRvdWJsZSBzZWxlY3Rpb25zIChzbyBjYW5jZWxsYXRpb24pIG9uIGNoZWNrYm94ZXNcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgIC8vIFRoZSB0YXJnZXQgY29tcG9uZW50IHN0aWxsIHJlY2VpdmUgdGhlIGZvY3VzXG4gICAgICAgIGlmICgkYnRuLmlzKCdpbnB1dCxidXR0b24nKSkgJGJ0bi50cmlnZ2VyKCdmb2N1cycpXG4gICAgICAgIGVsc2UgJGJ0bi5maW5kKCdpbnB1dDp2aXNpYmxlLGJ1dHRvbjp2aXNpYmxlJykuZmlyc3QoKS50cmlnZ2VyKCdmb2N1cycpXG4gICAgICB9XG4gICAgfSlcbiAgICAub24oJ2ZvY3VzLmJzLmJ1dHRvbi5kYXRhLWFwaSBibHVyLmJzLmJ1dHRvbi5kYXRhLWFwaScsICdbZGF0YS10b2dnbGVePVwiYnV0dG9uXCJdJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICQoZS50YXJnZXQpLmNsb3Nlc3QoJy5idG4nKS50b2dnbGVDbGFzcygnZm9jdXMnLCAvXmZvY3VzKGluKT8kLy50ZXN0KGUudHlwZSkpXG4gICAgfSlcblxufShqUXVlcnkpO1xuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEJvb3RzdHJhcDogY2Fyb3VzZWwuanMgdjMuMy43XG4gKiBodHRwOi8vZ2V0Ym9vdHN0cmFwLmNvbS9qYXZhc2NyaXB0LyNjYXJvdXNlbFxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb3B5cmlnaHQgMjAxMS0yMDE2IFR3aXR0ZXIsIEluYy5cbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuXG4rZnVuY3Rpb24gKCQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIENBUk9VU0VMIENMQVNTIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIHZhciBDYXJvdXNlbCA9IGZ1bmN0aW9uIChlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy4kZWxlbWVudCAgICA9ICQoZWxlbWVudClcbiAgICB0aGlzLiRpbmRpY2F0b3JzID0gdGhpcy4kZWxlbWVudC5maW5kKCcuY2Fyb3VzZWwtaW5kaWNhdG9ycycpXG4gICAgdGhpcy5vcHRpb25zICAgICA9IG9wdGlvbnNcbiAgICB0aGlzLnBhdXNlZCAgICAgID0gbnVsbFxuICAgIHRoaXMuc2xpZGluZyAgICAgPSBudWxsXG4gICAgdGhpcy5pbnRlcnZhbCAgICA9IG51bGxcbiAgICB0aGlzLiRhY3RpdmUgICAgID0gbnVsbFxuICAgIHRoaXMuJGl0ZW1zICAgICAgPSBudWxsXG5cbiAgICB0aGlzLm9wdGlvbnMua2V5Ym9hcmQgJiYgdGhpcy4kZWxlbWVudC5vbigna2V5ZG93bi5icy5jYXJvdXNlbCcsICQucHJveHkodGhpcy5rZXlkb3duLCB0aGlzKSlcblxuICAgIHRoaXMub3B0aW9ucy5wYXVzZSA9PSAnaG92ZXInICYmICEoJ29udG91Y2hzdGFydCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSAmJiB0aGlzLiRlbGVtZW50XG4gICAgICAub24oJ21vdXNlZW50ZXIuYnMuY2Fyb3VzZWwnLCAkLnByb3h5KHRoaXMucGF1c2UsIHRoaXMpKVxuICAgICAgLm9uKCdtb3VzZWxlYXZlLmJzLmNhcm91c2VsJywgJC5wcm94eSh0aGlzLmN5Y2xlLCB0aGlzKSlcbiAgfVxuXG4gIENhcm91c2VsLlZFUlNJT04gID0gJzMuMy43J1xuXG4gIENhcm91c2VsLlRSQU5TSVRJT05fRFVSQVRJT04gPSA2MDBcblxuICBDYXJvdXNlbC5ERUZBVUxUUyA9IHtcbiAgICBpbnRlcnZhbDogNTAwMCxcbiAgICBwYXVzZTogJ2hvdmVyJyxcbiAgICB3cmFwOiB0cnVlLFxuICAgIGtleWJvYXJkOiB0cnVlXG4gIH1cblxuICBDYXJvdXNlbC5wcm90b3R5cGUua2V5ZG93biA9IGZ1bmN0aW9uIChlKSB7XG4gICAgaWYgKC9pbnB1dHx0ZXh0YXJlYS9pLnRlc3QoZS50YXJnZXQudGFnTmFtZSkpIHJldHVyblxuICAgIHN3aXRjaCAoZS53aGljaCkge1xuICAgICAgY2FzZSAzNzogdGhpcy5wcmV2KCk7IGJyZWFrXG4gICAgICBjYXNlIDM5OiB0aGlzLm5leHQoKTsgYnJlYWtcbiAgICAgIGRlZmF1bHQ6IHJldHVyblxuICAgIH1cblxuICAgIGUucHJldmVudERlZmF1bHQoKVxuICB9XG5cbiAgQ2Fyb3VzZWwucHJvdG90eXBlLmN5Y2xlID0gZnVuY3Rpb24gKGUpIHtcbiAgICBlIHx8ICh0aGlzLnBhdXNlZCA9IGZhbHNlKVxuXG4gICAgdGhpcy5pbnRlcnZhbCAmJiBjbGVhckludGVydmFsKHRoaXMuaW50ZXJ2YWwpXG5cbiAgICB0aGlzLm9wdGlvbnMuaW50ZXJ2YWxcbiAgICAgICYmICF0aGlzLnBhdXNlZFxuICAgICAgJiYgKHRoaXMuaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgkLnByb3h5KHRoaXMubmV4dCwgdGhpcyksIHRoaXMub3B0aW9ucy5pbnRlcnZhbCkpXG5cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgQ2Fyb3VzZWwucHJvdG90eXBlLmdldEl0ZW1JbmRleCA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgdGhpcy4kaXRlbXMgPSBpdGVtLnBhcmVudCgpLmNoaWxkcmVuKCcuaXRlbScpXG4gICAgcmV0dXJuIHRoaXMuJGl0ZW1zLmluZGV4KGl0ZW0gfHwgdGhpcy4kYWN0aXZlKVxuICB9XG5cbiAgQ2Fyb3VzZWwucHJvdG90eXBlLmdldEl0ZW1Gb3JEaXJlY3Rpb24gPSBmdW5jdGlvbiAoZGlyZWN0aW9uLCBhY3RpdmUpIHtcbiAgICB2YXIgYWN0aXZlSW5kZXggPSB0aGlzLmdldEl0ZW1JbmRleChhY3RpdmUpXG4gICAgdmFyIHdpbGxXcmFwID0gKGRpcmVjdGlvbiA9PSAncHJldicgJiYgYWN0aXZlSW5kZXggPT09IDApXG4gICAgICAgICAgICAgICAgfHwgKGRpcmVjdGlvbiA9PSAnbmV4dCcgJiYgYWN0aXZlSW5kZXggPT0gKHRoaXMuJGl0ZW1zLmxlbmd0aCAtIDEpKVxuICAgIGlmICh3aWxsV3JhcCAmJiAhdGhpcy5vcHRpb25zLndyYXApIHJldHVybiBhY3RpdmVcbiAgICB2YXIgZGVsdGEgPSBkaXJlY3Rpb24gPT0gJ3ByZXYnID8gLTEgOiAxXG4gICAgdmFyIGl0ZW1JbmRleCA9IChhY3RpdmVJbmRleCArIGRlbHRhKSAlIHRoaXMuJGl0ZW1zLmxlbmd0aFxuICAgIHJldHVybiB0aGlzLiRpdGVtcy5lcShpdGVtSW5kZXgpXG4gIH1cblxuICBDYXJvdXNlbC5wcm90b3R5cGUudG8gPSBmdW5jdGlvbiAocG9zKSB7XG4gICAgdmFyIHRoYXQgICAgICAgID0gdGhpc1xuICAgIHZhciBhY3RpdmVJbmRleCA9IHRoaXMuZ2V0SXRlbUluZGV4KHRoaXMuJGFjdGl2ZSA9IHRoaXMuJGVsZW1lbnQuZmluZCgnLml0ZW0uYWN0aXZlJykpXG5cbiAgICBpZiAocG9zID4gKHRoaXMuJGl0ZW1zLmxlbmd0aCAtIDEpIHx8IHBvcyA8IDApIHJldHVyblxuXG4gICAgaWYgKHRoaXMuc2xpZGluZykgICAgICAgcmV0dXJuIHRoaXMuJGVsZW1lbnQub25lKCdzbGlkLmJzLmNhcm91c2VsJywgZnVuY3Rpb24gKCkgeyB0aGF0LnRvKHBvcykgfSkgLy8geWVzLCBcInNsaWRcIlxuICAgIGlmIChhY3RpdmVJbmRleCA9PSBwb3MpIHJldHVybiB0aGlzLnBhdXNlKCkuY3ljbGUoKVxuXG4gICAgcmV0dXJuIHRoaXMuc2xpZGUocG9zID4gYWN0aXZlSW5kZXggPyAnbmV4dCcgOiAncHJldicsIHRoaXMuJGl0ZW1zLmVxKHBvcykpXG4gIH1cblxuICBDYXJvdXNlbC5wcm90b3R5cGUucGF1c2UgPSBmdW5jdGlvbiAoZSkge1xuICAgIGUgfHwgKHRoaXMucGF1c2VkID0gdHJ1ZSlcblxuICAgIGlmICh0aGlzLiRlbGVtZW50LmZpbmQoJy5uZXh0LCAucHJldicpLmxlbmd0aCAmJiAkLnN1cHBvcnQudHJhbnNpdGlvbikge1xuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCQuc3VwcG9ydC50cmFuc2l0aW9uLmVuZClcbiAgICAgIHRoaXMuY3ljbGUodHJ1ZSlcbiAgICB9XG5cbiAgICB0aGlzLmludGVydmFsID0gY2xlYXJJbnRlcnZhbCh0aGlzLmludGVydmFsKVxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIENhcm91c2VsLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLnNsaWRpbmcpIHJldHVyblxuICAgIHJldHVybiB0aGlzLnNsaWRlKCduZXh0JylcbiAgfVxuXG4gIENhcm91c2VsLnByb3RvdHlwZS5wcmV2ID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLnNsaWRpbmcpIHJldHVyblxuICAgIHJldHVybiB0aGlzLnNsaWRlKCdwcmV2JylcbiAgfVxuXG4gIENhcm91c2VsLnByb3RvdHlwZS5zbGlkZSA9IGZ1bmN0aW9uICh0eXBlLCBuZXh0KSB7XG4gICAgdmFyICRhY3RpdmUgICA9IHRoaXMuJGVsZW1lbnQuZmluZCgnLml0ZW0uYWN0aXZlJylcbiAgICB2YXIgJG5leHQgICAgID0gbmV4dCB8fCB0aGlzLmdldEl0ZW1Gb3JEaXJlY3Rpb24odHlwZSwgJGFjdGl2ZSlcbiAgICB2YXIgaXNDeWNsaW5nID0gdGhpcy5pbnRlcnZhbFxuICAgIHZhciBkaXJlY3Rpb24gPSB0eXBlID09ICduZXh0JyA/ICdsZWZ0JyA6ICdyaWdodCdcbiAgICB2YXIgdGhhdCAgICAgID0gdGhpc1xuXG4gICAgaWYgKCRuZXh0Lmhhc0NsYXNzKCdhY3RpdmUnKSkgcmV0dXJuICh0aGlzLnNsaWRpbmcgPSBmYWxzZSlcblxuICAgIHZhciByZWxhdGVkVGFyZ2V0ID0gJG5leHRbMF1cbiAgICB2YXIgc2xpZGVFdmVudCA9ICQuRXZlbnQoJ3NsaWRlLmJzLmNhcm91c2VsJywge1xuICAgICAgcmVsYXRlZFRhcmdldDogcmVsYXRlZFRhcmdldCxcbiAgICAgIGRpcmVjdGlvbjogZGlyZWN0aW9uXG4gICAgfSlcbiAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoc2xpZGVFdmVudClcbiAgICBpZiAoc2xpZGVFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgcmV0dXJuXG5cbiAgICB0aGlzLnNsaWRpbmcgPSB0cnVlXG5cbiAgICBpc0N5Y2xpbmcgJiYgdGhpcy5wYXVzZSgpXG5cbiAgICBpZiAodGhpcy4kaW5kaWNhdG9ycy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuJGluZGljYXRvcnMuZmluZCgnLmFjdGl2ZScpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKVxuICAgICAgdmFyICRuZXh0SW5kaWNhdG9yID0gJCh0aGlzLiRpbmRpY2F0b3JzLmNoaWxkcmVuKClbdGhpcy5nZXRJdGVtSW5kZXgoJG5leHQpXSlcbiAgICAgICRuZXh0SW5kaWNhdG9yICYmICRuZXh0SW5kaWNhdG9yLmFkZENsYXNzKCdhY3RpdmUnKVxuICAgIH1cblxuICAgIHZhciBzbGlkRXZlbnQgPSAkLkV2ZW50KCdzbGlkLmJzLmNhcm91c2VsJywgeyByZWxhdGVkVGFyZ2V0OiByZWxhdGVkVGFyZ2V0LCBkaXJlY3Rpb246IGRpcmVjdGlvbiB9KSAvLyB5ZXMsIFwic2xpZFwiXG4gICAgaWYgKCQuc3VwcG9ydC50cmFuc2l0aW9uICYmIHRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ3NsaWRlJykpIHtcbiAgICAgICRuZXh0LmFkZENsYXNzKHR5cGUpXG4gICAgICAkbmV4dFswXS5vZmZzZXRXaWR0aCAvLyBmb3JjZSByZWZsb3dcbiAgICAgICRhY3RpdmUuYWRkQ2xhc3MoZGlyZWN0aW9uKVxuICAgICAgJG5leHQuYWRkQ2xhc3MoZGlyZWN0aW9uKVxuICAgICAgJGFjdGl2ZVxuICAgICAgICAub25lKCdic1RyYW5zaXRpb25FbmQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgJG5leHQucmVtb3ZlQ2xhc3MoW3R5cGUsIGRpcmVjdGlvbl0uam9pbignICcpKS5hZGRDbGFzcygnYWN0aXZlJylcbiAgICAgICAgICAkYWN0aXZlLnJlbW92ZUNsYXNzKFsnYWN0aXZlJywgZGlyZWN0aW9uXS5qb2luKCcgJykpXG4gICAgICAgICAgdGhhdC5zbGlkaW5nID0gZmFsc2VcbiAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoYXQuJGVsZW1lbnQudHJpZ2dlcihzbGlkRXZlbnQpXG4gICAgICAgICAgfSwgMClcbiAgICAgICAgfSlcbiAgICAgICAgLmVtdWxhdGVUcmFuc2l0aW9uRW5kKENhcm91c2VsLlRSQU5TSVRJT05fRFVSQVRJT04pXG4gICAgfSBlbHNlIHtcbiAgICAgICRhY3RpdmUucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpXG4gICAgICAkbmV4dC5hZGRDbGFzcygnYWN0aXZlJylcbiAgICAgIHRoaXMuc2xpZGluZyA9IGZhbHNlXG4gICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoc2xpZEV2ZW50KVxuICAgIH1cblxuICAgIGlzQ3ljbGluZyAmJiB0aGlzLmN5Y2xlKClcblxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuXG4gIC8vIENBUk9VU0VMIFBMVUdJTiBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgZnVuY3Rpb24gUGx1Z2luKG9wdGlvbikge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICR0aGlzICAgPSAkKHRoaXMpXG4gICAgICB2YXIgZGF0YSAgICA9ICR0aGlzLmRhdGEoJ2JzLmNhcm91c2VsJylcbiAgICAgIHZhciBvcHRpb25zID0gJC5leHRlbmQoe30sIENhcm91c2VsLkRFRkFVTFRTLCAkdGhpcy5kYXRhKCksIHR5cGVvZiBvcHRpb24gPT0gJ29iamVjdCcgJiYgb3B0aW9uKVxuICAgICAgdmFyIGFjdGlvbiAgPSB0eXBlb2Ygb3B0aW9uID09ICdzdHJpbmcnID8gb3B0aW9uIDogb3B0aW9ucy5zbGlkZVxuXG4gICAgICBpZiAoIWRhdGEpICR0aGlzLmRhdGEoJ2JzLmNhcm91c2VsJywgKGRhdGEgPSBuZXcgQ2Fyb3VzZWwodGhpcywgb3B0aW9ucykpKVxuICAgICAgaWYgKHR5cGVvZiBvcHRpb24gPT0gJ251bWJlcicpIGRhdGEudG8ob3B0aW9uKVxuICAgICAgZWxzZSBpZiAoYWN0aW9uKSBkYXRhW2FjdGlvbl0oKVxuICAgICAgZWxzZSBpZiAob3B0aW9ucy5pbnRlcnZhbCkgZGF0YS5wYXVzZSgpLmN5Y2xlKClcbiAgICB9KVxuICB9XG5cbiAgdmFyIG9sZCA9ICQuZm4uY2Fyb3VzZWxcblxuICAkLmZuLmNhcm91c2VsICAgICAgICAgICAgID0gUGx1Z2luXG4gICQuZm4uY2Fyb3VzZWwuQ29uc3RydWN0b3IgPSBDYXJvdXNlbFxuXG5cbiAgLy8gQ0FST1VTRUwgTk8gQ09ORkxJQ1RcbiAgLy8gPT09PT09PT09PT09PT09PT09PT1cblxuICAkLmZuLmNhcm91c2VsLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJC5mbi5jYXJvdXNlbCA9IG9sZFxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuXG4gIC8vIENBUk9VU0VMIERBVEEtQVBJXG4gIC8vID09PT09PT09PT09PT09PT09XG5cbiAgdmFyIGNsaWNrSGFuZGxlciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgdmFyIGhyZWZcbiAgICB2YXIgJHRoaXMgICA9ICQodGhpcylcbiAgICB2YXIgJHRhcmdldCA9ICQoJHRoaXMuYXR0cignZGF0YS10YXJnZXQnKSB8fCAoaHJlZiA9ICR0aGlzLmF0dHIoJ2hyZWYnKSkgJiYgaHJlZi5yZXBsYWNlKC8uKig/PSNbXlxcc10rJCkvLCAnJykpIC8vIHN0cmlwIGZvciBpZTdcbiAgICBpZiAoISR0YXJnZXQuaGFzQ2xhc3MoJ2Nhcm91c2VsJykpIHJldHVyblxuICAgIHZhciBvcHRpb25zID0gJC5leHRlbmQoe30sICR0YXJnZXQuZGF0YSgpLCAkdGhpcy5kYXRhKCkpXG4gICAgdmFyIHNsaWRlSW5kZXggPSAkdGhpcy5hdHRyKCdkYXRhLXNsaWRlLXRvJylcbiAgICBpZiAoc2xpZGVJbmRleCkgb3B0aW9ucy5pbnRlcnZhbCA9IGZhbHNlXG5cbiAgICBQbHVnaW4uY2FsbCgkdGFyZ2V0LCBvcHRpb25zKVxuXG4gICAgaWYgKHNsaWRlSW5kZXgpIHtcbiAgICAgICR0YXJnZXQuZGF0YSgnYnMuY2Fyb3VzZWwnKS50byhzbGlkZUluZGV4KVxuICAgIH1cblxuICAgIGUucHJldmVudERlZmF1bHQoKVxuICB9XG5cbiAgJChkb2N1bWVudClcbiAgICAub24oJ2NsaWNrLmJzLmNhcm91c2VsLmRhdGEtYXBpJywgJ1tkYXRhLXNsaWRlXScsIGNsaWNrSGFuZGxlcilcbiAgICAub24oJ2NsaWNrLmJzLmNhcm91c2VsLmRhdGEtYXBpJywgJ1tkYXRhLXNsaWRlLXRvXScsIGNsaWNrSGFuZGxlcilcblxuICAkKHdpbmRvdykub24oJ2xvYWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgJCgnW2RhdGEtcmlkZT1cImNhcm91c2VsXCJdJykuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJGNhcm91c2VsID0gJCh0aGlzKVxuICAgICAgUGx1Z2luLmNhbGwoJGNhcm91c2VsLCAkY2Fyb3VzZWwuZGF0YSgpKVxuICAgIH0pXG4gIH0pXG5cbn0oalF1ZXJ5KTtcblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBCb290c3RyYXA6IGNvbGxhcHNlLmpzIHYzLjMuN1xuICogaHR0cDovL2dldGJvb3RzdHJhcC5jb20vamF2YXNjcmlwdC8jY29sbGFwc2VcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29weXJpZ2h0IDIwMTEtMjAxNiBUd2l0dGVyLCBJbmMuXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cbi8qIGpzaGludCBsYXRlZGVmOiBmYWxzZSAqL1xuXG4rZnVuY3Rpb24gKCQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIENPTExBUFNFIFBVQkxJQyBDTEFTUyBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgdmFyIENvbGxhcHNlID0gZnVuY3Rpb24gKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRlbGVtZW50ICAgICAgPSAkKGVsZW1lbnQpXG4gICAgdGhpcy5vcHRpb25zICAgICAgID0gJC5leHRlbmQoe30sIENvbGxhcHNlLkRFRkFVTFRTLCBvcHRpb25zKVxuICAgIHRoaXMuJHRyaWdnZXIgICAgICA9ICQoJ1tkYXRhLXRvZ2dsZT1cImNvbGxhcHNlXCJdW2hyZWY9XCIjJyArIGVsZW1lbnQuaWQgKyAnXCJdLCcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1tkYXRhLXRvZ2dsZT1cImNvbGxhcHNlXCJdW2RhdGEtdGFyZ2V0PVwiIycgKyBlbGVtZW50LmlkICsgJ1wiXScpXG4gICAgdGhpcy50cmFuc2l0aW9uaW5nID0gbnVsbFxuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5wYXJlbnQpIHtcbiAgICAgIHRoaXMuJHBhcmVudCA9IHRoaXMuZ2V0UGFyZW50KClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5hZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3ModGhpcy4kZWxlbWVudCwgdGhpcy4kdHJpZ2dlcilcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLnRvZ2dsZSkgdGhpcy50b2dnbGUoKVxuICB9XG5cbiAgQ29sbGFwc2UuVkVSU0lPTiAgPSAnMy4zLjcnXG5cbiAgQ29sbGFwc2UuVFJBTlNJVElPTl9EVVJBVElPTiA9IDM1MFxuXG4gIENvbGxhcHNlLkRFRkFVTFRTID0ge1xuICAgIHRvZ2dsZTogdHJ1ZVxuICB9XG5cbiAgQ29sbGFwc2UucHJvdG90eXBlLmRpbWVuc2lvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaGFzV2lkdGggPSB0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCd3aWR0aCcpXG4gICAgcmV0dXJuIGhhc1dpZHRoID8gJ3dpZHRoJyA6ICdoZWlnaHQnXG4gIH1cblxuICBDb2xsYXBzZS5wcm90b3R5cGUuc2hvdyA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy50cmFuc2l0aW9uaW5nIHx8IHRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2luJykpIHJldHVyblxuXG4gICAgdmFyIGFjdGl2ZXNEYXRhXG4gICAgdmFyIGFjdGl2ZXMgPSB0aGlzLiRwYXJlbnQgJiYgdGhpcy4kcGFyZW50LmNoaWxkcmVuKCcucGFuZWwnKS5jaGlsZHJlbignLmluLCAuY29sbGFwc2luZycpXG5cbiAgICBpZiAoYWN0aXZlcyAmJiBhY3RpdmVzLmxlbmd0aCkge1xuICAgICAgYWN0aXZlc0RhdGEgPSBhY3RpdmVzLmRhdGEoJ2JzLmNvbGxhcHNlJylcbiAgICAgIGlmIChhY3RpdmVzRGF0YSAmJiBhY3RpdmVzRGF0YS50cmFuc2l0aW9uaW5nKSByZXR1cm5cbiAgICB9XG5cbiAgICB2YXIgc3RhcnRFdmVudCA9ICQuRXZlbnQoJ3Nob3cuYnMuY29sbGFwc2UnKVxuICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcihzdGFydEV2ZW50KVxuICAgIGlmIChzdGFydEV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSByZXR1cm5cblxuICAgIGlmIChhY3RpdmVzICYmIGFjdGl2ZXMubGVuZ3RoKSB7XG4gICAgICBQbHVnaW4uY2FsbChhY3RpdmVzLCAnaGlkZScpXG4gICAgICBhY3RpdmVzRGF0YSB8fCBhY3RpdmVzLmRhdGEoJ2JzLmNvbGxhcHNlJywgbnVsbClcbiAgICB9XG5cbiAgICB2YXIgZGltZW5zaW9uID0gdGhpcy5kaW1lbnNpb24oKVxuXG4gICAgdGhpcy4kZWxlbWVudFxuICAgICAgLnJlbW92ZUNsYXNzKCdjb2xsYXBzZScpXG4gICAgICAuYWRkQ2xhc3MoJ2NvbGxhcHNpbmcnKVtkaW1lbnNpb25dKDApXG4gICAgICAuYXR0cignYXJpYS1leHBhbmRlZCcsIHRydWUpXG5cbiAgICB0aGlzLiR0cmlnZ2VyXG4gICAgICAucmVtb3ZlQ2xhc3MoJ2NvbGxhcHNlZCcpXG4gICAgICAuYXR0cignYXJpYS1leHBhbmRlZCcsIHRydWUpXG5cbiAgICB0aGlzLnRyYW5zaXRpb25pbmcgPSAxXG5cbiAgICB2YXIgY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLiRlbGVtZW50XG4gICAgICAgIC5yZW1vdmVDbGFzcygnY29sbGFwc2luZycpXG4gICAgICAgIC5hZGRDbGFzcygnY29sbGFwc2UgaW4nKVtkaW1lbnNpb25dKCcnKVxuICAgICAgdGhpcy50cmFuc2l0aW9uaW5nID0gMFxuICAgICAgdGhpcy4kZWxlbWVudFxuICAgICAgICAudHJpZ2dlcignc2hvd24uYnMuY29sbGFwc2UnKVxuICAgIH1cblxuICAgIGlmICghJC5zdXBwb3J0LnRyYW5zaXRpb24pIHJldHVybiBjb21wbGV0ZS5jYWxsKHRoaXMpXG5cbiAgICB2YXIgc2Nyb2xsU2l6ZSA9ICQuY2FtZWxDYXNlKFsnc2Nyb2xsJywgZGltZW5zaW9uXS5qb2luKCctJykpXG5cbiAgICB0aGlzLiRlbGVtZW50XG4gICAgICAub25lKCdic1RyYW5zaXRpb25FbmQnLCAkLnByb3h5KGNvbXBsZXRlLCB0aGlzKSlcbiAgICAgIC5lbXVsYXRlVHJhbnNpdGlvbkVuZChDb2xsYXBzZS5UUkFOU0lUSU9OX0RVUkFUSU9OKVtkaW1lbnNpb25dKHRoaXMuJGVsZW1lbnRbMF1bc2Nyb2xsU2l6ZV0pXG4gIH1cblxuICBDb2xsYXBzZS5wcm90b3R5cGUuaGlkZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy50cmFuc2l0aW9uaW5nIHx8ICF0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdpbicpKSByZXR1cm5cblxuICAgIHZhciBzdGFydEV2ZW50ID0gJC5FdmVudCgnaGlkZS5icy5jb2xsYXBzZScpXG4gICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKHN0YXJ0RXZlbnQpXG4gICAgaWYgKHN0YXJ0RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHJldHVyblxuXG4gICAgdmFyIGRpbWVuc2lvbiA9IHRoaXMuZGltZW5zaW9uKClcblxuICAgIHRoaXMuJGVsZW1lbnRbZGltZW5zaW9uXSh0aGlzLiRlbGVtZW50W2RpbWVuc2lvbl0oKSlbMF0ub2Zmc2V0SGVpZ2h0XG5cbiAgICB0aGlzLiRlbGVtZW50XG4gICAgICAuYWRkQ2xhc3MoJ2NvbGxhcHNpbmcnKVxuICAgICAgLnJlbW92ZUNsYXNzKCdjb2xsYXBzZSBpbicpXG4gICAgICAuYXR0cignYXJpYS1leHBhbmRlZCcsIGZhbHNlKVxuXG4gICAgdGhpcy4kdHJpZ2dlclxuICAgICAgLmFkZENsYXNzKCdjb2xsYXBzZWQnKVxuICAgICAgLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCBmYWxzZSlcblxuICAgIHRoaXMudHJhbnNpdGlvbmluZyA9IDFcblxuICAgIHZhciBjb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMudHJhbnNpdGlvbmluZyA9IDBcbiAgICAgIHRoaXMuJGVsZW1lbnRcbiAgICAgICAgLnJlbW92ZUNsYXNzKCdjb2xsYXBzaW5nJylcbiAgICAgICAgLmFkZENsYXNzKCdjb2xsYXBzZScpXG4gICAgICAgIC50cmlnZ2VyKCdoaWRkZW4uYnMuY29sbGFwc2UnKVxuICAgIH1cblxuICAgIGlmICghJC5zdXBwb3J0LnRyYW5zaXRpb24pIHJldHVybiBjb21wbGV0ZS5jYWxsKHRoaXMpXG5cbiAgICB0aGlzLiRlbGVtZW50XG4gICAgICBbZGltZW5zaW9uXSgwKVxuICAgICAgLm9uZSgnYnNUcmFuc2l0aW9uRW5kJywgJC5wcm94eShjb21wbGV0ZSwgdGhpcykpXG4gICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQoQ29sbGFwc2UuVFJBTlNJVElPTl9EVVJBVElPTilcbiAgfVxuXG4gIENvbGxhcHNlLnByb3RvdHlwZS50b2dnbGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpc1t0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdpbicpID8gJ2hpZGUnIDogJ3Nob3cnXSgpXG4gIH1cblxuICBDb2xsYXBzZS5wcm90b3R5cGUuZ2V0UGFyZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAkKHRoaXMub3B0aW9ucy5wYXJlbnQpXG4gICAgICAuZmluZCgnW2RhdGEtdG9nZ2xlPVwiY29sbGFwc2VcIl1bZGF0YS1wYXJlbnQ9XCInICsgdGhpcy5vcHRpb25zLnBhcmVudCArICdcIl0nKVxuICAgICAgLmVhY2goJC5wcm94eShmdW5jdGlvbiAoaSwgZWxlbWVudCkge1xuICAgICAgICB2YXIgJGVsZW1lbnQgPSAkKGVsZW1lbnQpXG4gICAgICAgIHRoaXMuYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzKGdldFRhcmdldEZyb21UcmlnZ2VyKCRlbGVtZW50KSwgJGVsZW1lbnQpXG4gICAgICB9LCB0aGlzKSlcbiAgICAgIC5lbmQoKVxuICB9XG5cbiAgQ29sbGFwc2UucHJvdG90eXBlLmFkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyA9IGZ1bmN0aW9uICgkZWxlbWVudCwgJHRyaWdnZXIpIHtcbiAgICB2YXIgaXNPcGVuID0gJGVsZW1lbnQuaGFzQ2xhc3MoJ2luJylcblxuICAgICRlbGVtZW50LmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCBpc09wZW4pXG4gICAgJHRyaWdnZXJcbiAgICAgIC50b2dnbGVDbGFzcygnY29sbGFwc2VkJywgIWlzT3BlbilcbiAgICAgIC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgaXNPcGVuKVxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0VGFyZ2V0RnJvbVRyaWdnZXIoJHRyaWdnZXIpIHtcbiAgICB2YXIgaHJlZlxuICAgIHZhciB0YXJnZXQgPSAkdHJpZ2dlci5hdHRyKCdkYXRhLXRhcmdldCcpXG4gICAgICB8fCAoaHJlZiA9ICR0cmlnZ2VyLmF0dHIoJ2hyZWYnKSkgJiYgaHJlZi5yZXBsYWNlKC8uKig/PSNbXlxcc10rJCkvLCAnJykgLy8gc3RyaXAgZm9yIGllN1xuXG4gICAgcmV0dXJuICQodGFyZ2V0KVxuICB9XG5cblxuICAvLyBDT0xMQVBTRSBQTFVHSU4gREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIGZ1bmN0aW9uIFBsdWdpbihvcHRpb24pIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGhpcyAgID0gJCh0aGlzKVxuICAgICAgdmFyIGRhdGEgICAgPSAkdGhpcy5kYXRhKCdicy5jb2xsYXBzZScpXG4gICAgICB2YXIgb3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBDb2xsYXBzZS5ERUZBVUxUUywgJHRoaXMuZGF0YSgpLCB0eXBlb2Ygb3B0aW9uID09ICdvYmplY3QnICYmIG9wdGlvbilcblxuICAgICAgaWYgKCFkYXRhICYmIG9wdGlvbnMudG9nZ2xlICYmIC9zaG93fGhpZGUvLnRlc3Qob3B0aW9uKSkgb3B0aW9ucy50b2dnbGUgPSBmYWxzZVxuICAgICAgaWYgKCFkYXRhKSAkdGhpcy5kYXRhKCdicy5jb2xsYXBzZScsIChkYXRhID0gbmV3IENvbGxhcHNlKHRoaXMsIG9wdGlvbnMpKSlcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9uID09ICdzdHJpbmcnKSBkYXRhW29wdGlvbl0oKVxuICAgIH0pXG4gIH1cblxuICB2YXIgb2xkID0gJC5mbi5jb2xsYXBzZVxuXG4gICQuZm4uY29sbGFwc2UgICAgICAgICAgICAgPSBQbHVnaW5cbiAgJC5mbi5jb2xsYXBzZS5Db25zdHJ1Y3RvciA9IENvbGxhcHNlXG5cblxuICAvLyBDT0xMQVBTRSBOTyBDT05GTElDVFxuICAvLyA9PT09PT09PT09PT09PT09PT09PVxuXG4gICQuZm4uY29sbGFwc2Uubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuLmNvbGxhcHNlID0gb2xkXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG5cbiAgLy8gQ09MTEFQU0UgREFUQS1BUElcbiAgLy8gPT09PT09PT09PT09PT09PT1cblxuICAkKGRvY3VtZW50KS5vbignY2xpY2suYnMuY29sbGFwc2UuZGF0YS1hcGknLCAnW2RhdGEtdG9nZ2xlPVwiY29sbGFwc2VcIl0nLCBmdW5jdGlvbiAoZSkge1xuICAgIHZhciAkdGhpcyAgID0gJCh0aGlzKVxuXG4gICAgaWYgKCEkdGhpcy5hdHRyKCdkYXRhLXRhcmdldCcpKSBlLnByZXZlbnREZWZhdWx0KClcblxuICAgIHZhciAkdGFyZ2V0ID0gZ2V0VGFyZ2V0RnJvbVRyaWdnZXIoJHRoaXMpXG4gICAgdmFyIGRhdGEgICAgPSAkdGFyZ2V0LmRhdGEoJ2JzLmNvbGxhcHNlJylcbiAgICB2YXIgb3B0aW9uICA9IGRhdGEgPyAndG9nZ2xlJyA6ICR0aGlzLmRhdGEoKVxuXG4gICAgUGx1Z2luLmNhbGwoJHRhcmdldCwgb3B0aW9uKVxuICB9KVxuXG59KGpRdWVyeSk7XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQm9vdHN0cmFwOiBkcm9wZG93bi5qcyB2My4zLjdcbiAqIGh0dHA6Ly9nZXRib290c3RyYXAuY29tL2phdmFzY3JpcHQvI2Ryb3Bkb3duc1xuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb3B5cmlnaHQgMjAxMS0yMDE2IFR3aXR0ZXIsIEluYy5cbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuXG4rZnVuY3Rpb24gKCQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIERST1BET1dOIENMQVNTIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIHZhciBiYWNrZHJvcCA9ICcuZHJvcGRvd24tYmFja2Ryb3AnXG4gIHZhciB0b2dnbGUgICA9ICdbZGF0YS10b2dnbGU9XCJkcm9wZG93blwiXSdcbiAgdmFyIERyb3Bkb3duID0gZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAkKGVsZW1lbnQpLm9uKCdjbGljay5icy5kcm9wZG93bicsIHRoaXMudG9nZ2xlKVxuICB9XG5cbiAgRHJvcGRvd24uVkVSU0lPTiA9ICczLjMuNydcblxuICBmdW5jdGlvbiBnZXRQYXJlbnQoJHRoaXMpIHtcbiAgICB2YXIgc2VsZWN0b3IgPSAkdGhpcy5hdHRyKCdkYXRhLXRhcmdldCcpXG5cbiAgICBpZiAoIXNlbGVjdG9yKSB7XG4gICAgICBzZWxlY3RvciA9ICR0aGlzLmF0dHIoJ2hyZWYnKVxuICAgICAgc2VsZWN0b3IgPSBzZWxlY3RvciAmJiAvI1tBLVphLXpdLy50ZXN0KHNlbGVjdG9yKSAmJiBzZWxlY3Rvci5yZXBsYWNlKC8uKig/PSNbXlxcc10qJCkvLCAnJykgLy8gc3RyaXAgZm9yIGllN1xuICAgIH1cblxuICAgIHZhciAkcGFyZW50ID0gc2VsZWN0b3IgJiYgJChzZWxlY3RvcilcblxuICAgIHJldHVybiAkcGFyZW50ICYmICRwYXJlbnQubGVuZ3RoID8gJHBhcmVudCA6ICR0aGlzLnBhcmVudCgpXG4gIH1cblxuICBmdW5jdGlvbiBjbGVhck1lbnVzKGUpIHtcbiAgICBpZiAoZSAmJiBlLndoaWNoID09PSAzKSByZXR1cm5cbiAgICAkKGJhY2tkcm9wKS5yZW1vdmUoKVxuICAgICQodG9nZ2xlKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGhpcyAgICAgICAgID0gJCh0aGlzKVxuICAgICAgdmFyICRwYXJlbnQgICAgICAgPSBnZXRQYXJlbnQoJHRoaXMpXG4gICAgICB2YXIgcmVsYXRlZFRhcmdldCA9IHsgcmVsYXRlZFRhcmdldDogdGhpcyB9XG5cbiAgICAgIGlmICghJHBhcmVudC5oYXNDbGFzcygnb3BlbicpKSByZXR1cm5cblxuICAgICAgaWYgKGUgJiYgZS50eXBlID09ICdjbGljaycgJiYgL2lucHV0fHRleHRhcmVhL2kudGVzdChlLnRhcmdldC50YWdOYW1lKSAmJiAkLmNvbnRhaW5zKCRwYXJlbnRbMF0sIGUudGFyZ2V0KSkgcmV0dXJuXG5cbiAgICAgICRwYXJlbnQudHJpZ2dlcihlID0gJC5FdmVudCgnaGlkZS5icy5kcm9wZG93bicsIHJlbGF0ZWRUYXJnZXQpKVxuXG4gICAgICBpZiAoZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgcmV0dXJuXG5cbiAgICAgICR0aGlzLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCAnZmFsc2UnKVxuICAgICAgJHBhcmVudC5yZW1vdmVDbGFzcygnb3BlbicpLnRyaWdnZXIoJC5FdmVudCgnaGlkZGVuLmJzLmRyb3Bkb3duJywgcmVsYXRlZFRhcmdldCkpXG4gICAgfSlcbiAgfVxuXG4gIERyb3Bkb3duLnByb3RvdHlwZS50b2dnbGUgPSBmdW5jdGlvbiAoZSkge1xuICAgIHZhciAkdGhpcyA9ICQodGhpcylcblxuICAgIGlmICgkdGhpcy5pcygnLmRpc2FibGVkLCA6ZGlzYWJsZWQnKSkgcmV0dXJuXG5cbiAgICB2YXIgJHBhcmVudCAgPSBnZXRQYXJlbnQoJHRoaXMpXG4gICAgdmFyIGlzQWN0aXZlID0gJHBhcmVudC5oYXNDbGFzcygnb3BlbicpXG5cbiAgICBjbGVhck1lbnVzKClcblxuICAgIGlmICghaXNBY3RpdmUpIHtcbiAgICAgIGlmICgnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgJiYgISRwYXJlbnQuY2xvc2VzdCgnLm5hdmJhci1uYXYnKS5sZW5ndGgpIHtcbiAgICAgICAgLy8gaWYgbW9iaWxlIHdlIHVzZSBhIGJhY2tkcm9wIGJlY2F1c2UgY2xpY2sgZXZlbnRzIGRvbid0IGRlbGVnYXRlXG4gICAgICAgICQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykpXG4gICAgICAgICAgLmFkZENsYXNzKCdkcm9wZG93bi1iYWNrZHJvcCcpXG4gICAgICAgICAgLmluc2VydEFmdGVyKCQodGhpcykpXG4gICAgICAgICAgLm9uKCdjbGljaycsIGNsZWFyTWVudXMpXG4gICAgICB9XG5cbiAgICAgIHZhciByZWxhdGVkVGFyZ2V0ID0geyByZWxhdGVkVGFyZ2V0OiB0aGlzIH1cbiAgICAgICRwYXJlbnQudHJpZ2dlcihlID0gJC5FdmVudCgnc2hvdy5icy5kcm9wZG93bicsIHJlbGF0ZWRUYXJnZXQpKVxuXG4gICAgICBpZiAoZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgcmV0dXJuXG5cbiAgICAgICR0aGlzXG4gICAgICAgIC50cmlnZ2VyKCdmb2N1cycpXG4gICAgICAgIC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgJ3RydWUnKVxuXG4gICAgICAkcGFyZW50XG4gICAgICAgIC50b2dnbGVDbGFzcygnb3BlbicpXG4gICAgICAgIC50cmlnZ2VyKCQuRXZlbnQoJ3Nob3duLmJzLmRyb3Bkb3duJywgcmVsYXRlZFRhcmdldCkpXG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICBEcm9wZG93bi5wcm90b3R5cGUua2V5ZG93biA9IGZ1bmN0aW9uIChlKSB7XG4gICAgaWYgKCEvKDM4fDQwfDI3fDMyKS8udGVzdChlLndoaWNoKSB8fCAvaW5wdXR8dGV4dGFyZWEvaS50ZXN0KGUudGFyZ2V0LnRhZ05hbWUpKSByZXR1cm5cblxuICAgIHZhciAkdGhpcyA9ICQodGhpcylcblxuICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgIGUuc3RvcFByb3BhZ2F0aW9uKClcblxuICAgIGlmICgkdGhpcy5pcygnLmRpc2FibGVkLCA6ZGlzYWJsZWQnKSkgcmV0dXJuXG5cbiAgICB2YXIgJHBhcmVudCAgPSBnZXRQYXJlbnQoJHRoaXMpXG4gICAgdmFyIGlzQWN0aXZlID0gJHBhcmVudC5oYXNDbGFzcygnb3BlbicpXG5cbiAgICBpZiAoIWlzQWN0aXZlICYmIGUud2hpY2ggIT0gMjcgfHwgaXNBY3RpdmUgJiYgZS53aGljaCA9PSAyNykge1xuICAgICAgaWYgKGUud2hpY2ggPT0gMjcpICRwYXJlbnQuZmluZCh0b2dnbGUpLnRyaWdnZXIoJ2ZvY3VzJylcbiAgICAgIHJldHVybiAkdGhpcy50cmlnZ2VyKCdjbGljaycpXG4gICAgfVxuXG4gICAgdmFyIGRlc2MgPSAnIGxpOm5vdCguZGlzYWJsZWQpOnZpc2libGUgYSdcbiAgICB2YXIgJGl0ZW1zID0gJHBhcmVudC5maW5kKCcuZHJvcGRvd24tbWVudScgKyBkZXNjKVxuXG4gICAgaWYgKCEkaXRlbXMubGVuZ3RoKSByZXR1cm5cblxuICAgIHZhciBpbmRleCA9ICRpdGVtcy5pbmRleChlLnRhcmdldClcblxuICAgIGlmIChlLndoaWNoID09IDM4ICYmIGluZGV4ID4gMCkgICAgICAgICAgICAgICAgIGluZGV4LS0gICAgICAgICAvLyB1cFxuICAgIGlmIChlLndoaWNoID09IDQwICYmIGluZGV4IDwgJGl0ZW1zLmxlbmd0aCAtIDEpIGluZGV4KysgICAgICAgICAvLyBkb3duXG4gICAgaWYgKCF+aW5kZXgpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXggPSAwXG5cbiAgICAkaXRlbXMuZXEoaW5kZXgpLnRyaWdnZXIoJ2ZvY3VzJylcbiAgfVxuXG5cbiAgLy8gRFJPUERPV04gUExVR0lOIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICBmdW5jdGlvbiBQbHVnaW4ob3B0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpXG4gICAgICB2YXIgZGF0YSAgPSAkdGhpcy5kYXRhKCdicy5kcm9wZG93bicpXG5cbiAgICAgIGlmICghZGF0YSkgJHRoaXMuZGF0YSgnYnMuZHJvcGRvd24nLCAoZGF0YSA9IG5ldyBEcm9wZG93bih0aGlzKSkpXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJykgZGF0YVtvcHRpb25dLmNhbGwoJHRoaXMpXG4gICAgfSlcbiAgfVxuXG4gIHZhciBvbGQgPSAkLmZuLmRyb3Bkb3duXG5cbiAgJC5mbi5kcm9wZG93biAgICAgICAgICAgICA9IFBsdWdpblxuICAkLmZuLmRyb3Bkb3duLkNvbnN0cnVjdG9yID0gRHJvcGRvd25cblxuXG4gIC8vIERST1BET1dOIE5PIENPTkZMSUNUXG4gIC8vID09PT09PT09PT09PT09PT09PT09XG5cbiAgJC5mbi5kcm9wZG93bi5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm4uZHJvcGRvd24gPSBvbGRcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cblxuICAvLyBBUFBMWSBUTyBTVEFOREFSRCBEUk9QRE9XTiBFTEVNRU5UU1xuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gICQoZG9jdW1lbnQpXG4gICAgLm9uKCdjbGljay5icy5kcm9wZG93bi5kYXRhLWFwaScsIGNsZWFyTWVudXMpXG4gICAgLm9uKCdjbGljay5icy5kcm9wZG93bi5kYXRhLWFwaScsICcuZHJvcGRvd24gZm9ybScsIGZ1bmN0aW9uIChlKSB7IGUuc3RvcFByb3BhZ2F0aW9uKCkgfSlcbiAgICAub24oJ2NsaWNrLmJzLmRyb3Bkb3duLmRhdGEtYXBpJywgdG9nZ2xlLCBEcm9wZG93bi5wcm90b3R5cGUudG9nZ2xlKVxuICAgIC5vbigna2V5ZG93bi5icy5kcm9wZG93bi5kYXRhLWFwaScsIHRvZ2dsZSwgRHJvcGRvd24ucHJvdG90eXBlLmtleWRvd24pXG4gICAgLm9uKCdrZXlkb3duLmJzLmRyb3Bkb3duLmRhdGEtYXBpJywgJy5kcm9wZG93bi1tZW51JywgRHJvcGRvd24ucHJvdG90eXBlLmtleWRvd24pXG5cbn0oalF1ZXJ5KTtcblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBCb290c3RyYXA6IG1vZGFsLmpzIHYzLjMuN1xuICogaHR0cDovL2dldGJvb3RzdHJhcC5jb20vamF2YXNjcmlwdC8jbW9kYWxzXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvcHlyaWdodCAyMDExLTIwMTYgVHdpdHRlciwgSW5jLlxuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG5cbitmdW5jdGlvbiAoJCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gTU9EQUwgQ0xBU1MgREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09XG5cbiAgdmFyIE1vZGFsID0gZnVuY3Rpb24gKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLm9wdGlvbnMgICAgICAgICAgICAgPSBvcHRpb25zXG4gICAgdGhpcy4kYm9keSAgICAgICAgICAgICAgID0gJChkb2N1bWVudC5ib2R5KVxuICAgIHRoaXMuJGVsZW1lbnQgICAgICAgICAgICA9ICQoZWxlbWVudClcbiAgICB0aGlzLiRkaWFsb2cgICAgICAgICAgICAgPSB0aGlzLiRlbGVtZW50LmZpbmQoJy5tb2RhbC1kaWFsb2cnKVxuICAgIHRoaXMuJGJhY2tkcm9wICAgICAgICAgICA9IG51bGxcbiAgICB0aGlzLmlzU2hvd24gICAgICAgICAgICAgPSBudWxsXG4gICAgdGhpcy5vcmlnaW5hbEJvZHlQYWQgICAgID0gbnVsbFxuICAgIHRoaXMuc2Nyb2xsYmFyV2lkdGggICAgICA9IDBcbiAgICB0aGlzLmlnbm9yZUJhY2tkcm9wQ2xpY2sgPSBmYWxzZVxuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5yZW1vdGUpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnRcbiAgICAgICAgLmZpbmQoJy5tb2RhbC1jb250ZW50JylcbiAgICAgICAgLmxvYWQodGhpcy5vcHRpb25zLnJlbW90ZSwgJC5wcm94eShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdsb2FkZWQuYnMubW9kYWwnKVxuICAgICAgICB9LCB0aGlzKSlcbiAgICB9XG4gIH1cblxuICBNb2RhbC5WRVJTSU9OICA9ICczLjMuNydcblxuICBNb2RhbC5UUkFOU0lUSU9OX0RVUkFUSU9OID0gMzAwXG4gIE1vZGFsLkJBQ0tEUk9QX1RSQU5TSVRJT05fRFVSQVRJT04gPSAxNTBcblxuICBNb2RhbC5ERUZBVUxUUyA9IHtcbiAgICBiYWNrZHJvcDogdHJ1ZSxcbiAgICBrZXlib2FyZDogdHJ1ZSxcbiAgICBzaG93OiB0cnVlXG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUudG9nZ2xlID0gZnVuY3Rpb24gKF9yZWxhdGVkVGFyZ2V0KSB7XG4gICAgcmV0dXJuIHRoaXMuaXNTaG93biA/IHRoaXMuaGlkZSgpIDogdGhpcy5zaG93KF9yZWxhdGVkVGFyZ2V0KVxuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLnNob3cgPSBmdW5jdGlvbiAoX3JlbGF0ZWRUYXJnZXQpIHtcbiAgICB2YXIgdGhhdCA9IHRoaXNcbiAgICB2YXIgZSAgICA9ICQuRXZlbnQoJ3Nob3cuYnMubW9kYWwnLCB7IHJlbGF0ZWRUYXJnZXQ6IF9yZWxhdGVkVGFyZ2V0IH0pXG5cbiAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoZSlcblxuICAgIGlmICh0aGlzLmlzU2hvd24gfHwgZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgcmV0dXJuXG5cbiAgICB0aGlzLmlzU2hvd24gPSB0cnVlXG5cbiAgICB0aGlzLmNoZWNrU2Nyb2xsYmFyKClcbiAgICB0aGlzLnNldFNjcm9sbGJhcigpXG4gICAgdGhpcy4kYm9keS5hZGRDbGFzcygnbW9kYWwtb3BlbicpXG5cbiAgICB0aGlzLmVzY2FwZSgpXG4gICAgdGhpcy5yZXNpemUoKVxuXG4gICAgdGhpcy4kZWxlbWVudC5vbignY2xpY2suZGlzbWlzcy5icy5tb2RhbCcsICdbZGF0YS1kaXNtaXNzPVwibW9kYWxcIl0nLCAkLnByb3h5KHRoaXMuaGlkZSwgdGhpcykpXG5cbiAgICB0aGlzLiRkaWFsb2cub24oJ21vdXNlZG93bi5kaXNtaXNzLmJzLm1vZGFsJywgZnVuY3Rpb24gKCkge1xuICAgICAgdGhhdC4kZWxlbWVudC5vbmUoJ21vdXNldXAuZGlzbWlzcy5icy5tb2RhbCcsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGlmICgkKGUudGFyZ2V0KS5pcyh0aGF0LiRlbGVtZW50KSkgdGhhdC5pZ25vcmVCYWNrZHJvcENsaWNrID0gdHJ1ZVxuICAgICAgfSlcbiAgICB9KVxuXG4gICAgdGhpcy5iYWNrZHJvcChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdHJhbnNpdGlvbiA9ICQuc3VwcG9ydC50cmFuc2l0aW9uICYmIHRoYXQuJGVsZW1lbnQuaGFzQ2xhc3MoJ2ZhZGUnKVxuXG4gICAgICBpZiAoIXRoYXQuJGVsZW1lbnQucGFyZW50KCkubGVuZ3RoKSB7XG4gICAgICAgIHRoYXQuJGVsZW1lbnQuYXBwZW5kVG8odGhhdC4kYm9keSkgLy8gZG9uJ3QgbW92ZSBtb2RhbHMgZG9tIHBvc2l0aW9uXG4gICAgICB9XG5cbiAgICAgIHRoYXQuJGVsZW1lbnRcbiAgICAgICAgLnNob3coKVxuICAgICAgICAuc2Nyb2xsVG9wKDApXG5cbiAgICAgIHRoYXQuYWRqdXN0RGlhbG9nKClcblxuICAgICAgaWYgKHRyYW5zaXRpb24pIHtcbiAgICAgICAgdGhhdC4kZWxlbWVudFswXS5vZmZzZXRXaWR0aCAvLyBmb3JjZSByZWZsb3dcbiAgICAgIH1cblxuICAgICAgdGhhdC4kZWxlbWVudC5hZGRDbGFzcygnaW4nKVxuXG4gICAgICB0aGF0LmVuZm9yY2VGb2N1cygpXG5cbiAgICAgIHZhciBlID0gJC5FdmVudCgnc2hvd24uYnMubW9kYWwnLCB7IHJlbGF0ZWRUYXJnZXQ6IF9yZWxhdGVkVGFyZ2V0IH0pXG5cbiAgICAgIHRyYW5zaXRpb24gP1xuICAgICAgICB0aGF0LiRkaWFsb2cgLy8gd2FpdCBmb3IgbW9kYWwgdG8gc2xpZGUgaW5cbiAgICAgICAgICAub25lKCdic1RyYW5zaXRpb25FbmQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGF0LiRlbGVtZW50LnRyaWdnZXIoJ2ZvY3VzJykudHJpZ2dlcihlKVxuICAgICAgICAgIH0pXG4gICAgICAgICAgLmVtdWxhdGVUcmFuc2l0aW9uRW5kKE1vZGFsLlRSQU5TSVRJT05fRFVSQVRJT04pIDpcbiAgICAgICAgdGhhdC4kZWxlbWVudC50cmlnZ2VyKCdmb2N1cycpLnRyaWdnZXIoZSlcbiAgICB9KVxuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLmhpZGUgPSBmdW5jdGlvbiAoZSkge1xuICAgIGlmIChlKSBlLnByZXZlbnREZWZhdWx0KClcblxuICAgIGUgPSAkLkV2ZW50KCdoaWRlLmJzLm1vZGFsJylcblxuICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcihlKVxuXG4gICAgaWYgKCF0aGlzLmlzU2hvd24gfHwgZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgcmV0dXJuXG5cbiAgICB0aGlzLmlzU2hvd24gPSBmYWxzZVxuXG4gICAgdGhpcy5lc2NhcGUoKVxuICAgIHRoaXMucmVzaXplKClcblxuICAgICQoZG9jdW1lbnQpLm9mZignZm9jdXNpbi5icy5tb2RhbCcpXG5cbiAgICB0aGlzLiRlbGVtZW50XG4gICAgICAucmVtb3ZlQ2xhc3MoJ2luJylcbiAgICAgIC5vZmYoJ2NsaWNrLmRpc21pc3MuYnMubW9kYWwnKVxuICAgICAgLm9mZignbW91c2V1cC5kaXNtaXNzLmJzLm1vZGFsJylcblxuICAgIHRoaXMuJGRpYWxvZy5vZmYoJ21vdXNlZG93bi5kaXNtaXNzLmJzLm1vZGFsJylcblxuICAgICQuc3VwcG9ydC50cmFuc2l0aW9uICYmIHRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2ZhZGUnKSA/XG4gICAgICB0aGlzLiRlbGVtZW50XG4gICAgICAgIC5vbmUoJ2JzVHJhbnNpdGlvbkVuZCcsICQucHJveHkodGhpcy5oaWRlTW9kYWwsIHRoaXMpKVxuICAgICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQoTW9kYWwuVFJBTlNJVElPTl9EVVJBVElPTikgOlxuICAgICAgdGhpcy5oaWRlTW9kYWwoKVxuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLmVuZm9yY2VGb2N1cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAkKGRvY3VtZW50KVxuICAgICAgLm9mZignZm9jdXNpbi5icy5tb2RhbCcpIC8vIGd1YXJkIGFnYWluc3QgaW5maW5pdGUgZm9jdXMgbG9vcFxuICAgICAgLm9uKCdmb2N1c2luLmJzLm1vZGFsJywgJC5wcm94eShmdW5jdGlvbiAoZSkge1xuICAgICAgICBpZiAoZG9jdW1lbnQgIT09IGUudGFyZ2V0ICYmXG4gICAgICAgICAgICB0aGlzLiRlbGVtZW50WzBdICE9PSBlLnRhcmdldCAmJlxuICAgICAgICAgICAgIXRoaXMuJGVsZW1lbnQuaGFzKGUudGFyZ2V0KS5sZW5ndGgpIHtcbiAgICAgICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2ZvY3VzJylcbiAgICAgICAgfVxuICAgICAgfSwgdGhpcykpXG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUuZXNjYXBlID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLmlzU2hvd24gJiYgdGhpcy5vcHRpb25zLmtleWJvYXJkKSB7XG4gICAgICB0aGlzLiRlbGVtZW50Lm9uKCdrZXlkb3duLmRpc21pc3MuYnMubW9kYWwnLCAkLnByb3h5KGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGUud2hpY2ggPT0gMjcgJiYgdGhpcy5oaWRlKClcbiAgICAgIH0sIHRoaXMpKVxuICAgIH0gZWxzZSBpZiAoIXRoaXMuaXNTaG93bikge1xuICAgICAgdGhpcy4kZWxlbWVudC5vZmYoJ2tleWRvd24uZGlzbWlzcy5icy5tb2RhbCcpXG4gICAgfVxuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLnJlc2l6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5pc1Nob3duKSB7XG4gICAgICAkKHdpbmRvdykub24oJ3Jlc2l6ZS5icy5tb2RhbCcsICQucHJveHkodGhpcy5oYW5kbGVVcGRhdGUsIHRoaXMpKVxuICAgIH0gZWxzZSB7XG4gICAgICAkKHdpbmRvdykub2ZmKCdyZXNpemUuYnMubW9kYWwnKVxuICAgIH1cbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS5oaWRlTW9kYWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRoYXQgPSB0aGlzXG4gICAgdGhpcy4kZWxlbWVudC5oaWRlKClcbiAgICB0aGlzLmJhY2tkcm9wKGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoYXQuJGJvZHkucmVtb3ZlQ2xhc3MoJ21vZGFsLW9wZW4nKVxuICAgICAgdGhhdC5yZXNldEFkanVzdG1lbnRzKClcbiAgICAgIHRoYXQucmVzZXRTY3JvbGxiYXIoKVxuICAgICAgdGhhdC4kZWxlbWVudC50cmlnZ2VyKCdoaWRkZW4uYnMubW9kYWwnKVxuICAgIH0pXG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUucmVtb3ZlQmFja2Ryb3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy4kYmFja2Ryb3AgJiYgdGhpcy4kYmFja2Ryb3AucmVtb3ZlKClcbiAgICB0aGlzLiRiYWNrZHJvcCA9IG51bGxcbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS5iYWNrZHJvcCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgIHZhciB0aGF0ID0gdGhpc1xuICAgIHZhciBhbmltYXRlID0gdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnZmFkZScpID8gJ2ZhZGUnIDogJydcblxuICAgIGlmICh0aGlzLmlzU2hvd24gJiYgdGhpcy5vcHRpb25zLmJhY2tkcm9wKSB7XG4gICAgICB2YXIgZG9BbmltYXRlID0gJC5zdXBwb3J0LnRyYW5zaXRpb24gJiYgYW5pbWF0ZVxuXG4gICAgICB0aGlzLiRiYWNrZHJvcCA9ICQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykpXG4gICAgICAgIC5hZGRDbGFzcygnbW9kYWwtYmFja2Ryb3AgJyArIGFuaW1hdGUpXG4gICAgICAgIC5hcHBlbmRUbyh0aGlzLiRib2R5KVxuXG4gICAgICB0aGlzLiRlbGVtZW50Lm9uKCdjbGljay5kaXNtaXNzLmJzLm1vZGFsJywgJC5wcm94eShmdW5jdGlvbiAoZSkge1xuICAgICAgICBpZiAodGhpcy5pZ25vcmVCYWNrZHJvcENsaWNrKSB7XG4gICAgICAgICAgdGhpcy5pZ25vcmVCYWNrZHJvcENsaWNrID0gZmFsc2VcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBpZiAoZS50YXJnZXQgIT09IGUuY3VycmVudFRhcmdldCkgcmV0dXJuXG4gICAgICAgIHRoaXMub3B0aW9ucy5iYWNrZHJvcCA9PSAnc3RhdGljJ1xuICAgICAgICAgID8gdGhpcy4kZWxlbWVudFswXS5mb2N1cygpXG4gICAgICAgICAgOiB0aGlzLmhpZGUoKVxuICAgICAgfSwgdGhpcykpXG5cbiAgICAgIGlmIChkb0FuaW1hdGUpIHRoaXMuJGJhY2tkcm9wWzBdLm9mZnNldFdpZHRoIC8vIGZvcmNlIHJlZmxvd1xuXG4gICAgICB0aGlzLiRiYWNrZHJvcC5hZGRDbGFzcygnaW4nKVxuXG4gICAgICBpZiAoIWNhbGxiYWNrKSByZXR1cm5cblxuICAgICAgZG9BbmltYXRlID9cbiAgICAgICAgdGhpcy4kYmFja2Ryb3BcbiAgICAgICAgICAub25lKCdic1RyYW5zaXRpb25FbmQnLCBjYWxsYmFjaylcbiAgICAgICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQoTW9kYWwuQkFDS0RST1BfVFJBTlNJVElPTl9EVVJBVElPTikgOlxuICAgICAgICBjYWxsYmFjaygpXG5cbiAgICB9IGVsc2UgaWYgKCF0aGlzLmlzU2hvd24gJiYgdGhpcy4kYmFja2Ryb3ApIHtcbiAgICAgIHRoaXMuJGJhY2tkcm9wLnJlbW92ZUNsYXNzKCdpbicpXG5cbiAgICAgIHZhciBjYWxsYmFja1JlbW92ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhhdC5yZW1vdmVCYWNrZHJvcCgpXG4gICAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKClcbiAgICAgIH1cbiAgICAgICQuc3VwcG9ydC50cmFuc2l0aW9uICYmIHRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2ZhZGUnKSA/XG4gICAgICAgIHRoaXMuJGJhY2tkcm9wXG4gICAgICAgICAgLm9uZSgnYnNUcmFuc2l0aW9uRW5kJywgY2FsbGJhY2tSZW1vdmUpXG4gICAgICAgICAgLmVtdWxhdGVUcmFuc2l0aW9uRW5kKE1vZGFsLkJBQ0tEUk9QX1RSQU5TSVRJT05fRFVSQVRJT04pIDpcbiAgICAgICAgY2FsbGJhY2tSZW1vdmUoKVxuXG4gICAgfSBlbHNlIGlmIChjYWxsYmFjaykge1xuICAgICAgY2FsbGJhY2soKVxuICAgIH1cbiAgfVxuXG4gIC8vIHRoZXNlIGZvbGxvd2luZyBtZXRob2RzIGFyZSB1c2VkIHRvIGhhbmRsZSBvdmVyZmxvd2luZyBtb2RhbHNcblxuICBNb2RhbC5wcm90b3R5cGUuaGFuZGxlVXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuYWRqdXN0RGlhbG9nKClcbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS5hZGp1c3REaWFsb2cgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG1vZGFsSXNPdmVyZmxvd2luZyA9IHRoaXMuJGVsZW1lbnRbMF0uc2Nyb2xsSGVpZ2h0ID4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodFxuXG4gICAgdGhpcy4kZWxlbWVudC5jc3Moe1xuICAgICAgcGFkZGluZ0xlZnQ6ICAhdGhpcy5ib2R5SXNPdmVyZmxvd2luZyAmJiBtb2RhbElzT3ZlcmZsb3dpbmcgPyB0aGlzLnNjcm9sbGJhcldpZHRoIDogJycsXG4gICAgICBwYWRkaW5nUmlnaHQ6IHRoaXMuYm9keUlzT3ZlcmZsb3dpbmcgJiYgIW1vZGFsSXNPdmVyZmxvd2luZyA/IHRoaXMuc2Nyb2xsYmFyV2lkdGggOiAnJ1xuICAgIH0pXG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUucmVzZXRBZGp1c3RtZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLiRlbGVtZW50LmNzcyh7XG4gICAgICBwYWRkaW5nTGVmdDogJycsXG4gICAgICBwYWRkaW5nUmlnaHQ6ICcnXG4gICAgfSlcbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS5jaGVja1Njcm9sbGJhciA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZnVsbFdpbmRvd1dpZHRoID0gd2luZG93LmlubmVyV2lkdGhcbiAgICBpZiAoIWZ1bGxXaW5kb3dXaWR0aCkgeyAvLyB3b3JrYXJvdW5kIGZvciBtaXNzaW5nIHdpbmRvdy5pbm5lcldpZHRoIGluIElFOFxuICAgICAgdmFyIGRvY3VtZW50RWxlbWVudFJlY3QgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgICAgIGZ1bGxXaW5kb3dXaWR0aCA9IGRvY3VtZW50RWxlbWVudFJlY3QucmlnaHQgLSBNYXRoLmFicyhkb2N1bWVudEVsZW1lbnRSZWN0LmxlZnQpXG4gICAgfVxuICAgIHRoaXMuYm9keUlzT3ZlcmZsb3dpbmcgPSBkb2N1bWVudC5ib2R5LmNsaWVudFdpZHRoIDwgZnVsbFdpbmRvd1dpZHRoXG4gICAgdGhpcy5zY3JvbGxiYXJXaWR0aCA9IHRoaXMubWVhc3VyZVNjcm9sbGJhcigpXG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUuc2V0U2Nyb2xsYmFyID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBib2R5UGFkID0gcGFyc2VJbnQoKHRoaXMuJGJvZHkuY3NzKCdwYWRkaW5nLXJpZ2h0JykgfHwgMCksIDEwKVxuICAgIHRoaXMub3JpZ2luYWxCb2R5UGFkID0gZG9jdW1lbnQuYm9keS5zdHlsZS5wYWRkaW5nUmlnaHQgfHwgJydcbiAgICBpZiAodGhpcy5ib2R5SXNPdmVyZmxvd2luZykgdGhpcy4kYm9keS5jc3MoJ3BhZGRpbmctcmlnaHQnLCBib2R5UGFkICsgdGhpcy5zY3JvbGxiYXJXaWR0aClcbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS5yZXNldFNjcm9sbGJhciA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLiRib2R5LmNzcygncGFkZGluZy1yaWdodCcsIHRoaXMub3JpZ2luYWxCb2R5UGFkKVxuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLm1lYXN1cmVTY3JvbGxiYXIgPSBmdW5jdGlvbiAoKSB7IC8vIHRoeCB3YWxzaFxuICAgIHZhciBzY3JvbGxEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgIHNjcm9sbERpdi5jbGFzc05hbWUgPSAnbW9kYWwtc2Nyb2xsYmFyLW1lYXN1cmUnXG4gICAgdGhpcy4kYm9keS5hcHBlbmQoc2Nyb2xsRGl2KVxuICAgIHZhciBzY3JvbGxiYXJXaWR0aCA9IHNjcm9sbERpdi5vZmZzZXRXaWR0aCAtIHNjcm9sbERpdi5jbGllbnRXaWR0aFxuICAgIHRoaXMuJGJvZHlbMF0ucmVtb3ZlQ2hpbGQoc2Nyb2xsRGl2KVxuICAgIHJldHVybiBzY3JvbGxiYXJXaWR0aFxuICB9XG5cblxuICAvLyBNT0RBTCBQTFVHSU4gREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIGZ1bmN0aW9uIFBsdWdpbihvcHRpb24sIF9yZWxhdGVkVGFyZ2V0KSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHRoaXMgICA9ICQodGhpcylcbiAgICAgIHZhciBkYXRhICAgID0gJHRoaXMuZGF0YSgnYnMubW9kYWwnKVxuICAgICAgdmFyIG9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgTW9kYWwuREVGQVVMVFMsICR0aGlzLmRhdGEoKSwgdHlwZW9mIG9wdGlvbiA9PSAnb2JqZWN0JyAmJiBvcHRpb24pXG5cbiAgICAgIGlmICghZGF0YSkgJHRoaXMuZGF0YSgnYnMubW9kYWwnLCAoZGF0YSA9IG5ldyBNb2RhbCh0aGlzLCBvcHRpb25zKSkpXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJykgZGF0YVtvcHRpb25dKF9yZWxhdGVkVGFyZ2V0KVxuICAgICAgZWxzZSBpZiAob3B0aW9ucy5zaG93KSBkYXRhLnNob3coX3JlbGF0ZWRUYXJnZXQpXG4gICAgfSlcbiAgfVxuXG4gIHZhciBvbGQgPSAkLmZuLm1vZGFsXG5cbiAgJC5mbi5tb2RhbCAgICAgICAgICAgICA9IFBsdWdpblxuICAkLmZuLm1vZGFsLkNvbnN0cnVjdG9yID0gTW9kYWxcblxuXG4gIC8vIE1PREFMIE5PIENPTkZMSUNUXG4gIC8vID09PT09PT09PT09PT09PT09XG5cbiAgJC5mbi5tb2RhbC5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm4ubW9kYWwgPSBvbGRcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cblxuICAvLyBNT0RBTCBEQVRBLUFQSVxuICAvLyA9PT09PT09PT09PT09PVxuXG4gICQoZG9jdW1lbnQpLm9uKCdjbGljay5icy5tb2RhbC5kYXRhLWFwaScsICdbZGF0YS10b2dnbGU9XCJtb2RhbFwiXScsIGZ1bmN0aW9uIChlKSB7XG4gICAgdmFyICR0aGlzICAgPSAkKHRoaXMpXG4gICAgdmFyIGhyZWYgICAgPSAkdGhpcy5hdHRyKCdocmVmJylcbiAgICB2YXIgJHRhcmdldCA9ICQoJHRoaXMuYXR0cignZGF0YS10YXJnZXQnKSB8fCAoaHJlZiAmJiBocmVmLnJlcGxhY2UoLy4qKD89I1teXFxzXSskKS8sICcnKSkpIC8vIHN0cmlwIGZvciBpZTdcbiAgICB2YXIgb3B0aW9uICA9ICR0YXJnZXQuZGF0YSgnYnMubW9kYWwnKSA/ICd0b2dnbGUnIDogJC5leHRlbmQoeyByZW1vdGU6ICEvIy8udGVzdChocmVmKSAmJiBocmVmIH0sICR0YXJnZXQuZGF0YSgpLCAkdGhpcy5kYXRhKCkpXG5cbiAgICBpZiAoJHRoaXMuaXMoJ2EnKSkgZS5wcmV2ZW50RGVmYXVsdCgpXG5cbiAgICAkdGFyZ2V0Lm9uZSgnc2hvdy5icy5tb2RhbCcsIGZ1bmN0aW9uIChzaG93RXZlbnQpIHtcbiAgICAgIGlmIChzaG93RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHJldHVybiAvLyBvbmx5IHJlZ2lzdGVyIGZvY3VzIHJlc3RvcmVyIGlmIG1vZGFsIHdpbGwgYWN0dWFsbHkgZ2V0IHNob3duXG4gICAgICAkdGFyZ2V0Lm9uZSgnaGlkZGVuLmJzLm1vZGFsJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAkdGhpcy5pcygnOnZpc2libGUnKSAmJiAkdGhpcy50cmlnZ2VyKCdmb2N1cycpXG4gICAgICB9KVxuICAgIH0pXG4gICAgUGx1Z2luLmNhbGwoJHRhcmdldCwgb3B0aW9uLCB0aGlzKVxuICB9KVxuXG59KGpRdWVyeSk7XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQm9vdHN0cmFwOiB0b29sdGlwLmpzIHYzLjMuN1xuICogaHR0cDovL2dldGJvb3RzdHJhcC5jb20vamF2YXNjcmlwdC8jdG9vbHRpcFxuICogSW5zcGlyZWQgYnkgdGhlIG9yaWdpbmFsIGpRdWVyeS50aXBzeSBieSBKYXNvbiBGcmFtZVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb3B5cmlnaHQgMjAxMS0yMDE2IFR3aXR0ZXIsIEluYy5cbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuXG4rZnVuY3Rpb24gKCQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIFRPT0xUSVAgUFVCTElDIENMQVNTIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIHZhciBUb29sdGlwID0gZnVuY3Rpb24gKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnR5cGUgICAgICAgPSBudWxsXG4gICAgdGhpcy5vcHRpb25zICAgID0gbnVsbFxuICAgIHRoaXMuZW5hYmxlZCAgICA9IG51bGxcbiAgICB0aGlzLnRpbWVvdXQgICAgPSBudWxsXG4gICAgdGhpcy5ob3ZlclN0YXRlID0gbnVsbFxuICAgIHRoaXMuJGVsZW1lbnQgICA9IG51bGxcbiAgICB0aGlzLmluU3RhdGUgICAgPSBudWxsXG5cbiAgICB0aGlzLmluaXQoJ3Rvb2x0aXAnLCBlbGVtZW50LCBvcHRpb25zKVxuICB9XG5cbiAgVG9vbHRpcC5WRVJTSU9OICA9ICczLjMuNydcblxuICBUb29sdGlwLlRSQU5TSVRJT05fRFVSQVRJT04gPSAxNTBcblxuICBUb29sdGlwLkRFRkFVTFRTID0ge1xuICAgIGFuaW1hdGlvbjogdHJ1ZSxcbiAgICBwbGFjZW1lbnQ6ICd0b3AnLFxuICAgIHNlbGVjdG9yOiBmYWxzZSxcbiAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJ0b29sdGlwXCIgcm9sZT1cInRvb2x0aXBcIj48ZGl2IGNsYXNzPVwidG9vbHRpcC1hcnJvd1wiPjwvZGl2PjxkaXYgY2xhc3M9XCJ0b29sdGlwLWlubmVyXCI+PC9kaXY+PC9kaXY+JyxcbiAgICB0cmlnZ2VyOiAnaG92ZXIgZm9jdXMnLFxuICAgIHRpdGxlOiAnJyxcbiAgICBkZWxheTogMCxcbiAgICBodG1sOiBmYWxzZSxcbiAgICBjb250YWluZXI6IGZhbHNlLFxuICAgIHZpZXdwb3J0OiB7XG4gICAgICBzZWxlY3RvcjogJ2JvZHknLFxuICAgICAgcGFkZGluZzogMFxuICAgIH1cbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAodHlwZSwgZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMuZW5hYmxlZCAgID0gdHJ1ZVxuICAgIHRoaXMudHlwZSAgICAgID0gdHlwZVxuICAgIHRoaXMuJGVsZW1lbnQgID0gJChlbGVtZW50KVxuICAgIHRoaXMub3B0aW9ucyAgID0gdGhpcy5nZXRPcHRpb25zKG9wdGlvbnMpXG4gICAgdGhpcy4kdmlld3BvcnQgPSB0aGlzLm9wdGlvbnMudmlld3BvcnQgJiYgJCgkLmlzRnVuY3Rpb24odGhpcy5vcHRpb25zLnZpZXdwb3J0KSA/IHRoaXMub3B0aW9ucy52aWV3cG9ydC5jYWxsKHRoaXMsIHRoaXMuJGVsZW1lbnQpIDogKHRoaXMub3B0aW9ucy52aWV3cG9ydC5zZWxlY3RvciB8fCB0aGlzLm9wdGlvbnMudmlld3BvcnQpKVxuICAgIHRoaXMuaW5TdGF0ZSAgID0geyBjbGljazogZmFsc2UsIGhvdmVyOiBmYWxzZSwgZm9jdXM6IGZhbHNlIH1cblxuICAgIGlmICh0aGlzLiRlbGVtZW50WzBdIGluc3RhbmNlb2YgZG9jdW1lbnQuY29uc3RydWN0b3IgJiYgIXRoaXMub3B0aW9ucy5zZWxlY3Rvcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdgc2VsZWN0b3JgIG9wdGlvbiBtdXN0IGJlIHNwZWNpZmllZCB3aGVuIGluaXRpYWxpemluZyAnICsgdGhpcy50eXBlICsgJyBvbiB0aGUgd2luZG93LmRvY3VtZW50IG9iamVjdCEnKVxuICAgIH1cblxuICAgIHZhciB0cmlnZ2VycyA9IHRoaXMub3B0aW9ucy50cmlnZ2VyLnNwbGl0KCcgJylcblxuICAgIGZvciAodmFyIGkgPSB0cmlnZ2Vycy5sZW5ndGg7IGktLTspIHtcbiAgICAgIHZhciB0cmlnZ2VyID0gdHJpZ2dlcnNbaV1cblxuICAgICAgaWYgKHRyaWdnZXIgPT0gJ2NsaWNrJykge1xuICAgICAgICB0aGlzLiRlbGVtZW50Lm9uKCdjbGljay4nICsgdGhpcy50eXBlLCB0aGlzLm9wdGlvbnMuc2VsZWN0b3IsICQucHJveHkodGhpcy50b2dnbGUsIHRoaXMpKVxuICAgICAgfSBlbHNlIGlmICh0cmlnZ2VyICE9ICdtYW51YWwnKSB7XG4gICAgICAgIHZhciBldmVudEluICA9IHRyaWdnZXIgPT0gJ2hvdmVyJyA/ICdtb3VzZWVudGVyJyA6ICdmb2N1c2luJ1xuICAgICAgICB2YXIgZXZlbnRPdXQgPSB0cmlnZ2VyID09ICdob3ZlcicgPyAnbW91c2VsZWF2ZScgOiAnZm9jdXNvdXQnXG5cbiAgICAgICAgdGhpcy4kZWxlbWVudC5vbihldmVudEluICArICcuJyArIHRoaXMudHlwZSwgdGhpcy5vcHRpb25zLnNlbGVjdG9yLCAkLnByb3h5KHRoaXMuZW50ZXIsIHRoaXMpKVxuICAgICAgICB0aGlzLiRlbGVtZW50Lm9uKGV2ZW50T3V0ICsgJy4nICsgdGhpcy50eXBlLCB0aGlzLm9wdGlvbnMuc2VsZWN0b3IsICQucHJveHkodGhpcy5sZWF2ZSwgdGhpcykpXG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5vcHRpb25zLnNlbGVjdG9yID9cbiAgICAgICh0aGlzLl9vcHRpb25zID0gJC5leHRlbmQoe30sIHRoaXMub3B0aW9ucywgeyB0cmlnZ2VyOiAnbWFudWFsJywgc2VsZWN0b3I6ICcnIH0pKSA6XG4gICAgICB0aGlzLmZpeFRpdGxlKClcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmdldERlZmF1bHRzID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBUb29sdGlwLkRFRkFVTFRTXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5nZXRPcHRpb25zID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gJC5leHRlbmQoe30sIHRoaXMuZ2V0RGVmYXVsdHMoKSwgdGhpcy4kZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpXG5cbiAgICBpZiAob3B0aW9ucy5kZWxheSAmJiB0eXBlb2Ygb3B0aW9ucy5kZWxheSA9PSAnbnVtYmVyJykge1xuICAgICAgb3B0aW9ucy5kZWxheSA9IHtcbiAgICAgICAgc2hvdzogb3B0aW9ucy5kZWxheSxcbiAgICAgICAgaGlkZTogb3B0aW9ucy5kZWxheVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBvcHRpb25zXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5nZXREZWxlZ2F0ZU9wdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG9wdGlvbnMgID0ge31cbiAgICB2YXIgZGVmYXVsdHMgPSB0aGlzLmdldERlZmF1bHRzKClcblxuICAgIHRoaXMuX29wdGlvbnMgJiYgJC5lYWNoKHRoaXMuX29wdGlvbnMsIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICBpZiAoZGVmYXVsdHNba2V5XSAhPSB2YWx1ZSkgb3B0aW9uc1trZXldID0gdmFsdWVcbiAgICB9KVxuXG4gICAgcmV0dXJuIG9wdGlvbnNcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmVudGVyID0gZnVuY3Rpb24gKG9iaikge1xuICAgIHZhciBzZWxmID0gb2JqIGluc3RhbmNlb2YgdGhpcy5jb25zdHJ1Y3RvciA/XG4gICAgICBvYmogOiAkKG9iai5jdXJyZW50VGFyZ2V0KS5kYXRhKCdicy4nICsgdGhpcy50eXBlKVxuXG4gICAgaWYgKCFzZWxmKSB7XG4gICAgICBzZWxmID0gbmV3IHRoaXMuY29uc3RydWN0b3Iob2JqLmN1cnJlbnRUYXJnZXQsIHRoaXMuZ2V0RGVsZWdhdGVPcHRpb25zKCkpXG4gICAgICAkKG9iai5jdXJyZW50VGFyZ2V0KS5kYXRhKCdicy4nICsgdGhpcy50eXBlLCBzZWxmKVxuICAgIH1cblxuICAgIGlmIChvYmogaW5zdGFuY2VvZiAkLkV2ZW50KSB7XG4gICAgICBzZWxmLmluU3RhdGVbb2JqLnR5cGUgPT0gJ2ZvY3VzaW4nID8gJ2ZvY3VzJyA6ICdob3ZlciddID0gdHJ1ZVxuICAgIH1cblxuICAgIGlmIChzZWxmLnRpcCgpLmhhc0NsYXNzKCdpbicpIHx8IHNlbGYuaG92ZXJTdGF0ZSA9PSAnaW4nKSB7XG4gICAgICBzZWxmLmhvdmVyU3RhdGUgPSAnaW4nXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjbGVhclRpbWVvdXQoc2VsZi50aW1lb3V0KVxuXG4gICAgc2VsZi5ob3ZlclN0YXRlID0gJ2luJ1xuXG4gICAgaWYgKCFzZWxmLm9wdGlvbnMuZGVsYXkgfHwgIXNlbGYub3B0aW9ucy5kZWxheS5zaG93KSByZXR1cm4gc2VsZi5zaG93KClcblxuICAgIHNlbGYudGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHNlbGYuaG92ZXJTdGF0ZSA9PSAnaW4nKSBzZWxmLnNob3coKVxuICAgIH0sIHNlbGYub3B0aW9ucy5kZWxheS5zaG93KVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuaXNJblN0YXRlVHJ1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5pblN0YXRlKSB7XG4gICAgICBpZiAodGhpcy5pblN0YXRlW2tleV0pIHJldHVybiB0cnVlXG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5sZWF2ZSA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICB2YXIgc2VsZiA9IG9iaiBpbnN0YW5jZW9mIHRoaXMuY29uc3RydWN0b3IgP1xuICAgICAgb2JqIDogJChvYmouY3VycmVudFRhcmdldCkuZGF0YSgnYnMuJyArIHRoaXMudHlwZSlcblxuICAgIGlmICghc2VsZikge1xuICAgICAgc2VsZiA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKG9iai5jdXJyZW50VGFyZ2V0LCB0aGlzLmdldERlbGVnYXRlT3B0aW9ucygpKVxuICAgICAgJChvYmouY3VycmVudFRhcmdldCkuZGF0YSgnYnMuJyArIHRoaXMudHlwZSwgc2VsZilcbiAgICB9XG5cbiAgICBpZiAob2JqIGluc3RhbmNlb2YgJC5FdmVudCkge1xuICAgICAgc2VsZi5pblN0YXRlW29iai50eXBlID09ICdmb2N1c291dCcgPyAnZm9jdXMnIDogJ2hvdmVyJ10gPSBmYWxzZVxuICAgIH1cblxuICAgIGlmIChzZWxmLmlzSW5TdGF0ZVRydWUoKSkgcmV0dXJuXG5cbiAgICBjbGVhclRpbWVvdXQoc2VsZi50aW1lb3V0KVxuXG4gICAgc2VsZi5ob3ZlclN0YXRlID0gJ291dCdcblxuICAgIGlmICghc2VsZi5vcHRpb25zLmRlbGF5IHx8ICFzZWxmLm9wdGlvbnMuZGVsYXkuaGlkZSkgcmV0dXJuIHNlbGYuaGlkZSgpXG5cbiAgICBzZWxmLnRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChzZWxmLmhvdmVyU3RhdGUgPT0gJ291dCcpIHNlbGYuaGlkZSgpXG4gICAgfSwgc2VsZi5vcHRpb25zLmRlbGF5LmhpZGUpXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5zaG93ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBlID0gJC5FdmVudCgnc2hvdy5icy4nICsgdGhpcy50eXBlKVxuXG4gICAgaWYgKHRoaXMuaGFzQ29udGVudCgpICYmIHRoaXMuZW5hYmxlZCkge1xuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKGUpXG5cbiAgICAgIHZhciBpbkRvbSA9ICQuY29udGFpbnModGhpcy4kZWxlbWVudFswXS5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgdGhpcy4kZWxlbWVudFswXSlcbiAgICAgIGlmIChlLmlzRGVmYXVsdFByZXZlbnRlZCgpIHx8ICFpbkRvbSkgcmV0dXJuXG4gICAgICB2YXIgdGhhdCA9IHRoaXNcblxuICAgICAgdmFyICR0aXAgPSB0aGlzLnRpcCgpXG5cbiAgICAgIHZhciB0aXBJZCA9IHRoaXMuZ2V0VUlEKHRoaXMudHlwZSlcblxuICAgICAgdGhpcy5zZXRDb250ZW50KClcbiAgICAgICR0aXAuYXR0cignaWQnLCB0aXBJZClcbiAgICAgIHRoaXMuJGVsZW1lbnQuYXR0cignYXJpYS1kZXNjcmliZWRieScsIHRpcElkKVxuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmFuaW1hdGlvbikgJHRpcC5hZGRDbGFzcygnZmFkZScpXG5cbiAgICAgIHZhciBwbGFjZW1lbnQgPSB0eXBlb2YgdGhpcy5vcHRpb25zLnBsYWNlbWVudCA9PSAnZnVuY3Rpb24nID9cbiAgICAgICAgdGhpcy5vcHRpb25zLnBsYWNlbWVudC5jYWxsKHRoaXMsICR0aXBbMF0sIHRoaXMuJGVsZW1lbnRbMF0pIDpcbiAgICAgICAgdGhpcy5vcHRpb25zLnBsYWNlbWVudFxuXG4gICAgICB2YXIgYXV0b1Rva2VuID0gL1xccz9hdXRvP1xccz8vaVxuICAgICAgdmFyIGF1dG9QbGFjZSA9IGF1dG9Ub2tlbi50ZXN0KHBsYWNlbWVudClcbiAgICAgIGlmIChhdXRvUGxhY2UpIHBsYWNlbWVudCA9IHBsYWNlbWVudC5yZXBsYWNlKGF1dG9Ub2tlbiwgJycpIHx8ICd0b3AnXG5cbiAgICAgICR0aXBcbiAgICAgICAgLmRldGFjaCgpXG4gICAgICAgIC5jc3MoeyB0b3A6IDAsIGxlZnQ6IDAsIGRpc3BsYXk6ICdibG9jaycgfSlcbiAgICAgICAgLmFkZENsYXNzKHBsYWNlbWVudClcbiAgICAgICAgLmRhdGEoJ2JzLicgKyB0aGlzLnR5cGUsIHRoaXMpXG5cbiAgICAgIHRoaXMub3B0aW9ucy5jb250YWluZXIgPyAkdGlwLmFwcGVuZFRvKHRoaXMub3B0aW9ucy5jb250YWluZXIpIDogJHRpcC5pbnNlcnRBZnRlcih0aGlzLiRlbGVtZW50KVxuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdpbnNlcnRlZC5icy4nICsgdGhpcy50eXBlKVxuXG4gICAgICB2YXIgcG9zICAgICAgICAgID0gdGhpcy5nZXRQb3NpdGlvbigpXG4gICAgICB2YXIgYWN0dWFsV2lkdGggID0gJHRpcFswXS5vZmZzZXRXaWR0aFxuICAgICAgdmFyIGFjdHVhbEhlaWdodCA9ICR0aXBbMF0ub2Zmc2V0SGVpZ2h0XG5cbiAgICAgIGlmIChhdXRvUGxhY2UpIHtcbiAgICAgICAgdmFyIG9yZ1BsYWNlbWVudCA9IHBsYWNlbWVudFxuICAgICAgICB2YXIgdmlld3BvcnREaW0gPSB0aGlzLmdldFBvc2l0aW9uKHRoaXMuJHZpZXdwb3J0KVxuXG4gICAgICAgIHBsYWNlbWVudCA9IHBsYWNlbWVudCA9PSAnYm90dG9tJyAmJiBwb3MuYm90dG9tICsgYWN0dWFsSGVpZ2h0ID4gdmlld3BvcnREaW0uYm90dG9tID8gJ3RvcCcgICAgOlxuICAgICAgICAgICAgICAgICAgICBwbGFjZW1lbnQgPT0gJ3RvcCcgICAgJiYgcG9zLnRvcCAgICAtIGFjdHVhbEhlaWdodCA8IHZpZXdwb3J0RGltLnRvcCAgICA/ICdib3R0b20nIDpcbiAgICAgICAgICAgICAgICAgICAgcGxhY2VtZW50ID09ICdyaWdodCcgICYmIHBvcy5yaWdodCAgKyBhY3R1YWxXaWR0aCAgPiB2aWV3cG9ydERpbS53aWR0aCAgPyAnbGVmdCcgICA6XG4gICAgICAgICAgICAgICAgICAgIHBsYWNlbWVudCA9PSAnbGVmdCcgICAmJiBwb3MubGVmdCAgIC0gYWN0dWFsV2lkdGggIDwgdmlld3BvcnREaW0ubGVmdCAgID8gJ3JpZ2h0JyAgOlxuICAgICAgICAgICAgICAgICAgICBwbGFjZW1lbnRcblxuICAgICAgICAkdGlwXG4gICAgICAgICAgLnJlbW92ZUNsYXNzKG9yZ1BsYWNlbWVudClcbiAgICAgICAgICAuYWRkQ2xhc3MocGxhY2VtZW50KVxuICAgICAgfVxuXG4gICAgICB2YXIgY2FsY3VsYXRlZE9mZnNldCA9IHRoaXMuZ2V0Q2FsY3VsYXRlZE9mZnNldChwbGFjZW1lbnQsIHBvcywgYWN0dWFsV2lkdGgsIGFjdHVhbEhlaWdodClcblxuICAgICAgdGhpcy5hcHBseVBsYWNlbWVudChjYWxjdWxhdGVkT2Zmc2V0LCBwbGFjZW1lbnQpXG5cbiAgICAgIHZhciBjb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHByZXZIb3ZlclN0YXRlID0gdGhhdC5ob3ZlclN0YXRlXG4gICAgICAgIHRoYXQuJGVsZW1lbnQudHJpZ2dlcignc2hvd24uYnMuJyArIHRoYXQudHlwZSlcbiAgICAgICAgdGhhdC5ob3ZlclN0YXRlID0gbnVsbFxuXG4gICAgICAgIGlmIChwcmV2SG92ZXJTdGF0ZSA9PSAnb3V0JykgdGhhdC5sZWF2ZSh0aGF0KVxuICAgICAgfVxuXG4gICAgICAkLnN1cHBvcnQudHJhbnNpdGlvbiAmJiB0aGlzLiR0aXAuaGFzQ2xhc3MoJ2ZhZGUnKSA/XG4gICAgICAgICR0aXBcbiAgICAgICAgICAub25lKCdic1RyYW5zaXRpb25FbmQnLCBjb21wbGV0ZSlcbiAgICAgICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQoVG9vbHRpcC5UUkFOU0lUSU9OX0RVUkFUSU9OKSA6XG4gICAgICAgIGNvbXBsZXRlKClcbiAgICB9XG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5hcHBseVBsYWNlbWVudCA9IGZ1bmN0aW9uIChvZmZzZXQsIHBsYWNlbWVudCkge1xuICAgIHZhciAkdGlwICAgPSB0aGlzLnRpcCgpXG4gICAgdmFyIHdpZHRoICA9ICR0aXBbMF0ub2Zmc2V0V2lkdGhcbiAgICB2YXIgaGVpZ2h0ID0gJHRpcFswXS5vZmZzZXRIZWlnaHRcblxuICAgIC8vIG1hbnVhbGx5IHJlYWQgbWFyZ2lucyBiZWNhdXNlIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBpbmNsdWRlcyBkaWZmZXJlbmNlXG4gICAgdmFyIG1hcmdpblRvcCA9IHBhcnNlSW50KCR0aXAuY3NzKCdtYXJnaW4tdG9wJyksIDEwKVxuICAgIHZhciBtYXJnaW5MZWZ0ID0gcGFyc2VJbnQoJHRpcC5jc3MoJ21hcmdpbi1sZWZ0JyksIDEwKVxuXG4gICAgLy8gd2UgbXVzdCBjaGVjayBmb3IgTmFOIGZvciBpZSA4LzlcbiAgICBpZiAoaXNOYU4obWFyZ2luVG9wKSkgIG1hcmdpblRvcCAgPSAwXG4gICAgaWYgKGlzTmFOKG1hcmdpbkxlZnQpKSBtYXJnaW5MZWZ0ID0gMFxuXG4gICAgb2Zmc2V0LnRvcCAgKz0gbWFyZ2luVG9wXG4gICAgb2Zmc2V0LmxlZnQgKz0gbWFyZ2luTGVmdFxuXG4gICAgLy8gJC5mbi5vZmZzZXQgZG9lc24ndCByb3VuZCBwaXhlbCB2YWx1ZXNcbiAgICAvLyBzbyB3ZSB1c2Ugc2V0T2Zmc2V0IGRpcmVjdGx5IHdpdGggb3VyIG93biBmdW5jdGlvbiBCLTBcbiAgICAkLm9mZnNldC5zZXRPZmZzZXQoJHRpcFswXSwgJC5leHRlbmQoe1xuICAgICAgdXNpbmc6IGZ1bmN0aW9uIChwcm9wcykge1xuICAgICAgICAkdGlwLmNzcyh7XG4gICAgICAgICAgdG9wOiBNYXRoLnJvdW5kKHByb3BzLnRvcCksXG4gICAgICAgICAgbGVmdDogTWF0aC5yb3VuZChwcm9wcy5sZWZ0KVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0sIG9mZnNldCksIDApXG5cbiAgICAkdGlwLmFkZENsYXNzKCdpbicpXG5cbiAgICAvLyBjaGVjayB0byBzZWUgaWYgcGxhY2luZyB0aXAgaW4gbmV3IG9mZnNldCBjYXVzZWQgdGhlIHRpcCB0byByZXNpemUgaXRzZWxmXG4gICAgdmFyIGFjdHVhbFdpZHRoICA9ICR0aXBbMF0ub2Zmc2V0V2lkdGhcbiAgICB2YXIgYWN0dWFsSGVpZ2h0ID0gJHRpcFswXS5vZmZzZXRIZWlnaHRcblxuICAgIGlmIChwbGFjZW1lbnQgPT0gJ3RvcCcgJiYgYWN0dWFsSGVpZ2h0ICE9IGhlaWdodCkge1xuICAgICAgb2Zmc2V0LnRvcCA9IG9mZnNldC50b3AgKyBoZWlnaHQgLSBhY3R1YWxIZWlnaHRcbiAgICB9XG5cbiAgICB2YXIgZGVsdGEgPSB0aGlzLmdldFZpZXdwb3J0QWRqdXN0ZWREZWx0YShwbGFjZW1lbnQsIG9mZnNldCwgYWN0dWFsV2lkdGgsIGFjdHVhbEhlaWdodClcblxuICAgIGlmIChkZWx0YS5sZWZ0KSBvZmZzZXQubGVmdCArPSBkZWx0YS5sZWZ0XG4gICAgZWxzZSBvZmZzZXQudG9wICs9IGRlbHRhLnRvcFxuXG4gICAgdmFyIGlzVmVydGljYWwgICAgICAgICAgPSAvdG9wfGJvdHRvbS8udGVzdChwbGFjZW1lbnQpXG4gICAgdmFyIGFycm93RGVsdGEgICAgICAgICAgPSBpc1ZlcnRpY2FsID8gZGVsdGEubGVmdCAqIDIgLSB3aWR0aCArIGFjdHVhbFdpZHRoIDogZGVsdGEudG9wICogMiAtIGhlaWdodCArIGFjdHVhbEhlaWdodFxuICAgIHZhciBhcnJvd09mZnNldFBvc2l0aW9uID0gaXNWZXJ0aWNhbCA/ICdvZmZzZXRXaWR0aCcgOiAnb2Zmc2V0SGVpZ2h0J1xuXG4gICAgJHRpcC5vZmZzZXQob2Zmc2V0KVxuICAgIHRoaXMucmVwbGFjZUFycm93KGFycm93RGVsdGEsICR0aXBbMF1bYXJyb3dPZmZzZXRQb3NpdGlvbl0sIGlzVmVydGljYWwpXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5yZXBsYWNlQXJyb3cgPSBmdW5jdGlvbiAoZGVsdGEsIGRpbWVuc2lvbiwgaXNWZXJ0aWNhbCkge1xuICAgIHRoaXMuYXJyb3coKVxuICAgICAgLmNzcyhpc1ZlcnRpY2FsID8gJ2xlZnQnIDogJ3RvcCcsIDUwICogKDEgLSBkZWx0YSAvIGRpbWVuc2lvbikgKyAnJScpXG4gICAgICAuY3NzKGlzVmVydGljYWwgPyAndG9wJyA6ICdsZWZ0JywgJycpXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5zZXRDb250ZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciAkdGlwICA9IHRoaXMudGlwKClcbiAgICB2YXIgdGl0bGUgPSB0aGlzLmdldFRpdGxlKClcblxuICAgICR0aXAuZmluZCgnLnRvb2x0aXAtaW5uZXInKVt0aGlzLm9wdGlvbnMuaHRtbCA/ICdodG1sJyA6ICd0ZXh0J10odGl0bGUpXG4gICAgJHRpcC5yZW1vdmVDbGFzcygnZmFkZSBpbiB0b3AgYm90dG9tIGxlZnQgcmlnaHQnKVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuaGlkZSA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgIHZhciB0aGF0ID0gdGhpc1xuICAgIHZhciAkdGlwID0gJCh0aGlzLiR0aXApXG4gICAgdmFyIGUgICAgPSAkLkV2ZW50KCdoaWRlLmJzLicgKyB0aGlzLnR5cGUpXG5cbiAgICBmdW5jdGlvbiBjb21wbGV0ZSgpIHtcbiAgICAgIGlmICh0aGF0LmhvdmVyU3RhdGUgIT0gJ2luJykgJHRpcC5kZXRhY2goKVxuICAgICAgaWYgKHRoYXQuJGVsZW1lbnQpIHsgLy8gVE9ETzogQ2hlY2sgd2hldGhlciBndWFyZGluZyB0aGlzIGNvZGUgd2l0aCB0aGlzIGBpZmAgaXMgcmVhbGx5IG5lY2Vzc2FyeS5cbiAgICAgICAgdGhhdC4kZWxlbWVudFxuICAgICAgICAgIC5yZW1vdmVBdHRyKCdhcmlhLWRlc2NyaWJlZGJ5JylcbiAgICAgICAgICAudHJpZ2dlcignaGlkZGVuLmJzLicgKyB0aGF0LnR5cGUpXG4gICAgICB9XG4gICAgICBjYWxsYmFjayAmJiBjYWxsYmFjaygpXG4gICAgfVxuXG4gICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKGUpXG5cbiAgICBpZiAoZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgcmV0dXJuXG5cbiAgICAkdGlwLnJlbW92ZUNsYXNzKCdpbicpXG5cbiAgICAkLnN1cHBvcnQudHJhbnNpdGlvbiAmJiAkdGlwLmhhc0NsYXNzKCdmYWRlJykgP1xuICAgICAgJHRpcFxuICAgICAgICAub25lKCdic1RyYW5zaXRpb25FbmQnLCBjb21wbGV0ZSlcbiAgICAgICAgLmVtdWxhdGVUcmFuc2l0aW9uRW5kKFRvb2x0aXAuVFJBTlNJVElPTl9EVVJBVElPTikgOlxuICAgICAgY29tcGxldGUoKVxuXG4gICAgdGhpcy5ob3ZlclN0YXRlID0gbnVsbFxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmZpeFRpdGxlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciAkZSA9IHRoaXMuJGVsZW1lbnRcbiAgICBpZiAoJGUuYXR0cigndGl0bGUnKSB8fCB0eXBlb2YgJGUuYXR0cignZGF0YS1vcmlnaW5hbC10aXRsZScpICE9ICdzdHJpbmcnKSB7XG4gICAgICAkZS5hdHRyKCdkYXRhLW9yaWdpbmFsLXRpdGxlJywgJGUuYXR0cigndGl0bGUnKSB8fCAnJykuYXR0cigndGl0bGUnLCAnJylcbiAgICB9XG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5oYXNDb250ZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmdldFRpdGxlKClcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmdldFBvc2l0aW9uID0gZnVuY3Rpb24gKCRlbGVtZW50KSB7XG4gICAgJGVsZW1lbnQgICA9ICRlbGVtZW50IHx8IHRoaXMuJGVsZW1lbnRcblxuICAgIHZhciBlbCAgICAgPSAkZWxlbWVudFswXVxuICAgIHZhciBpc0JvZHkgPSBlbC50YWdOYW1lID09ICdCT0RZJ1xuXG4gICAgdmFyIGVsUmVjdCAgICA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gICAgaWYgKGVsUmVjdC53aWR0aCA9PSBudWxsKSB7XG4gICAgICAvLyB3aWR0aCBhbmQgaGVpZ2h0IGFyZSBtaXNzaW5nIGluIElFOCwgc28gY29tcHV0ZSB0aGVtIG1hbnVhbGx5OyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2lzc3Vlcy8xNDA5M1xuICAgICAgZWxSZWN0ID0gJC5leHRlbmQoe30sIGVsUmVjdCwgeyB3aWR0aDogZWxSZWN0LnJpZ2h0IC0gZWxSZWN0LmxlZnQsIGhlaWdodDogZWxSZWN0LmJvdHRvbSAtIGVsUmVjdC50b3AgfSlcbiAgICB9XG4gICAgdmFyIGlzU3ZnID0gd2luZG93LlNWR0VsZW1lbnQgJiYgZWwgaW5zdGFuY2VvZiB3aW5kb3cuU1ZHRWxlbWVudFxuICAgIC8vIEF2b2lkIHVzaW5nICQub2Zmc2V0KCkgb24gU1ZHcyBzaW5jZSBpdCBnaXZlcyBpbmNvcnJlY3QgcmVzdWx0cyBpbiBqUXVlcnkgMy5cbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2lzc3Vlcy8yMDI4MFxuICAgIHZhciBlbE9mZnNldCAgPSBpc0JvZHkgPyB7IHRvcDogMCwgbGVmdDogMCB9IDogKGlzU3ZnID8gbnVsbCA6ICRlbGVtZW50Lm9mZnNldCgpKVxuICAgIHZhciBzY3JvbGwgICAgPSB7IHNjcm9sbDogaXNCb2R5ID8gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCB8fCBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCA6ICRlbGVtZW50LnNjcm9sbFRvcCgpIH1cbiAgICB2YXIgb3V0ZXJEaW1zID0gaXNCb2R5ID8geyB3aWR0aDogJCh3aW5kb3cpLndpZHRoKCksIGhlaWdodDogJCh3aW5kb3cpLmhlaWdodCgpIH0gOiBudWxsXG5cbiAgICByZXR1cm4gJC5leHRlbmQoe30sIGVsUmVjdCwgc2Nyb2xsLCBvdXRlckRpbXMsIGVsT2Zmc2V0KVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuZ2V0Q2FsY3VsYXRlZE9mZnNldCA9IGZ1bmN0aW9uIChwbGFjZW1lbnQsIHBvcywgYWN0dWFsV2lkdGgsIGFjdHVhbEhlaWdodCkge1xuICAgIHJldHVybiBwbGFjZW1lbnQgPT0gJ2JvdHRvbScgPyB7IHRvcDogcG9zLnRvcCArIHBvcy5oZWlnaHQsICAgbGVmdDogcG9zLmxlZnQgKyBwb3Mud2lkdGggLyAyIC0gYWN0dWFsV2lkdGggLyAyIH0gOlxuICAgICAgICAgICBwbGFjZW1lbnQgPT0gJ3RvcCcgICAgPyB7IHRvcDogcG9zLnRvcCAtIGFjdHVhbEhlaWdodCwgbGVmdDogcG9zLmxlZnQgKyBwb3Mud2lkdGggLyAyIC0gYWN0dWFsV2lkdGggLyAyIH0gOlxuICAgICAgICAgICBwbGFjZW1lbnQgPT0gJ2xlZnQnICAgPyB7IHRvcDogcG9zLnRvcCArIHBvcy5oZWlnaHQgLyAyIC0gYWN0dWFsSGVpZ2h0IC8gMiwgbGVmdDogcG9zLmxlZnQgLSBhY3R1YWxXaWR0aCB9IDpcbiAgICAgICAgLyogcGxhY2VtZW50ID09ICdyaWdodCcgKi8geyB0b3A6IHBvcy50b3AgKyBwb3MuaGVpZ2h0IC8gMiAtIGFjdHVhbEhlaWdodCAvIDIsIGxlZnQ6IHBvcy5sZWZ0ICsgcG9zLndpZHRoIH1cblxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuZ2V0Vmlld3BvcnRBZGp1c3RlZERlbHRhID0gZnVuY3Rpb24gKHBsYWNlbWVudCwgcG9zLCBhY3R1YWxXaWR0aCwgYWN0dWFsSGVpZ2h0KSB7XG4gICAgdmFyIGRlbHRhID0geyB0b3A6IDAsIGxlZnQ6IDAgfVxuICAgIGlmICghdGhpcy4kdmlld3BvcnQpIHJldHVybiBkZWx0YVxuXG4gICAgdmFyIHZpZXdwb3J0UGFkZGluZyA9IHRoaXMub3B0aW9ucy52aWV3cG9ydCAmJiB0aGlzLm9wdGlvbnMudmlld3BvcnQucGFkZGluZyB8fCAwXG4gICAgdmFyIHZpZXdwb3J0RGltZW5zaW9ucyA9IHRoaXMuZ2V0UG9zaXRpb24odGhpcy4kdmlld3BvcnQpXG5cbiAgICBpZiAoL3JpZ2h0fGxlZnQvLnRlc3QocGxhY2VtZW50KSkge1xuICAgICAgdmFyIHRvcEVkZ2VPZmZzZXQgICAgPSBwb3MudG9wIC0gdmlld3BvcnRQYWRkaW5nIC0gdmlld3BvcnREaW1lbnNpb25zLnNjcm9sbFxuICAgICAgdmFyIGJvdHRvbUVkZ2VPZmZzZXQgPSBwb3MudG9wICsgdmlld3BvcnRQYWRkaW5nIC0gdmlld3BvcnREaW1lbnNpb25zLnNjcm9sbCArIGFjdHVhbEhlaWdodFxuICAgICAgaWYgKHRvcEVkZ2VPZmZzZXQgPCB2aWV3cG9ydERpbWVuc2lvbnMudG9wKSB7IC8vIHRvcCBvdmVyZmxvd1xuICAgICAgICBkZWx0YS50b3AgPSB2aWV3cG9ydERpbWVuc2lvbnMudG9wIC0gdG9wRWRnZU9mZnNldFxuICAgICAgfSBlbHNlIGlmIChib3R0b21FZGdlT2Zmc2V0ID4gdmlld3BvcnREaW1lbnNpb25zLnRvcCArIHZpZXdwb3J0RGltZW5zaW9ucy5oZWlnaHQpIHsgLy8gYm90dG9tIG92ZXJmbG93XG4gICAgICAgIGRlbHRhLnRvcCA9IHZpZXdwb3J0RGltZW5zaW9ucy50b3AgKyB2aWV3cG9ydERpbWVuc2lvbnMuaGVpZ2h0IC0gYm90dG9tRWRnZU9mZnNldFxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbGVmdEVkZ2VPZmZzZXQgID0gcG9zLmxlZnQgLSB2aWV3cG9ydFBhZGRpbmdcbiAgICAgIHZhciByaWdodEVkZ2VPZmZzZXQgPSBwb3MubGVmdCArIHZpZXdwb3J0UGFkZGluZyArIGFjdHVhbFdpZHRoXG4gICAgICBpZiAobGVmdEVkZ2VPZmZzZXQgPCB2aWV3cG9ydERpbWVuc2lvbnMubGVmdCkgeyAvLyBsZWZ0IG92ZXJmbG93XG4gICAgICAgIGRlbHRhLmxlZnQgPSB2aWV3cG9ydERpbWVuc2lvbnMubGVmdCAtIGxlZnRFZGdlT2Zmc2V0XG4gICAgICB9IGVsc2UgaWYgKHJpZ2h0RWRnZU9mZnNldCA+IHZpZXdwb3J0RGltZW5zaW9ucy5yaWdodCkgeyAvLyByaWdodCBvdmVyZmxvd1xuICAgICAgICBkZWx0YS5sZWZ0ID0gdmlld3BvcnREaW1lbnNpb25zLmxlZnQgKyB2aWV3cG9ydERpbWVuc2lvbnMud2lkdGggLSByaWdodEVkZ2VPZmZzZXRcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZGVsdGFcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmdldFRpdGxlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB0aXRsZVxuICAgIHZhciAkZSA9IHRoaXMuJGVsZW1lbnRcbiAgICB2YXIgbyAgPSB0aGlzLm9wdGlvbnNcblxuICAgIHRpdGxlID0gJGUuYXR0cignZGF0YS1vcmlnaW5hbC10aXRsZScpXG4gICAgICB8fCAodHlwZW9mIG8udGl0bGUgPT0gJ2Z1bmN0aW9uJyA/IG8udGl0bGUuY2FsbCgkZVswXSkgOiAgby50aXRsZSlcblxuICAgIHJldHVybiB0aXRsZVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuZ2V0VUlEID0gZnVuY3Rpb24gKHByZWZpeCkge1xuICAgIGRvIHByZWZpeCArPSB+fihNYXRoLnJhbmRvbSgpICogMTAwMDAwMClcbiAgICB3aGlsZSAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocHJlZml4KSlcbiAgICByZXR1cm4gcHJlZml4XG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS50aXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzLiR0aXApIHtcbiAgICAgIHRoaXMuJHRpcCA9ICQodGhpcy5vcHRpb25zLnRlbXBsYXRlKVxuICAgICAgaWYgKHRoaXMuJHRpcC5sZW5ndGggIT0gMSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IodGhpcy50eXBlICsgJyBgdGVtcGxhdGVgIG9wdGlvbiBtdXN0IGNvbnNpc3Qgb2YgZXhhY3RseSAxIHRvcC1sZXZlbCBlbGVtZW50IScpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLiR0aXBcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmFycm93ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAodGhpcy4kYXJyb3cgPSB0aGlzLiRhcnJvdyB8fCB0aGlzLnRpcCgpLmZpbmQoJy50b29sdGlwLWFycm93JykpXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5lbmFibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5lbmFibGVkID0gdHJ1ZVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuZGlzYWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmVuYWJsZWQgPSBmYWxzZVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUudG9nZ2xlRW5hYmxlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmVuYWJsZWQgPSAhdGhpcy5lbmFibGVkXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS50b2dnbGUgPSBmdW5jdGlvbiAoZSkge1xuICAgIHZhciBzZWxmID0gdGhpc1xuICAgIGlmIChlKSB7XG4gICAgICBzZWxmID0gJChlLmN1cnJlbnRUYXJnZXQpLmRhdGEoJ2JzLicgKyB0aGlzLnR5cGUpXG4gICAgICBpZiAoIXNlbGYpIHtcbiAgICAgICAgc2VsZiA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKGUuY3VycmVudFRhcmdldCwgdGhpcy5nZXREZWxlZ2F0ZU9wdGlvbnMoKSlcbiAgICAgICAgJChlLmN1cnJlbnRUYXJnZXQpLmRhdGEoJ2JzLicgKyB0aGlzLnR5cGUsIHNlbGYpXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGUpIHtcbiAgICAgIHNlbGYuaW5TdGF0ZS5jbGljayA9ICFzZWxmLmluU3RhdGUuY2xpY2tcbiAgICAgIGlmIChzZWxmLmlzSW5TdGF0ZVRydWUoKSkgc2VsZi5lbnRlcihzZWxmKVxuICAgICAgZWxzZSBzZWxmLmxlYXZlKHNlbGYpXG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbGYudGlwKCkuaGFzQ2xhc3MoJ2luJykgPyBzZWxmLmxlYXZlKHNlbGYpIDogc2VsZi5lbnRlcihzZWxmKVxuICAgIH1cbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRoYXQgPSB0aGlzXG4gICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dClcbiAgICB0aGlzLmhpZGUoZnVuY3Rpb24gKCkge1xuICAgICAgdGhhdC4kZWxlbWVudC5vZmYoJy4nICsgdGhhdC50eXBlKS5yZW1vdmVEYXRhKCdicy4nICsgdGhhdC50eXBlKVxuICAgICAgaWYgKHRoYXQuJHRpcCkge1xuICAgICAgICB0aGF0LiR0aXAuZGV0YWNoKClcbiAgICAgIH1cbiAgICAgIHRoYXQuJHRpcCA9IG51bGxcbiAgICAgIHRoYXQuJGFycm93ID0gbnVsbFxuICAgICAgdGhhdC4kdmlld3BvcnQgPSBudWxsXG4gICAgICB0aGF0LiRlbGVtZW50ID0gbnVsbFxuICAgIH0pXG4gIH1cblxuXG4gIC8vIFRPT0xUSVAgUExVR0lOIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIGZ1bmN0aW9uIFBsdWdpbihvcHRpb24pIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGhpcyAgID0gJCh0aGlzKVxuICAgICAgdmFyIGRhdGEgICAgPSAkdGhpcy5kYXRhKCdicy50b29sdGlwJylcbiAgICAgIHZhciBvcHRpb25zID0gdHlwZW9mIG9wdGlvbiA9PSAnb2JqZWN0JyAmJiBvcHRpb25cblxuICAgICAgaWYgKCFkYXRhICYmIC9kZXN0cm95fGhpZGUvLnRlc3Qob3B0aW9uKSkgcmV0dXJuXG4gICAgICBpZiAoIWRhdGEpICR0aGlzLmRhdGEoJ2JzLnRvb2x0aXAnLCAoZGF0YSA9IG5ldyBUb29sdGlwKHRoaXMsIG9wdGlvbnMpKSlcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9uID09ICdzdHJpbmcnKSBkYXRhW29wdGlvbl0oKVxuICAgIH0pXG4gIH1cblxuICB2YXIgb2xkID0gJC5mbi50b29sdGlwXG5cbiAgJC5mbi50b29sdGlwICAgICAgICAgICAgID0gUGx1Z2luXG4gICQuZm4udG9vbHRpcC5Db25zdHJ1Y3RvciA9IFRvb2x0aXBcblxuXG4gIC8vIFRPT0xUSVAgTk8gQ09ORkxJQ1RcbiAgLy8gPT09PT09PT09PT09PT09PT09PVxuXG4gICQuZm4udG9vbHRpcC5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm4udG9vbHRpcCA9IG9sZFxuICAgIHJldHVybiB0aGlzXG4gIH1cblxufShqUXVlcnkpO1xuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEJvb3RzdHJhcDogcG9wb3Zlci5qcyB2My4zLjdcbiAqIGh0dHA6Ly9nZXRib290c3RyYXAuY29tL2phdmFzY3JpcHQvI3BvcG92ZXJzXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvcHlyaWdodCAyMDExLTIwMTYgVHdpdHRlciwgSW5jLlxuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG5cbitmdW5jdGlvbiAoJCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gUE9QT1ZFUiBQVUJMSUMgQ0xBU1MgREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgdmFyIFBvcG92ZXIgPSBmdW5jdGlvbiAoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMuaW5pdCgncG9wb3ZlcicsIGVsZW1lbnQsIG9wdGlvbnMpXG4gIH1cblxuICBpZiAoISQuZm4udG9vbHRpcCkgdGhyb3cgbmV3IEVycm9yKCdQb3BvdmVyIHJlcXVpcmVzIHRvb2x0aXAuanMnKVxuXG4gIFBvcG92ZXIuVkVSU0lPTiAgPSAnMy4zLjcnXG5cbiAgUG9wb3Zlci5ERUZBVUxUUyA9ICQuZXh0ZW5kKHt9LCAkLmZuLnRvb2x0aXAuQ29uc3RydWN0b3IuREVGQVVMVFMsIHtcbiAgICBwbGFjZW1lbnQ6ICdyaWdodCcsXG4gICAgdHJpZ2dlcjogJ2NsaWNrJyxcbiAgICBjb250ZW50OiAnJyxcbiAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJwb3BvdmVyXCIgcm9sZT1cInRvb2x0aXBcIj48ZGl2IGNsYXNzPVwiYXJyb3dcIj48L2Rpdj48aDMgY2xhc3M9XCJwb3BvdmVyLXRpdGxlXCI+PC9oMz48ZGl2IGNsYXNzPVwicG9wb3Zlci1jb250ZW50XCI+PC9kaXY+PC9kaXY+J1xuICB9KVxuXG5cbiAgLy8gTk9URTogUE9QT1ZFUiBFWFRFTkRTIHRvb2x0aXAuanNcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICBQb3BvdmVyLnByb3RvdHlwZSA9ICQuZXh0ZW5kKHt9LCAkLmZuLnRvb2x0aXAuQ29uc3RydWN0b3IucHJvdG90eXBlKVxuXG4gIFBvcG92ZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUG9wb3ZlclxuXG4gIFBvcG92ZXIucHJvdG90eXBlLmdldERlZmF1bHRzID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBQb3BvdmVyLkRFRkFVTFRTXG4gIH1cblxuICBQb3BvdmVyLnByb3RvdHlwZS5zZXRDb250ZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciAkdGlwICAgID0gdGhpcy50aXAoKVxuICAgIHZhciB0aXRsZSAgID0gdGhpcy5nZXRUaXRsZSgpXG4gICAgdmFyIGNvbnRlbnQgPSB0aGlzLmdldENvbnRlbnQoKVxuXG4gICAgJHRpcC5maW5kKCcucG9wb3Zlci10aXRsZScpW3RoaXMub3B0aW9ucy5odG1sID8gJ2h0bWwnIDogJ3RleHQnXSh0aXRsZSlcbiAgICAkdGlwLmZpbmQoJy5wb3BvdmVyLWNvbnRlbnQnKS5jaGlsZHJlbigpLmRldGFjaCgpLmVuZCgpWyAvLyB3ZSB1c2UgYXBwZW5kIGZvciBodG1sIG9iamVjdHMgdG8gbWFpbnRhaW4ganMgZXZlbnRzXG4gICAgICB0aGlzLm9wdGlvbnMuaHRtbCA/ICh0eXBlb2YgY29udGVudCA9PSAnc3RyaW5nJyA/ICdodG1sJyA6ICdhcHBlbmQnKSA6ICd0ZXh0J1xuICAgIF0oY29udGVudClcblxuICAgICR0aXAucmVtb3ZlQ2xhc3MoJ2ZhZGUgdG9wIGJvdHRvbSBsZWZ0IHJpZ2h0IGluJylcblxuICAgIC8vIElFOCBkb2Vzbid0IGFjY2VwdCBoaWRpbmcgdmlhIHRoZSBgOmVtcHR5YCBwc2V1ZG8gc2VsZWN0b3IsIHdlIGhhdmUgdG8gZG9cbiAgICAvLyB0aGlzIG1hbnVhbGx5IGJ5IGNoZWNraW5nIHRoZSBjb250ZW50cy5cbiAgICBpZiAoISR0aXAuZmluZCgnLnBvcG92ZXItdGl0bGUnKS5odG1sKCkpICR0aXAuZmluZCgnLnBvcG92ZXItdGl0bGUnKS5oaWRlKClcbiAgfVxuXG4gIFBvcG92ZXIucHJvdG90eXBlLmhhc0NvbnRlbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0VGl0bGUoKSB8fCB0aGlzLmdldENvbnRlbnQoKVxuICB9XG5cbiAgUG9wb3Zlci5wcm90b3R5cGUuZ2V0Q29udGVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgJGUgPSB0aGlzLiRlbGVtZW50XG4gICAgdmFyIG8gID0gdGhpcy5vcHRpb25zXG5cbiAgICByZXR1cm4gJGUuYXR0cignZGF0YS1jb250ZW50JylcbiAgICAgIHx8ICh0eXBlb2Ygby5jb250ZW50ID09ICdmdW5jdGlvbicgP1xuICAgICAgICAgICAgby5jb250ZW50LmNhbGwoJGVbMF0pIDpcbiAgICAgICAgICAgIG8uY29udGVudClcbiAgfVxuXG4gIFBvcG92ZXIucHJvdG90eXBlLmFycm93ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAodGhpcy4kYXJyb3cgPSB0aGlzLiRhcnJvdyB8fCB0aGlzLnRpcCgpLmZpbmQoJy5hcnJvdycpKVxuICB9XG5cblxuICAvLyBQT1BPVkVSIFBMVUdJTiBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICBmdW5jdGlvbiBQbHVnaW4ob3B0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHRoaXMgICA9ICQodGhpcylcbiAgICAgIHZhciBkYXRhICAgID0gJHRoaXMuZGF0YSgnYnMucG9wb3ZlcicpXG4gICAgICB2YXIgb3B0aW9ucyA9IHR5cGVvZiBvcHRpb24gPT0gJ29iamVjdCcgJiYgb3B0aW9uXG5cbiAgICAgIGlmICghZGF0YSAmJiAvZGVzdHJveXxoaWRlLy50ZXN0KG9wdGlvbikpIHJldHVyblxuICAgICAgaWYgKCFkYXRhKSAkdGhpcy5kYXRhKCdicy5wb3BvdmVyJywgKGRhdGEgPSBuZXcgUG9wb3Zlcih0aGlzLCBvcHRpb25zKSkpXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJykgZGF0YVtvcHRpb25dKClcbiAgICB9KVxuICB9XG5cbiAgdmFyIG9sZCA9ICQuZm4ucG9wb3ZlclxuXG4gICQuZm4ucG9wb3ZlciAgICAgICAgICAgICA9IFBsdWdpblxuICAkLmZuLnBvcG92ZXIuQ29uc3RydWN0b3IgPSBQb3BvdmVyXG5cblxuICAvLyBQT1BPVkVSIE5PIENPTkZMSUNUXG4gIC8vID09PT09PT09PT09PT09PT09PT1cblxuICAkLmZuLnBvcG92ZXIubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuLnBvcG92ZXIgPSBvbGRcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbn0oalF1ZXJ5KTtcblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBCb290c3RyYXA6IHNjcm9sbHNweS5qcyB2My4zLjdcbiAqIGh0dHA6Ly9nZXRib290c3RyYXAuY29tL2phdmFzY3JpcHQvI3Njcm9sbHNweVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb3B5cmlnaHQgMjAxMS0yMDE2IFR3aXR0ZXIsIEluYy5cbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuXG4rZnVuY3Rpb24gKCQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIFNDUk9MTFNQWSBDTEFTUyBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgZnVuY3Rpb24gU2Nyb2xsU3B5KGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRib2R5ICAgICAgICAgID0gJChkb2N1bWVudC5ib2R5KVxuICAgIHRoaXMuJHNjcm9sbEVsZW1lbnQgPSAkKGVsZW1lbnQpLmlzKGRvY3VtZW50LmJvZHkpID8gJCh3aW5kb3cpIDogJChlbGVtZW50KVxuICAgIHRoaXMub3B0aW9ucyAgICAgICAgPSAkLmV4dGVuZCh7fSwgU2Nyb2xsU3B5LkRFRkFVTFRTLCBvcHRpb25zKVxuICAgIHRoaXMuc2VsZWN0b3IgICAgICAgPSAodGhpcy5vcHRpb25zLnRhcmdldCB8fCAnJykgKyAnIC5uYXYgbGkgPiBhJ1xuICAgIHRoaXMub2Zmc2V0cyAgICAgICAgPSBbXVxuICAgIHRoaXMudGFyZ2V0cyAgICAgICAgPSBbXVxuICAgIHRoaXMuYWN0aXZlVGFyZ2V0ICAgPSBudWxsXG4gICAgdGhpcy5zY3JvbGxIZWlnaHQgICA9IDBcblxuICAgIHRoaXMuJHNjcm9sbEVsZW1lbnQub24oJ3Njcm9sbC5icy5zY3JvbGxzcHknLCAkLnByb3h5KHRoaXMucHJvY2VzcywgdGhpcykpXG4gICAgdGhpcy5yZWZyZXNoKClcbiAgICB0aGlzLnByb2Nlc3MoKVxuICB9XG5cbiAgU2Nyb2xsU3B5LlZFUlNJT04gID0gJzMuMy43J1xuXG4gIFNjcm9sbFNweS5ERUZBVUxUUyA9IHtcbiAgICBvZmZzZXQ6IDEwXG4gIH1cblxuICBTY3JvbGxTcHkucHJvdG90eXBlLmdldFNjcm9sbEhlaWdodCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy4kc2Nyb2xsRWxlbWVudFswXS5zY3JvbGxIZWlnaHQgfHwgTWF0aC5tYXgodGhpcy4kYm9keVswXS5zY3JvbGxIZWlnaHQsIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxIZWlnaHQpXG4gIH1cblxuICBTY3JvbGxTcHkucHJvdG90eXBlLnJlZnJlc2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRoYXQgICAgICAgICAgPSB0aGlzXG4gICAgdmFyIG9mZnNldE1ldGhvZCAgPSAnb2Zmc2V0J1xuICAgIHZhciBvZmZzZXRCYXNlICAgID0gMFxuXG4gICAgdGhpcy5vZmZzZXRzICAgICAgPSBbXVxuICAgIHRoaXMudGFyZ2V0cyAgICAgID0gW11cbiAgICB0aGlzLnNjcm9sbEhlaWdodCA9IHRoaXMuZ2V0U2Nyb2xsSGVpZ2h0KClcblxuICAgIGlmICghJC5pc1dpbmRvdyh0aGlzLiRzY3JvbGxFbGVtZW50WzBdKSkge1xuICAgICAgb2Zmc2V0TWV0aG9kID0gJ3Bvc2l0aW9uJ1xuICAgICAgb2Zmc2V0QmFzZSAgID0gdGhpcy4kc2Nyb2xsRWxlbWVudC5zY3JvbGxUb3AoKVxuICAgIH1cblxuICAgIHRoaXMuJGJvZHlcbiAgICAgIC5maW5kKHRoaXMuc2VsZWN0b3IpXG4gICAgICAubWFwKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyICRlbCAgID0gJCh0aGlzKVxuICAgICAgICB2YXIgaHJlZiAgPSAkZWwuZGF0YSgndGFyZ2V0JykgfHwgJGVsLmF0dHIoJ2hyZWYnKVxuICAgICAgICB2YXIgJGhyZWYgPSAvXiMuLy50ZXN0KGhyZWYpICYmICQoaHJlZilcblxuICAgICAgICByZXR1cm4gKCRocmVmXG4gICAgICAgICAgJiYgJGhyZWYubGVuZ3RoXG4gICAgICAgICAgJiYgJGhyZWYuaXMoJzp2aXNpYmxlJylcbiAgICAgICAgICAmJiBbWyRocmVmW29mZnNldE1ldGhvZF0oKS50b3AgKyBvZmZzZXRCYXNlLCBocmVmXV0pIHx8IG51bGxcbiAgICAgIH0pXG4gICAgICAuc29ydChmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gYVswXSAtIGJbMF0gfSlcbiAgICAgIC5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhhdC5vZmZzZXRzLnB1c2godGhpc1swXSlcbiAgICAgICAgdGhhdC50YXJnZXRzLnB1c2godGhpc1sxXSlcbiAgICAgIH0pXG4gIH1cblxuICBTY3JvbGxTcHkucHJvdG90eXBlLnByb2Nlc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNjcm9sbFRvcCAgICA9IHRoaXMuJHNjcm9sbEVsZW1lbnQuc2Nyb2xsVG9wKCkgKyB0aGlzLm9wdGlvbnMub2Zmc2V0XG4gICAgdmFyIHNjcm9sbEhlaWdodCA9IHRoaXMuZ2V0U2Nyb2xsSGVpZ2h0KClcbiAgICB2YXIgbWF4U2Nyb2xsICAgID0gdGhpcy5vcHRpb25zLm9mZnNldCArIHNjcm9sbEhlaWdodCAtIHRoaXMuJHNjcm9sbEVsZW1lbnQuaGVpZ2h0KClcbiAgICB2YXIgb2Zmc2V0cyAgICAgID0gdGhpcy5vZmZzZXRzXG4gICAgdmFyIHRhcmdldHMgICAgICA9IHRoaXMudGFyZ2V0c1xuICAgIHZhciBhY3RpdmVUYXJnZXQgPSB0aGlzLmFjdGl2ZVRhcmdldFxuICAgIHZhciBpXG5cbiAgICBpZiAodGhpcy5zY3JvbGxIZWlnaHQgIT0gc2Nyb2xsSGVpZ2h0KSB7XG4gICAgICB0aGlzLnJlZnJlc2goKVxuICAgIH1cblxuICAgIGlmIChzY3JvbGxUb3AgPj0gbWF4U2Nyb2xsKSB7XG4gICAgICByZXR1cm4gYWN0aXZlVGFyZ2V0ICE9IChpID0gdGFyZ2V0c1t0YXJnZXRzLmxlbmd0aCAtIDFdKSAmJiB0aGlzLmFjdGl2YXRlKGkpXG4gICAgfVxuXG4gICAgaWYgKGFjdGl2ZVRhcmdldCAmJiBzY3JvbGxUb3AgPCBvZmZzZXRzWzBdKSB7XG4gICAgICB0aGlzLmFjdGl2ZVRhcmdldCA9IG51bGxcbiAgICAgIHJldHVybiB0aGlzLmNsZWFyKClcbiAgICB9XG5cbiAgICBmb3IgKGkgPSBvZmZzZXRzLmxlbmd0aDsgaS0tOykge1xuICAgICAgYWN0aXZlVGFyZ2V0ICE9IHRhcmdldHNbaV1cbiAgICAgICAgJiYgc2Nyb2xsVG9wID49IG9mZnNldHNbaV1cbiAgICAgICAgJiYgKG9mZnNldHNbaSArIDFdID09PSB1bmRlZmluZWQgfHwgc2Nyb2xsVG9wIDwgb2Zmc2V0c1tpICsgMV0pXG4gICAgICAgICYmIHRoaXMuYWN0aXZhdGUodGFyZ2V0c1tpXSlcbiAgICB9XG4gIH1cblxuICBTY3JvbGxTcHkucHJvdG90eXBlLmFjdGl2YXRlID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIHRoaXMuYWN0aXZlVGFyZ2V0ID0gdGFyZ2V0XG5cbiAgICB0aGlzLmNsZWFyKClcblxuICAgIHZhciBzZWxlY3RvciA9IHRoaXMuc2VsZWN0b3IgK1xuICAgICAgJ1tkYXRhLXRhcmdldD1cIicgKyB0YXJnZXQgKyAnXCJdLCcgK1xuICAgICAgdGhpcy5zZWxlY3RvciArICdbaHJlZj1cIicgKyB0YXJnZXQgKyAnXCJdJ1xuXG4gICAgdmFyIGFjdGl2ZSA9ICQoc2VsZWN0b3IpXG4gICAgICAucGFyZW50cygnbGknKVxuICAgICAgLmFkZENsYXNzKCdhY3RpdmUnKVxuXG4gICAgaWYgKGFjdGl2ZS5wYXJlbnQoJy5kcm9wZG93bi1tZW51JykubGVuZ3RoKSB7XG4gICAgICBhY3RpdmUgPSBhY3RpdmVcbiAgICAgICAgLmNsb3Nlc3QoJ2xpLmRyb3Bkb3duJylcbiAgICAgICAgLmFkZENsYXNzKCdhY3RpdmUnKVxuICAgIH1cblxuICAgIGFjdGl2ZS50cmlnZ2VyKCdhY3RpdmF0ZS5icy5zY3JvbGxzcHknKVxuICB9XG5cbiAgU2Nyb2xsU3B5LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgICAkKHRoaXMuc2VsZWN0b3IpXG4gICAgICAucGFyZW50c1VudGlsKHRoaXMub3B0aW9ucy50YXJnZXQsICcuYWN0aXZlJylcbiAgICAgIC5yZW1vdmVDbGFzcygnYWN0aXZlJylcbiAgfVxuXG5cbiAgLy8gU0NST0xMU1BZIFBMVUdJTiBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIGZ1bmN0aW9uIFBsdWdpbihvcHRpb24pIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGhpcyAgID0gJCh0aGlzKVxuICAgICAgdmFyIGRhdGEgICAgPSAkdGhpcy5kYXRhKCdicy5zY3JvbGxzcHknKVxuICAgICAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9uID09ICdvYmplY3QnICYmIG9wdGlvblxuXG4gICAgICBpZiAoIWRhdGEpICR0aGlzLmRhdGEoJ2JzLnNjcm9sbHNweScsIChkYXRhID0gbmV3IFNjcm9sbFNweSh0aGlzLCBvcHRpb25zKSkpXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJykgZGF0YVtvcHRpb25dKClcbiAgICB9KVxuICB9XG5cbiAgdmFyIG9sZCA9ICQuZm4uc2Nyb2xsc3B5XG5cbiAgJC5mbi5zY3JvbGxzcHkgICAgICAgICAgICAgPSBQbHVnaW5cbiAgJC5mbi5zY3JvbGxzcHkuQ29uc3RydWN0b3IgPSBTY3JvbGxTcHlcblxuXG4gIC8vIFNDUk9MTFNQWSBOTyBDT05GTElDVFxuICAvLyA9PT09PT09PT09PT09PT09PT09PT1cblxuICAkLmZuLnNjcm9sbHNweS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm4uc2Nyb2xsc3B5ID0gb2xkXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG5cbiAgLy8gU0NST0xMU1BZIERBVEEtQVBJXG4gIC8vID09PT09PT09PT09PT09PT09PVxuXG4gICQod2luZG93KS5vbignbG9hZC5icy5zY3JvbGxzcHkuZGF0YS1hcGknLCBmdW5jdGlvbiAoKSB7XG4gICAgJCgnW2RhdGEtc3B5PVwic2Nyb2xsXCJdJykuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHNweSA9ICQodGhpcylcbiAgICAgIFBsdWdpbi5jYWxsKCRzcHksICRzcHkuZGF0YSgpKVxuICAgIH0pXG4gIH0pXG5cbn0oalF1ZXJ5KTtcblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBCb290c3RyYXA6IHRhYi5qcyB2My4zLjdcbiAqIGh0dHA6Ly9nZXRib290c3RyYXAuY29tL2phdmFzY3JpcHQvI3RhYnNcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29weXJpZ2h0IDIwMTEtMjAxNiBUd2l0dGVyLCBJbmMuXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cblxuK2Z1bmN0aW9uICgkKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBUQUIgQ0xBU1MgREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PVxuXG4gIHZhciBUYWIgPSBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgIC8vIGpzY3M6ZGlzYWJsZSByZXF1aXJlRG9sbGFyQmVmb3JlalF1ZXJ5QXNzaWdubWVudFxuICAgIHRoaXMuZWxlbWVudCA9ICQoZWxlbWVudClcbiAgICAvLyBqc2NzOmVuYWJsZSByZXF1aXJlRG9sbGFyQmVmb3JlalF1ZXJ5QXNzaWdubWVudFxuICB9XG5cbiAgVGFiLlZFUlNJT04gPSAnMy4zLjcnXG5cbiAgVGFiLlRSQU5TSVRJT05fRFVSQVRJT04gPSAxNTBcblxuICBUYWIucHJvdG90eXBlLnNob3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyICR0aGlzICAgID0gdGhpcy5lbGVtZW50XG4gICAgdmFyICR1bCAgICAgID0gJHRoaXMuY2xvc2VzdCgndWw6bm90KC5kcm9wZG93bi1tZW51KScpXG4gICAgdmFyIHNlbGVjdG9yID0gJHRoaXMuZGF0YSgndGFyZ2V0JylcblxuICAgIGlmICghc2VsZWN0b3IpIHtcbiAgICAgIHNlbGVjdG9yID0gJHRoaXMuYXR0cignaHJlZicpXG4gICAgICBzZWxlY3RvciA9IHNlbGVjdG9yICYmIHNlbGVjdG9yLnJlcGxhY2UoLy4qKD89I1teXFxzXSokKS8sICcnKSAvLyBzdHJpcCBmb3IgaWU3XG4gICAgfVxuXG4gICAgaWYgKCR0aGlzLnBhcmVudCgnbGknKS5oYXNDbGFzcygnYWN0aXZlJykpIHJldHVyblxuXG4gICAgdmFyICRwcmV2aW91cyA9ICR1bC5maW5kKCcuYWN0aXZlOmxhc3QgYScpXG4gICAgdmFyIGhpZGVFdmVudCA9ICQuRXZlbnQoJ2hpZGUuYnMudGFiJywge1xuICAgICAgcmVsYXRlZFRhcmdldDogJHRoaXNbMF1cbiAgICB9KVxuICAgIHZhciBzaG93RXZlbnQgPSAkLkV2ZW50KCdzaG93LmJzLnRhYicsIHtcbiAgICAgIHJlbGF0ZWRUYXJnZXQ6ICRwcmV2aW91c1swXVxuICAgIH0pXG5cbiAgICAkcHJldmlvdXMudHJpZ2dlcihoaWRlRXZlbnQpXG4gICAgJHRoaXMudHJpZ2dlcihzaG93RXZlbnQpXG5cbiAgICBpZiAoc2hvd0V2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpIHx8IGhpZGVFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgcmV0dXJuXG5cbiAgICB2YXIgJHRhcmdldCA9ICQoc2VsZWN0b3IpXG5cbiAgICB0aGlzLmFjdGl2YXRlKCR0aGlzLmNsb3Nlc3QoJ2xpJyksICR1bClcbiAgICB0aGlzLmFjdGl2YXRlKCR0YXJnZXQsICR0YXJnZXQucGFyZW50KCksIGZ1bmN0aW9uICgpIHtcbiAgICAgICRwcmV2aW91cy50cmlnZ2VyKHtcbiAgICAgICAgdHlwZTogJ2hpZGRlbi5icy50YWInLFxuICAgICAgICByZWxhdGVkVGFyZ2V0OiAkdGhpc1swXVxuICAgICAgfSlcbiAgICAgICR0aGlzLnRyaWdnZXIoe1xuICAgICAgICB0eXBlOiAnc2hvd24uYnMudGFiJyxcbiAgICAgICAgcmVsYXRlZFRhcmdldDogJHByZXZpb3VzWzBdXG4gICAgICB9KVxuICAgIH0pXG4gIH1cblxuICBUYWIucHJvdG90eXBlLmFjdGl2YXRlID0gZnVuY3Rpb24gKGVsZW1lbnQsIGNvbnRhaW5lciwgY2FsbGJhY2spIHtcbiAgICB2YXIgJGFjdGl2ZSAgICA9IGNvbnRhaW5lci5maW5kKCc+IC5hY3RpdmUnKVxuICAgIHZhciB0cmFuc2l0aW9uID0gY2FsbGJhY2tcbiAgICAgICYmICQuc3VwcG9ydC50cmFuc2l0aW9uXG4gICAgICAmJiAoJGFjdGl2ZS5sZW5ndGggJiYgJGFjdGl2ZS5oYXNDbGFzcygnZmFkZScpIHx8ICEhY29udGFpbmVyLmZpbmQoJz4gLmZhZGUnKS5sZW5ndGgpXG5cbiAgICBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgJGFjdGl2ZVxuICAgICAgICAucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpXG4gICAgICAgIC5maW5kKCc+IC5kcm9wZG93bi1tZW51ID4gLmFjdGl2ZScpXG4gICAgICAgICAgLnJlbW92ZUNsYXNzKCdhY3RpdmUnKVxuICAgICAgICAuZW5kKClcbiAgICAgICAgLmZpbmQoJ1tkYXRhLXRvZ2dsZT1cInRhYlwiXScpXG4gICAgICAgICAgLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCBmYWxzZSlcblxuICAgICAgZWxlbWVudFxuICAgICAgICAuYWRkQ2xhc3MoJ2FjdGl2ZScpXG4gICAgICAgIC5maW5kKCdbZGF0YS10b2dnbGU9XCJ0YWJcIl0nKVxuICAgICAgICAgIC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgdHJ1ZSlcblxuICAgICAgaWYgKHRyYW5zaXRpb24pIHtcbiAgICAgICAgZWxlbWVudFswXS5vZmZzZXRXaWR0aCAvLyByZWZsb3cgZm9yIHRyYW5zaXRpb25cbiAgICAgICAgZWxlbWVudC5hZGRDbGFzcygnaW4nKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWxlbWVudC5yZW1vdmVDbGFzcygnZmFkZScpXG4gICAgICB9XG5cbiAgICAgIGlmIChlbGVtZW50LnBhcmVudCgnLmRyb3Bkb3duLW1lbnUnKS5sZW5ndGgpIHtcbiAgICAgICAgZWxlbWVudFxuICAgICAgICAgIC5jbG9zZXN0KCdsaS5kcm9wZG93bicpXG4gICAgICAgICAgICAuYWRkQ2xhc3MoJ2FjdGl2ZScpXG4gICAgICAgICAgLmVuZCgpXG4gICAgICAgICAgLmZpbmQoJ1tkYXRhLXRvZ2dsZT1cInRhYlwiXScpXG4gICAgICAgICAgICAuYXR0cignYXJpYS1leHBhbmRlZCcsIHRydWUpXG4gICAgICB9XG5cbiAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKClcbiAgICB9XG5cbiAgICAkYWN0aXZlLmxlbmd0aCAmJiB0cmFuc2l0aW9uID9cbiAgICAgICRhY3RpdmVcbiAgICAgICAgLm9uZSgnYnNUcmFuc2l0aW9uRW5kJywgbmV4dClcbiAgICAgICAgLmVtdWxhdGVUcmFuc2l0aW9uRW5kKFRhYi5UUkFOU0lUSU9OX0RVUkFUSU9OKSA6XG4gICAgICBuZXh0KClcblxuICAgICRhY3RpdmUucmVtb3ZlQ2xhc3MoJ2luJylcbiAgfVxuXG5cbiAgLy8gVEFCIFBMVUdJTiBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PVxuXG4gIGZ1bmN0aW9uIFBsdWdpbihvcHRpb24pIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGhpcyA9ICQodGhpcylcbiAgICAgIHZhciBkYXRhICA9ICR0aGlzLmRhdGEoJ2JzLnRhYicpXG5cbiAgICAgIGlmICghZGF0YSkgJHRoaXMuZGF0YSgnYnMudGFiJywgKGRhdGEgPSBuZXcgVGFiKHRoaXMpKSlcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9uID09ICdzdHJpbmcnKSBkYXRhW29wdGlvbl0oKVxuICAgIH0pXG4gIH1cblxuICB2YXIgb2xkID0gJC5mbi50YWJcblxuICAkLmZuLnRhYiAgICAgICAgICAgICA9IFBsdWdpblxuICAkLmZuLnRhYi5Db25zdHJ1Y3RvciA9IFRhYlxuXG5cbiAgLy8gVEFCIE5PIENPTkZMSUNUXG4gIC8vID09PT09PT09PT09PT09PVxuXG4gICQuZm4udGFiLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJC5mbi50YWIgPSBvbGRcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cblxuICAvLyBUQUIgREFUQS1BUElcbiAgLy8gPT09PT09PT09PT09XG5cbiAgdmFyIGNsaWNrSGFuZGxlciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgUGx1Z2luLmNhbGwoJCh0aGlzKSwgJ3Nob3cnKVxuICB9XG5cbiAgJChkb2N1bWVudClcbiAgICAub24oJ2NsaWNrLmJzLnRhYi5kYXRhLWFwaScsICdbZGF0YS10b2dnbGU9XCJ0YWJcIl0nLCBjbGlja0hhbmRsZXIpXG4gICAgLm9uKCdjbGljay5icy50YWIuZGF0YS1hcGknLCAnW2RhdGEtdG9nZ2xlPVwicGlsbFwiXScsIGNsaWNrSGFuZGxlcilcblxufShqUXVlcnkpO1xuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEJvb3RzdHJhcDogYWZmaXguanMgdjMuMy43XG4gKiBodHRwOi8vZ2V0Ym9vdHN0cmFwLmNvbS9qYXZhc2NyaXB0LyNhZmZpeFxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb3B5cmlnaHQgMjAxMS0yMDE2IFR3aXR0ZXIsIEluYy5cbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuXG4rZnVuY3Rpb24gKCQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIEFGRklYIENMQVNTIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PVxuXG4gIHZhciBBZmZpeCA9IGZ1bmN0aW9uIChlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQoe30sIEFmZml4LkRFRkFVTFRTLCBvcHRpb25zKVxuXG4gICAgdGhpcy4kdGFyZ2V0ID0gJCh0aGlzLm9wdGlvbnMudGFyZ2V0KVxuICAgICAgLm9uKCdzY3JvbGwuYnMuYWZmaXguZGF0YS1hcGknLCAkLnByb3h5KHRoaXMuY2hlY2tQb3NpdGlvbiwgdGhpcykpXG4gICAgICAub24oJ2NsaWNrLmJzLmFmZml4LmRhdGEtYXBpJywgICQucHJveHkodGhpcy5jaGVja1Bvc2l0aW9uV2l0aEV2ZW50TG9vcCwgdGhpcykpXG5cbiAgICB0aGlzLiRlbGVtZW50ICAgICA9ICQoZWxlbWVudClcbiAgICB0aGlzLmFmZml4ZWQgICAgICA9IG51bGxcbiAgICB0aGlzLnVucGluICAgICAgICA9IG51bGxcbiAgICB0aGlzLnBpbm5lZE9mZnNldCA9IG51bGxcblxuICAgIHRoaXMuY2hlY2tQb3NpdGlvbigpXG4gIH1cblxuICBBZmZpeC5WRVJTSU9OICA9ICczLjMuNydcblxuICBBZmZpeC5SRVNFVCAgICA9ICdhZmZpeCBhZmZpeC10b3AgYWZmaXgtYm90dG9tJ1xuXG4gIEFmZml4LkRFRkFVTFRTID0ge1xuICAgIG9mZnNldDogMCxcbiAgICB0YXJnZXQ6IHdpbmRvd1xuICB9XG5cbiAgQWZmaXgucHJvdG90eXBlLmdldFN0YXRlID0gZnVuY3Rpb24gKHNjcm9sbEhlaWdodCwgaGVpZ2h0LCBvZmZzZXRUb3AsIG9mZnNldEJvdHRvbSkge1xuICAgIHZhciBzY3JvbGxUb3AgICAgPSB0aGlzLiR0YXJnZXQuc2Nyb2xsVG9wKClcbiAgICB2YXIgcG9zaXRpb24gICAgID0gdGhpcy4kZWxlbWVudC5vZmZzZXQoKVxuICAgIHZhciB0YXJnZXRIZWlnaHQgPSB0aGlzLiR0YXJnZXQuaGVpZ2h0KClcblxuICAgIGlmIChvZmZzZXRUb3AgIT0gbnVsbCAmJiB0aGlzLmFmZml4ZWQgPT0gJ3RvcCcpIHJldHVybiBzY3JvbGxUb3AgPCBvZmZzZXRUb3AgPyAndG9wJyA6IGZhbHNlXG5cbiAgICBpZiAodGhpcy5hZmZpeGVkID09ICdib3R0b20nKSB7XG4gICAgICBpZiAob2Zmc2V0VG9wICE9IG51bGwpIHJldHVybiAoc2Nyb2xsVG9wICsgdGhpcy51bnBpbiA8PSBwb3NpdGlvbi50b3ApID8gZmFsc2UgOiAnYm90dG9tJ1xuICAgICAgcmV0dXJuIChzY3JvbGxUb3AgKyB0YXJnZXRIZWlnaHQgPD0gc2Nyb2xsSGVpZ2h0IC0gb2Zmc2V0Qm90dG9tKSA/IGZhbHNlIDogJ2JvdHRvbSdcbiAgICB9XG5cbiAgICB2YXIgaW5pdGlhbGl6aW5nICAgPSB0aGlzLmFmZml4ZWQgPT0gbnVsbFxuICAgIHZhciBjb2xsaWRlclRvcCAgICA9IGluaXRpYWxpemluZyA/IHNjcm9sbFRvcCA6IHBvc2l0aW9uLnRvcFxuICAgIHZhciBjb2xsaWRlckhlaWdodCA9IGluaXRpYWxpemluZyA/IHRhcmdldEhlaWdodCA6IGhlaWdodFxuXG4gICAgaWYgKG9mZnNldFRvcCAhPSBudWxsICYmIHNjcm9sbFRvcCA8PSBvZmZzZXRUb3ApIHJldHVybiAndG9wJ1xuICAgIGlmIChvZmZzZXRCb3R0b20gIT0gbnVsbCAmJiAoY29sbGlkZXJUb3AgKyBjb2xsaWRlckhlaWdodCA+PSBzY3JvbGxIZWlnaHQgLSBvZmZzZXRCb3R0b20pKSByZXR1cm4gJ2JvdHRvbSdcblxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgQWZmaXgucHJvdG90eXBlLmdldFBpbm5lZE9mZnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5waW5uZWRPZmZzZXQpIHJldHVybiB0aGlzLnBpbm5lZE9mZnNldFxuICAgIHRoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3MoQWZmaXguUkVTRVQpLmFkZENsYXNzKCdhZmZpeCcpXG4gICAgdmFyIHNjcm9sbFRvcCA9IHRoaXMuJHRhcmdldC5zY3JvbGxUb3AoKVxuICAgIHZhciBwb3NpdGlvbiAgPSB0aGlzLiRlbGVtZW50Lm9mZnNldCgpXG4gICAgcmV0dXJuICh0aGlzLnBpbm5lZE9mZnNldCA9IHBvc2l0aW9uLnRvcCAtIHNjcm9sbFRvcClcbiAgfVxuXG4gIEFmZml4LnByb3RvdHlwZS5jaGVja1Bvc2l0aW9uV2l0aEV2ZW50TG9vcCA9IGZ1bmN0aW9uICgpIHtcbiAgICBzZXRUaW1lb3V0KCQucHJveHkodGhpcy5jaGVja1Bvc2l0aW9uLCB0aGlzKSwgMSlcbiAgfVxuXG4gIEFmZml4LnByb3RvdHlwZS5jaGVja1Bvc2l0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghdGhpcy4kZWxlbWVudC5pcygnOnZpc2libGUnKSkgcmV0dXJuXG5cbiAgICB2YXIgaGVpZ2h0ICAgICAgID0gdGhpcy4kZWxlbWVudC5oZWlnaHQoKVxuICAgIHZhciBvZmZzZXQgICAgICAgPSB0aGlzLm9wdGlvbnMub2Zmc2V0XG4gICAgdmFyIG9mZnNldFRvcCAgICA9IG9mZnNldC50b3BcbiAgICB2YXIgb2Zmc2V0Qm90dG9tID0gb2Zmc2V0LmJvdHRvbVxuICAgIHZhciBzY3JvbGxIZWlnaHQgPSBNYXRoLm1heCgkKGRvY3VtZW50KS5oZWlnaHQoKSwgJChkb2N1bWVudC5ib2R5KS5oZWlnaHQoKSlcblxuICAgIGlmICh0eXBlb2Ygb2Zmc2V0ICE9ICdvYmplY3QnKSAgICAgICAgIG9mZnNldEJvdHRvbSA9IG9mZnNldFRvcCA9IG9mZnNldFxuICAgIGlmICh0eXBlb2Ygb2Zmc2V0VG9wID09ICdmdW5jdGlvbicpICAgIG9mZnNldFRvcCAgICA9IG9mZnNldC50b3AodGhpcy4kZWxlbWVudClcbiAgICBpZiAodHlwZW9mIG9mZnNldEJvdHRvbSA9PSAnZnVuY3Rpb24nKSBvZmZzZXRCb3R0b20gPSBvZmZzZXQuYm90dG9tKHRoaXMuJGVsZW1lbnQpXG5cbiAgICB2YXIgYWZmaXggPSB0aGlzLmdldFN0YXRlKHNjcm9sbEhlaWdodCwgaGVpZ2h0LCBvZmZzZXRUb3AsIG9mZnNldEJvdHRvbSlcblxuICAgIGlmICh0aGlzLmFmZml4ZWQgIT0gYWZmaXgpIHtcbiAgICAgIGlmICh0aGlzLnVucGluICE9IG51bGwpIHRoaXMuJGVsZW1lbnQuY3NzKCd0b3AnLCAnJylcblxuICAgICAgdmFyIGFmZml4VHlwZSA9ICdhZmZpeCcgKyAoYWZmaXggPyAnLScgKyBhZmZpeCA6ICcnKVxuICAgICAgdmFyIGUgICAgICAgICA9ICQuRXZlbnQoYWZmaXhUeXBlICsgJy5icy5hZmZpeCcpXG5cbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcihlKVxuXG4gICAgICBpZiAoZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgcmV0dXJuXG5cbiAgICAgIHRoaXMuYWZmaXhlZCA9IGFmZml4XG4gICAgICB0aGlzLnVucGluID0gYWZmaXggPT0gJ2JvdHRvbScgPyB0aGlzLmdldFBpbm5lZE9mZnNldCgpIDogbnVsbFxuXG4gICAgICB0aGlzLiRlbGVtZW50XG4gICAgICAgIC5yZW1vdmVDbGFzcyhBZmZpeC5SRVNFVClcbiAgICAgICAgLmFkZENsYXNzKGFmZml4VHlwZSlcbiAgICAgICAgLnRyaWdnZXIoYWZmaXhUeXBlLnJlcGxhY2UoJ2FmZml4JywgJ2FmZml4ZWQnKSArICcuYnMuYWZmaXgnKVxuICAgIH1cblxuICAgIGlmIChhZmZpeCA9PSAnYm90dG9tJykge1xuICAgICAgdGhpcy4kZWxlbWVudC5vZmZzZXQoe1xuICAgICAgICB0b3A6IHNjcm9sbEhlaWdodCAtIGhlaWdodCAtIG9mZnNldEJvdHRvbVxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuXG4gIC8vIEFGRklYIFBMVUdJTiBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgZnVuY3Rpb24gUGx1Z2luKG9wdGlvbikge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICR0aGlzICAgPSAkKHRoaXMpXG4gICAgICB2YXIgZGF0YSAgICA9ICR0aGlzLmRhdGEoJ2JzLmFmZml4JylcbiAgICAgIHZhciBvcHRpb25zID0gdHlwZW9mIG9wdGlvbiA9PSAnb2JqZWN0JyAmJiBvcHRpb25cblxuICAgICAgaWYgKCFkYXRhKSAkdGhpcy5kYXRhKCdicy5hZmZpeCcsIChkYXRhID0gbmV3IEFmZml4KHRoaXMsIG9wdGlvbnMpKSlcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9uID09ICdzdHJpbmcnKSBkYXRhW29wdGlvbl0oKVxuICAgIH0pXG4gIH1cblxuICB2YXIgb2xkID0gJC5mbi5hZmZpeFxuXG4gICQuZm4uYWZmaXggICAgICAgICAgICAgPSBQbHVnaW5cbiAgJC5mbi5hZmZpeC5Db25zdHJ1Y3RvciA9IEFmZml4XG5cblxuICAvLyBBRkZJWCBOTyBDT05GTElDVFxuICAvLyA9PT09PT09PT09PT09PT09PVxuXG4gICQuZm4uYWZmaXgubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuLmFmZml4ID0gb2xkXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG5cbiAgLy8gQUZGSVggREFUQS1BUElcbiAgLy8gPT09PT09PT09PT09PT1cblxuICAkKHdpbmRvdykub24oJ2xvYWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgJCgnW2RhdGEtc3B5PVwiYWZmaXhcIl0nKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkc3B5ID0gJCh0aGlzKVxuICAgICAgdmFyIGRhdGEgPSAkc3B5LmRhdGEoKVxuXG4gICAgICBkYXRhLm9mZnNldCA9IGRhdGEub2Zmc2V0IHx8IHt9XG5cbiAgICAgIGlmIChkYXRhLm9mZnNldEJvdHRvbSAhPSBudWxsKSBkYXRhLm9mZnNldC5ib3R0b20gPSBkYXRhLm9mZnNldEJvdHRvbVxuICAgICAgaWYgKGRhdGEub2Zmc2V0VG9wICAgICE9IG51bGwpIGRhdGEub2Zmc2V0LnRvcCAgICA9IGRhdGEub2Zmc2V0VG9wXG5cbiAgICAgIFBsdWdpbi5jYWxsKCRzcHksIGRhdGEpXG4gICAgfSlcbiAgfSlcblxufShqUXVlcnkpO1xuIiwiLyoqXG4gKiBqcXVlcnkubWFzay5qc1xuICogQHZlcnNpb246IHYxLjE0LjExXG4gKiBAYXV0aG9yOiBJZ29yIEVzY29iYXJcbiAqXG4gKiBDcmVhdGVkIGJ5IElnb3IgRXNjb2JhciBvbiAyMDEyLTAzLTEwLiBQbGVhc2UgcmVwb3J0IGFueSBidWcgYXQgaHR0cDovL2Jsb2cuaWdvcmVzY29iYXIuY29tXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEyIElnb3IgRXNjb2JhciBodHRwOi8vYmxvZy5pZ29yZXNjb2Jhci5jb21cbiAqXG4gKiBUaGUgTUlUIExpY2Vuc2UgKGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwKVxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uXG4gKiBvYnRhaW5pbmcgYSBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvblxuICogZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0XG4gKiByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSxcbiAqIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGVcbiAqIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nXG4gKiBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlXG4gKiBpbmNsdWRlZCBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELFxuICogRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTXG4gKiBPRiBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORFxuICogTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFRcbiAqIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLFxuICogV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HXG4gKiBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SXG4gKiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG4gKi9cblxuLyoganNoaW50IGxheGJyZWFrOiB0cnVlICovXG4vKiBqc2hpbnQgbWF4Y29tcGxleGl0eToxNyAqL1xuLyogZ2xvYmFsIGRlZmluZSAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8vIFVNRCAoVW5pdmVyc2FsIE1vZHVsZSBEZWZpbml0aW9uKSBwYXR0ZXJucyBmb3IgSmF2YVNjcmlwdCBtb2R1bGVzIHRoYXQgd29yayBldmVyeXdoZXJlLlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3VtZGpzL3VtZC9ibG9iL21hc3Rlci9qcXVlcnlQbHVnaW5Db21tb25qcy5qc1xuKGZ1bmN0aW9uIChmYWN0b3J5LCBqUXVlcnksIFplcHRvKSB7XG5cbiAgICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgICAgIGRlZmluZShbJ2pxdWVyeSddLCBmYWN0b3J5KTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jykge1xuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZSgnanF1ZXJ5JykpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGZhY3RvcnkoalF1ZXJ5IHx8IFplcHRvKTtcbiAgICB9XG5cbn0oZnVuY3Rpb24gKCQpIHtcblxuICAgIHZhciBNYXNrID0gZnVuY3Rpb24gKGVsLCBtYXNrLCBvcHRpb25zKSB7XG5cbiAgICAgICAgdmFyIHAgPSB7XG4gICAgICAgICAgICBpbnZhbGlkOiBbXSxcbiAgICAgICAgICAgIGdldENhcmV0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNlbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcyA9IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBjdHJsID0gZWwuZ2V0KDApLFxuICAgICAgICAgICAgICAgICAgICAgICAgZFNlbCA9IGRvY3VtZW50LnNlbGVjdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNTZWxTdGFydCA9IGN0cmwuc2VsZWN0aW9uU3RhcnQ7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gSUUgU3VwcG9ydFxuICAgICAgICAgICAgICAgICAgICBpZiAoZFNlbCAmJiBuYXZpZ2F0b3IuYXBwVmVyc2lvbi5pbmRleE9mKCdNU0lFIDEwJykgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWwgPSBkU2VsLmNyZWF0ZVJhbmdlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWwubW92ZVN0YXJ0KCdjaGFyYWN0ZXInLCAtcC52YWwoKS5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9zID0gc2VsLnRleHQubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIEZpcmVmb3ggc3VwcG9ydFxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChjU2VsU3RhcnQgfHwgY1NlbFN0YXJ0ID09PSAnMCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcyA9IGNTZWxTdGFydDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwb3M7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXRDYXJldDogZnVuY3Rpb24ocG9zKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVsLmlzKCc6Zm9jdXMnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJhbmdlLCBjdHJsID0gZWwuZ2V0KDApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBGaXJlZm94LCBXZWJLaXQsIGV0Yy4uXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3RybC5zZXRTZWxlY3Rpb25SYW5nZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0cmwuc2V0U2VsZWN0aW9uUmFuZ2UocG9zLCBwb3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsgLy8gSUVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5nZSA9IGN0cmwuY3JlYXRlVGV4dFJhbmdlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2UuY29sbGFwc2UodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2UubW92ZUVuZCgnY2hhcmFjdGVyJywgcG9zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5nZS5tb3ZlU3RhcnQoJ2NoYXJhY3RlcicsIHBvcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2Uuc2VsZWN0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGV2ZW50czogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgZWxcbiAgICAgICAgICAgICAgICAub24oJ2tleWRvd24ubWFzaycsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZWwuZGF0YSgnbWFzay1rZXljb2RlJywgZS5rZXlDb2RlIHx8IGUud2hpY2gpO1xuICAgICAgICAgICAgICAgICAgICBlbC5kYXRhKCdtYXNrLXByZXZpdXMtdmFsdWUnLCBlbC52YWwoKSk7XG4gICAgICAgICAgICAgICAgICAgIGVsLmRhdGEoJ21hc2stcHJldml1cy1jYXJldC1wb3MnLCBwLmdldENhcmV0KCkpO1xuICAgICAgICAgICAgICAgICAgICBwLm1hc2tEaWdpdFBvc01hcE9sZCA9IHAubWFza0RpZ2l0UG9zTWFwO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLm9uKCQuak1hc2tHbG9iYWxzLnVzZUlucHV0ID8gJ2lucHV0Lm1hc2snIDogJ2tleXVwLm1hc2snLCBwLmJlaGF2aW91cilcbiAgICAgICAgICAgICAgICAub24oJ3Bhc3RlLm1hc2sgZHJvcC5tYXNrJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbC5rZXlkb3duKCkua2V5dXAoKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgMTAwKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5vbignY2hhbmdlLm1hc2snLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICBlbC5kYXRhKCdjaGFuZ2VkJywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAub24oJ2JsdXIubWFzaycsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvbGRWYWx1ZSAhPT0gcC52YWwoKSAmJiAhZWwuZGF0YSgnY2hhbmdlZCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbC50cmlnZ2VyKCdjaGFuZ2UnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbC5kYXRhKCdjaGFuZ2VkJywgZmFsc2UpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLy8gaXQncyB2ZXJ5IGltcG9ydGFudCB0aGF0IHRoaXMgY2FsbGJhY2sgcmVtYWlucyBpbiB0aGlzIHBvc2l0aW9uXG4gICAgICAgICAgICAgICAgLy8gb3RoZXJ3aGlzZSBvbGRWYWx1ZSBpdCdzIGdvaW5nIHRvIHdvcmsgYnVnZ3lcbiAgICAgICAgICAgICAgICAub24oJ2JsdXIubWFzaycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBvbGRWYWx1ZSA9IHAudmFsKCk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAvLyBzZWxlY3QgYWxsIHRleHQgb24gZm9jdXNcbiAgICAgICAgICAgICAgICAub24oJ2ZvY3VzLm1hc2snLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5zZWxlY3RPbkZvY3VzID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKGUudGFyZ2V0KS5zZWxlY3QoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLy8gY2xlYXIgdGhlIHZhbHVlIGlmIGl0IG5vdCBjb21wbGV0ZSB0aGUgbWFza1xuICAgICAgICAgICAgICAgIC5vbignZm9jdXNvdXQubWFzaycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5jbGVhcklmTm90TWF0Y2ggJiYgIXJlZ2V4TWFzay50ZXN0KHAudmFsKCkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgIHAudmFsKCcnKTtcbiAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0UmVnZXhNYXNrOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgbWFza0NodW5rcyA9IFtdLCB0cmFuc2xhdGlvbiwgcGF0dGVybiwgb3B0aW9uYWwsIHJlY3Vyc2l2ZSwgb1JlY3Vyc2l2ZSwgcjtcblxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWFzay5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGlvbiA9IGpNYXNrLnRyYW5zbGF0aW9uW21hc2suY2hhckF0KGkpXTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAodHJhbnNsYXRpb24pIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcGF0dGVybiA9IHRyYW5zbGF0aW9uLnBhdHRlcm4udG9TdHJpbmcoKS5yZXBsYWNlKC8uezF9JHxeLnsxfS9nLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25hbCA9IHRyYW5zbGF0aW9uLm9wdGlvbmFsO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVjdXJzaXZlID0gdHJhbnNsYXRpb24ucmVjdXJzaXZlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVjdXJzaXZlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFza0NodW5rcy5wdXNoKG1hc2suY2hhckF0KGkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvUmVjdXJzaXZlID0ge2RpZ2l0OiBtYXNrLmNoYXJBdChpKSwgcGF0dGVybjogcGF0dGVybn07XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tDaHVua3MucHVzaCghb3B0aW9uYWwgJiYgIXJlY3Vyc2l2ZSA/IHBhdHRlcm4gOiAocGF0dGVybiArICc/JykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXNrQ2h1bmtzLnB1c2gobWFzay5jaGFyQXQoaSkucmVwbGFjZSgvWy1cXC9cXFxcXiQqKz8uKCl8W1xcXXt9XS9nLCAnXFxcXCQmJykpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgciA9IG1hc2tDaHVua3Muam9pbignJyk7XG5cbiAgICAgICAgICAgICAgICBpZiAob1JlY3Vyc2l2ZSkge1xuICAgICAgICAgICAgICAgICAgICByID0gci5yZXBsYWNlKG5ldyBSZWdFeHAoJygnICsgb1JlY3Vyc2l2ZS5kaWdpdCArICcoLionICsgb1JlY3Vyc2l2ZS5kaWdpdCArICcpPyknKSwgJygkMSk/JylcbiAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZShuZXcgUmVnRXhwKG9SZWN1cnNpdmUuZGlnaXQsICdnJyksIG9SZWN1cnNpdmUucGF0dGVybik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAocik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGVzdHJveUV2ZW50czogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgZWwub2ZmKFsnaW5wdXQnLCAna2V5ZG93bicsICdrZXl1cCcsICdwYXN0ZScsICdkcm9wJywgJ2JsdXInLCAnZm9jdXNvdXQnLCAnJ10uam9pbignLm1hc2sgJykpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHZhbDogZnVuY3Rpb24odikge1xuICAgICAgICAgICAgICAgIHZhciBpc0lucHV0ID0gZWwuaXMoJ2lucHV0JyksXG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZCA9IGlzSW5wdXQgPyAndmFsJyA6ICd0ZXh0JyxcbiAgICAgICAgICAgICAgICAgICAgcjtcblxuICAgICAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZWxbbWV0aG9kXSgpICE9PSB2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbFttZXRob2RdKHYpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHIgPSBlbDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByID0gZWxbbWV0aG9kXSgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiByO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNhbGN1bGF0ZUNhcmV0UG9zaXRpb246IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciBvbGRWYWwgPSBlbC5kYXRhKCdtYXNrLXByZXZpdXMtdmFsdWUnKSB8fCAnJyxcbiAgICAgICAgICAgICAgICAgICAgbmV3VmFsID0gcC5nZXRNYXNrZWQoKSxcbiAgICAgICAgICAgICAgICAgICAgY2FyZXRQb3NOZXcgPSBwLmdldENhcmV0KCk7XG4gICAgICAgICAgICAgICAgaWYgKG9sZFZhbCAhPT0gbmV3VmFsKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjYXJldFBvc09sZCA9IGVsLmRhdGEoJ21hc2stcHJldml1cy1jYXJldC1wb3MnKSB8fCAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3VmFsTCA9IG5ld1ZhbC5sZW5ndGgsXG4gICAgICAgICAgICAgICAgICAgICAgICBvbGRWYWxMID0gb2xkVmFsLmxlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tEaWdpdHNCZWZvcmVDYXJldCA9IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXNrRGlnaXRzQWZ0ZXJDYXJldCA9IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXNrRGlnaXRzQmVmb3JlQ2FyZXRBbGwgPSAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWFza0RpZ2l0c0JlZm9yZUNhcmV0QWxsT2xkID0gMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGkgPSAwO1xuXG4gICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IGNhcmV0UG9zTmV3OyBpIDwgbmV3VmFsTDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXAubWFza0RpZ2l0UG9zTWFwW2ldKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXNrRGlnaXRzQWZ0ZXJDYXJldCsrO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gY2FyZXRQb3NOZXcgLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFwLm1hc2tEaWdpdFBvc01hcFtpXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbWFza0RpZ2l0c0JlZm9yZUNhcmV0Kys7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSBjYXJldFBvc05ldyAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocC5tYXNrRGlnaXRQb3NNYXBbaV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXNrRGlnaXRzQmVmb3JlQ2FyZXRBbGwrKztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IGNhcmV0UG9zT2xkIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwLm1hc2tEaWdpdFBvc01hcE9sZFtpXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tEaWdpdHNCZWZvcmVDYXJldEFsbE9sZCsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNhcmV0UG9zTmV3ID4gb2xkVmFsTCkge1xuICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBjdXJzb3IgaXMgYXQgdGhlIGVuZCBrZWVwIGl0IHRoZXJlXG4gICAgICAgICAgICAgICAgICAgICAgY2FyZXRQb3NOZXcgPSBuZXdWYWxMO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGNhcmV0UG9zT2xkID49IGNhcmV0UG9zTmV3ICYmIGNhcmV0UG9zT2xkICE9PSBvbGRWYWxMKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXAubWFza0RpZ2l0UG9zTWFwT2xkW2NhcmV0UG9zTmV3XSkgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNhcmV0UG9zID0gY2FyZXRQb3NOZXc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0UG9zTmV3IC09IG1hc2tEaWdpdHNCZWZvcmVDYXJldEFsbE9sZCAtIG1hc2tEaWdpdHNCZWZvcmVDYXJldEFsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXRQb3NOZXcgLT0gbWFza0RpZ2l0c0JlZm9yZUNhcmV0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocC5tYXNrRGlnaXRQb3NNYXBbY2FyZXRQb3NOZXddKSAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0UG9zTmV3ID0gY2FyZXRQb3M7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChjYXJldFBvc05ldyA+IGNhcmV0UG9zT2xkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXJldFBvc05ldyArPSBtYXNrRGlnaXRzQmVmb3JlQ2FyZXRBbGwgLSBtYXNrRGlnaXRzQmVmb3JlQ2FyZXRBbGxPbGQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXJldFBvc05ldyArPSBtYXNrRGlnaXRzQWZ0ZXJDYXJldDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gY2FyZXRQb3NOZXc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYmVoYXZpb3VyOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgZSA9IGUgfHwgd2luZG93LmV2ZW50O1xuICAgICAgICAgICAgICAgIHAuaW52YWxpZCA9IFtdO1xuXG4gICAgICAgICAgICAgICAgdmFyIGtleUNvZGUgPSBlbC5kYXRhKCdtYXNrLWtleWNvZGUnKTtcblxuICAgICAgICAgICAgICAgIGlmICgkLmluQXJyYXkoa2V5Q29kZSwgak1hc2suYnlQYXNzS2V5cykgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXdWYWwgICA9IHAuZ2V0TWFza2VkKCksXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXJldFBvcyA9IHAuZ2V0Q2FyZXQoKTtcblxuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgIHAuc2V0Q2FyZXQocC5jYWxjdWxhdGVDYXJldFBvc2l0aW9uKCkpO1xuICAgICAgICAgICAgICAgICAgICB9LCAxMCk7XG5cbiAgICAgICAgICAgICAgICAgICAgcC52YWwobmV3VmFsKTtcbiAgICAgICAgICAgICAgICAgICAgcC5zZXRDYXJldChjYXJldFBvcyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwLmNhbGxiYWNrcyhlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0TWFza2VkOiBmdW5jdGlvbihza2lwTWFza0NoYXJzLCB2YWwpIHtcbiAgICAgICAgICAgICAgICB2YXIgYnVmID0gW10sXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsID09PSB1bmRlZmluZWQgPyBwLnZhbCgpIDogdmFsICsgJycsXG4gICAgICAgICAgICAgICAgICAgIG0gPSAwLCBtYXNrTGVuID0gbWFzay5sZW5ndGgsXG4gICAgICAgICAgICAgICAgICAgIHYgPSAwLCB2YWxMZW4gPSB2YWx1ZS5sZW5ndGgsXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IDEsIGFkZE1ldGhvZCA9ICdwdXNoJyxcbiAgICAgICAgICAgICAgICAgICAgcmVzZXRQb3MgPSAtMSxcbiAgICAgICAgICAgICAgICAgICAgbWFza0RpZ2l0Q291bnQgPSAwLFxuICAgICAgICAgICAgICAgICAgICBtYXNrRGlnaXRQb3NBcnIgPSBbXSxcbiAgICAgICAgICAgICAgICAgICAgbGFzdE1hc2tDaGFyLFxuICAgICAgICAgICAgICAgICAgICBjaGVjaztcblxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnJldmVyc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgYWRkTWV0aG9kID0gJ3Vuc2hpZnQnO1xuICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSAtMTtcbiAgICAgICAgICAgICAgICAgICAgbGFzdE1hc2tDaGFyID0gMDtcbiAgICAgICAgICAgICAgICAgICAgbSA9IG1hc2tMZW4gLSAxO1xuICAgICAgICAgICAgICAgICAgICB2ID0gdmFsTGVuIC0gMTtcbiAgICAgICAgICAgICAgICAgICAgY2hlY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbSA+IC0xICYmIHYgPiAtMTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBsYXN0TWFza0NoYXIgPSBtYXNrTGVuIC0gMTtcbiAgICAgICAgICAgICAgICAgICAgY2hlY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbSA8IG1hc2tMZW4gJiYgdiA8IHZhbExlbjtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgbGFzdFVudHJhbnNsYXRlZE1hc2tDaGFyO1xuICAgICAgICAgICAgICAgIHdoaWxlIChjaGVjaygpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXNrRGlnaXQgPSBtYXNrLmNoYXJBdChtKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbERpZ2l0ID0gdmFsdWUuY2hhckF0KHYpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRpb24gPSBqTWFzay50cmFuc2xhdGlvblttYXNrRGlnaXRdO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0cmFuc2xhdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbERpZ2l0Lm1hdGNoKHRyYW5zbGF0aW9uLnBhdHRlcm4pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVmW2FkZE1ldGhvZF0odmFsRGlnaXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHJhbnNsYXRpb24ucmVjdXJzaXZlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNldFBvcyA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc2V0UG9zID0gbTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtID09PSBsYXN0TWFza0NoYXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0gPSByZXNldFBvcyAtIG9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXN0TWFza0NoYXIgPT09IHJlc2V0UG9zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtIC09IG9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtICs9IG9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodmFsRGlnaXQgPT09IGxhc3RVbnRyYW5zbGF0ZWRNYXNrQ2hhcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG1hdGNoZWQgdGhlIGxhc3QgdW50cmFuc2xhdGVkIChyYXcpIG1hc2sgY2hhcmFjdGVyIHRoYXQgd2UgZW5jb3VudGVyZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBsaWtlbHkgYW4gaW5zZXJ0IG9mZnNldCB0aGUgbWFzayBjaGFyYWN0ZXIgZnJvbSB0aGUgbGFzdCBlbnRyeTsgZmFsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRocm91Z2ggYW5kIG9ubHkgaW5jcmVtZW50IHZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXNrRGlnaXRDb3VudC0tO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RVbnRyYW5zbGF0ZWRNYXNrQ2hhciA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHJhbnNsYXRpb24ub3B0aW9uYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtICs9IG9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2IC09IG9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHJhbnNsYXRpb24uZmFsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWZbYWRkTWV0aG9kXSh0cmFuc2xhdGlvbi5mYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSArPSBvZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdiAtPSBvZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBwLmludmFsaWQucHVzaCh7cDogdiwgdjogdmFsRGlnaXQsIGU6IHRyYW5zbGF0aW9uLnBhdHRlcm59KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHYgKz0gb2Zmc2V0O1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFza2lwTWFza0NoYXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVmW2FkZE1ldGhvZF0obWFza0RpZ2l0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbERpZ2l0ID09PSBtYXNrRGlnaXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXNrRGlnaXRQb3NBcnIucHVzaCh2KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ICs9IG9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdFVudHJhbnNsYXRlZE1hc2tDaGFyID0gbWFza0RpZ2l0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tEaWdpdFBvc0Fyci5wdXNoKHYgKyBtYXNrRGlnaXRDb3VudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFza0RpZ2l0Q291bnQrKztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgbSArPSBvZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgbGFzdE1hc2tDaGFyRGlnaXQgPSBtYXNrLmNoYXJBdChsYXN0TWFza0NoYXIpO1xuICAgICAgICAgICAgICAgIGlmIChtYXNrTGVuID09PSB2YWxMZW4gKyAxICYmICFqTWFzay50cmFuc2xhdGlvbltsYXN0TWFza0NoYXJEaWdpdF0pIHtcbiAgICAgICAgICAgICAgICAgICAgYnVmLnB1c2gobGFzdE1hc2tDaGFyRGlnaXQpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBuZXdWYWwgPSBidWYuam9pbignJyk7XG4gICAgICAgICAgICAgICAgcC5tYXBNYXNrZGlnaXRQb3NpdGlvbnMobmV3VmFsLCBtYXNrRGlnaXRQb3NBcnIsIHZhbExlbik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ld1ZhbDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBtYXBNYXNrZGlnaXRQb3NpdGlvbnM6IGZ1bmN0aW9uKG5ld1ZhbCwgbWFza0RpZ2l0UG9zQXJyLCB2YWxMZW4pIHtcbiAgICAgICAgICAgICAgdmFyIG1hc2tEaWZmID0gb3B0aW9ucy5yZXZlcnNlID8gbmV3VmFsLmxlbmd0aCAtIHZhbExlbiA6IDA7XG4gICAgICAgICAgICAgIHAubWFza0RpZ2l0UG9zTWFwID0ge307XG4gICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWFza0RpZ2l0UG9zQXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgcC5tYXNrRGlnaXRQb3NNYXBbbWFza0RpZ2l0UG9zQXJyW2ldICsgbWFza0RpZmZdID0gMTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNhbGxiYWNrczogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdmFsID0gcC52YWwoKSxcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlZCA9IHZhbCAhPT0gb2xkVmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHRBcmdzID0gW3ZhbCwgZSwgZWwsIG9wdGlvbnNdLFxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayA9IGZ1bmN0aW9uKG5hbWUsIGNyaXRlcmlhLCBhcmdzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnNbbmFtZV0gPT09ICdmdW5jdGlvbicgJiYgY3JpdGVyaWEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zW25hbWVdLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgY2FsbGJhY2soJ29uQ2hhbmdlJywgY2hhbmdlZCA9PT0gdHJ1ZSwgZGVmYXVsdEFyZ3MpO1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCdvbktleVByZXNzJywgY2hhbmdlZCA9PT0gdHJ1ZSwgZGVmYXVsdEFyZ3MpO1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCdvbkNvbXBsZXRlJywgdmFsLmxlbmd0aCA9PT0gbWFzay5sZW5ndGgsIGRlZmF1bHRBcmdzKTtcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygnb25JbnZhbGlkJywgcC5pbnZhbGlkLmxlbmd0aCA+IDAsIFt2YWwsIGUsIGVsLCBwLmludmFsaWQsIG9wdGlvbnNdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBlbCA9ICQoZWwpO1xuICAgICAgICB2YXIgak1hc2sgPSB0aGlzLCBvbGRWYWx1ZSA9IHAudmFsKCksIHJlZ2V4TWFzaztcblxuICAgICAgICBtYXNrID0gdHlwZW9mIG1hc2sgPT09ICdmdW5jdGlvbicgPyBtYXNrKHAudmFsKCksIHVuZGVmaW5lZCwgZWwsICBvcHRpb25zKSA6IG1hc2s7XG5cbiAgICAgICAgLy8gcHVibGljIG1ldGhvZHNcbiAgICAgICAgak1hc2subWFzayA9IG1hc2s7XG4gICAgICAgIGpNYXNrLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICBqTWFzay5yZW1vdmUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBjYXJldCA9IHAuZ2V0Q2FyZXQoKTtcbiAgICAgICAgICAgIHAuZGVzdHJveUV2ZW50cygpO1xuICAgICAgICAgICAgcC52YWwoak1hc2suZ2V0Q2xlYW5WYWwoKSk7XG4gICAgICAgICAgICBwLnNldENhcmV0KGNhcmV0KTtcbiAgICAgICAgICAgIHJldHVybiBlbDtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBnZXQgdmFsdWUgd2l0aG91dCBtYXNrXG4gICAgICAgIGpNYXNrLmdldENsZWFuVmFsID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgIHJldHVybiBwLmdldE1hc2tlZCh0cnVlKTtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBnZXQgbWFza2VkIHZhbHVlIHdpdGhvdXQgdGhlIHZhbHVlIGJlaW5nIGluIHRoZSBpbnB1dCBvciBlbGVtZW50XG4gICAgICAgIGpNYXNrLmdldE1hc2tlZFZhbCA9IGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICAgICByZXR1cm4gcC5nZXRNYXNrZWQoZmFsc2UsIHZhbCk7XG4gICAgICAgIH07XG5cbiAgICAgICBqTWFzay5pbml0ID0gZnVuY3Rpb24ob25seU1hc2spIHtcbiAgICAgICAgICAgIG9ubHlNYXNrID0gb25seU1hc2sgfHwgZmFsc2U7XG4gICAgICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgICAgICAgICAgak1hc2suY2xlYXJJZk5vdE1hdGNoICA9ICQuak1hc2tHbG9iYWxzLmNsZWFySWZOb3RNYXRjaDtcbiAgICAgICAgICAgIGpNYXNrLmJ5UGFzc0tleXMgICAgICAgPSAkLmpNYXNrR2xvYmFscy5ieVBhc3NLZXlzO1xuICAgICAgICAgICAgak1hc2sudHJhbnNsYXRpb24gICAgICA9ICQuZXh0ZW5kKHt9LCAkLmpNYXNrR2xvYmFscy50cmFuc2xhdGlvbiwgb3B0aW9ucy50cmFuc2xhdGlvbik7XG5cbiAgICAgICAgICAgIGpNYXNrID0gJC5leHRlbmQodHJ1ZSwge30sIGpNYXNrLCBvcHRpb25zKTtcblxuICAgICAgICAgICAgcmVnZXhNYXNrID0gcC5nZXRSZWdleE1hc2soKTtcblxuICAgICAgICAgICAgaWYgKG9ubHlNYXNrKSB7XG4gICAgICAgICAgICAgICAgcC5ldmVudHMoKTtcbiAgICAgICAgICAgICAgICBwLnZhbChwLmdldE1hc2tlZCgpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMucGxhY2Vob2xkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgZWwuYXR0cigncGxhY2Vob2xkZXInICwgb3B0aW9ucy5wbGFjZWhvbGRlcik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gdGhpcyBpcyBuZWNlc3NhcnksIG90aGVyd2lzZSBpZiB0aGUgdXNlciBzdWJtaXQgdGhlIGZvcm1cbiAgICAgICAgICAgICAgICAvLyBhbmQgdGhlbiBwcmVzcyB0aGUgXCJiYWNrXCIgYnV0dG9uLCB0aGUgYXV0b2NvbXBsZXRlIHdpbGwgZXJhc2VcbiAgICAgICAgICAgICAgICAvLyB0aGUgZGF0YS4gV29ya3MgZmluZSBvbiBJRTkrLCBGRiwgT3BlcmEsIFNhZmFyaS5cbiAgICAgICAgICAgICAgICBpZiAoZWwuZGF0YSgnbWFzaycpKSB7XG4gICAgICAgICAgICAgICAgICBlbC5hdHRyKCdhdXRvY29tcGxldGUnLCAnb2ZmJyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gZGV0ZWN0IGlmIGlzIG5lY2Vzc2FyeSBsZXQgdGhlIHVzZXIgdHlwZSBmcmVlbHkuXG4gICAgICAgICAgICAgICAgLy8gZm9yIGlzIGEgbG90IGZhc3RlciB0aGFuIGZvckVhY2guXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIG1heGxlbmd0aCA9IHRydWU7IGkgPCBtYXNrLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0cmFuc2xhdGlvbiA9IGpNYXNrLnRyYW5zbGF0aW9uW21hc2suY2hhckF0KGkpXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRyYW5zbGF0aW9uICYmIHRyYW5zbGF0aW9uLnJlY3Vyc2l2ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWF4bGVuZ3RoID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChtYXhsZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgZWwuYXR0cignbWF4bGVuZ3RoJywgbWFzay5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHAuZGVzdHJveUV2ZW50cygpO1xuICAgICAgICAgICAgICAgIHAuZXZlbnRzKCk7XG5cbiAgICAgICAgICAgICAgICB2YXIgY2FyZXQgPSBwLmdldENhcmV0KCk7XG4gICAgICAgICAgICAgICAgcC52YWwocC5nZXRNYXNrZWQoKSk7XG4gICAgICAgICAgICAgICAgcC5zZXRDYXJldChjYXJldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgak1hc2suaW5pdCghZWwuaXMoJ2lucHV0JykpO1xuICAgIH07XG5cbiAgICAkLm1hc2tXYXRjaGVycyA9IHt9O1xuICAgIHZhciBIVE1MQXR0cmlidXRlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGlucHV0ID0gJCh0aGlzKSxcbiAgICAgICAgICAgIG9wdGlvbnMgPSB7fSxcbiAgICAgICAgICAgIHByZWZpeCA9ICdkYXRhLW1hc2stJyxcbiAgICAgICAgICAgIG1hc2sgPSBpbnB1dC5hdHRyKCdkYXRhLW1hc2snKTtcblxuICAgICAgICBpZiAoaW5wdXQuYXR0cihwcmVmaXggKyAncmV2ZXJzZScpKSB7XG4gICAgICAgICAgICBvcHRpb25zLnJldmVyc2UgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlucHV0LmF0dHIocHJlZml4ICsgJ2NsZWFyaWZub3RtYXRjaCcpKSB7XG4gICAgICAgICAgICBvcHRpb25zLmNsZWFySWZOb3RNYXRjaCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaW5wdXQuYXR0cihwcmVmaXggKyAnc2VsZWN0b25mb2N1cycpID09PSAndHJ1ZScpIHtcbiAgICAgICAgICAgb3B0aW9ucy5zZWxlY3RPbkZvY3VzID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChub3RTYW1lTWFza09iamVjdChpbnB1dCwgbWFzaywgb3B0aW9ucykpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dC5kYXRhKCdtYXNrJywgbmV3IE1hc2sodGhpcywgbWFzaywgb3B0aW9ucykpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBub3RTYW1lTWFza09iamVjdCA9IGZ1bmN0aW9uKGZpZWxkLCBtYXNrLCBvcHRpb25zKSB7XG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgICB2YXIgbWFza09iamVjdCA9ICQoZmllbGQpLmRhdGEoJ21hc2snKSxcbiAgICAgICAgICAgIHN0cmluZ2lmeSA9IEpTT04uc3RyaW5naWZ5LFxuICAgICAgICAgICAgdmFsdWUgPSAkKGZpZWxkKS52YWwoKSB8fCAkKGZpZWxkKS50ZXh0KCk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG1hc2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICBtYXNrID0gbWFzayh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHlwZW9mIG1hc2tPYmplY3QgIT09ICdvYmplY3QnIHx8IHN0cmluZ2lmeShtYXNrT2JqZWN0Lm9wdGlvbnMpICE9PSBzdHJpbmdpZnkob3B0aW9ucykgfHwgbWFza09iamVjdC5tYXNrICE9PSBtYXNrO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgIH0sXG4gICAgZXZlbnRTdXBwb3J0ZWQgPSBmdW5jdGlvbihldmVudE5hbWUpIHtcbiAgICAgICAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JyksIGlzU3VwcG9ydGVkO1xuXG4gICAgICAgIGV2ZW50TmFtZSA9ICdvbicgKyBldmVudE5hbWU7XG4gICAgICAgIGlzU3VwcG9ydGVkID0gKGV2ZW50TmFtZSBpbiBlbCk7XG5cbiAgICAgICAgaWYgKCAhaXNTdXBwb3J0ZWQgKSB7XG4gICAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoZXZlbnROYW1lLCAncmV0dXJuOycpO1xuICAgICAgICAgICAgaXNTdXBwb3J0ZWQgPSB0eXBlb2YgZWxbZXZlbnROYW1lXSA9PT0gJ2Z1bmN0aW9uJztcbiAgICAgICAgfVxuICAgICAgICBlbCA9IG51bGw7XG5cbiAgICAgICAgcmV0dXJuIGlzU3VwcG9ydGVkO1xuICAgIH07XG5cbiAgICAkLmZuLm1hc2sgPSBmdW5jdGlvbihtYXNrLCBvcHRpb25zKSB7XG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgICB2YXIgc2VsZWN0b3IgPSB0aGlzLnNlbGVjdG9yLFxuICAgICAgICAgICAgZ2xvYmFscyA9ICQuak1hc2tHbG9iYWxzLFxuICAgICAgICAgICAgaW50ZXJ2YWwgPSBnbG9iYWxzLndhdGNoSW50ZXJ2YWwsXG4gICAgICAgICAgICB3YXRjaElucHV0cyA9IG9wdGlvbnMud2F0Y2hJbnB1dHMgfHwgZ2xvYmFscy53YXRjaElucHV0cyxcbiAgICAgICAgICAgIG1hc2tGdW5jdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGlmIChub3RTYW1lTWFza09iamVjdCh0aGlzLCBtYXNrLCBvcHRpb25zKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJCh0aGlzKS5kYXRhKCdtYXNrJywgbmV3IE1hc2sodGhpcywgbWFzaywgb3B0aW9ucykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgJCh0aGlzKS5lYWNoKG1hc2tGdW5jdGlvbik7XG5cbiAgICAgICAgaWYgKHNlbGVjdG9yICYmIHNlbGVjdG9yICE9PSAnJyAmJiB3YXRjaElucHV0cykge1xuICAgICAgICAgICAgY2xlYXJJbnRlcnZhbCgkLm1hc2tXYXRjaGVyc1tzZWxlY3Rvcl0pO1xuICAgICAgICAgICAgJC5tYXNrV2F0Y2hlcnNbc2VsZWN0b3JdID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAkKGRvY3VtZW50KS5maW5kKHNlbGVjdG9yKS5lYWNoKG1hc2tGdW5jdGlvbik7XG4gICAgICAgICAgICB9LCBpbnRlcnZhbCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgICQuZm4ubWFza2VkID0gZnVuY3Rpb24odmFsKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGEoJ21hc2snKS5nZXRNYXNrZWRWYWwodmFsKTtcbiAgICB9O1xuXG4gICAgJC5mbi51bm1hc2sgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgY2xlYXJJbnRlcnZhbCgkLm1hc2tXYXRjaGVyc1t0aGlzLnNlbGVjdG9yXSk7XG4gICAgICAgIGRlbGV0ZSAkLm1hc2tXYXRjaGVyc1t0aGlzLnNlbGVjdG9yXTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBkYXRhTWFzayA9ICQodGhpcykuZGF0YSgnbWFzaycpO1xuICAgICAgICAgICAgaWYgKGRhdGFNYXNrKSB7XG4gICAgICAgICAgICAgICAgZGF0YU1hc2sucmVtb3ZlKCkucmVtb3ZlRGF0YSgnbWFzaycpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgJC5mbi5jbGVhblZhbCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhKCdtYXNrJykuZ2V0Q2xlYW5WYWwoKTtcbiAgICB9O1xuXG4gICAgJC5hcHBseURhdGFNYXNrID0gZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgICAgICAgc2VsZWN0b3IgPSBzZWxlY3RvciB8fCAkLmpNYXNrR2xvYmFscy5tYXNrRWxlbWVudHM7XG4gICAgICAgIHZhciAkc2VsZWN0b3IgPSAoc2VsZWN0b3IgaW5zdGFuY2VvZiAkKSA/IHNlbGVjdG9yIDogJChzZWxlY3Rvcik7XG4gICAgICAgICRzZWxlY3Rvci5maWx0ZXIoJC5qTWFza0dsb2JhbHMuZGF0YU1hc2tBdHRyKS5lYWNoKEhUTUxBdHRyaWJ1dGVzKTtcbiAgICB9O1xuXG4gICAgdmFyIGdsb2JhbHMgPSB7XG4gICAgICAgIG1hc2tFbGVtZW50czogJ2lucHV0LHRkLHNwYW4sZGl2JyxcbiAgICAgICAgZGF0YU1hc2tBdHRyOiAnKltkYXRhLW1hc2tdJyxcbiAgICAgICAgZGF0YU1hc2s6IHRydWUsXG4gICAgICAgIHdhdGNoSW50ZXJ2YWw6IDMwMCxcbiAgICAgICAgd2F0Y2hJbnB1dHM6IHRydWUsXG4gICAgICAgIC8vIG9sZCB2ZXJzaW9ucyBvZiBjaHJvbWUgZG9udCB3b3JrIGdyZWF0IHdpdGggaW5wdXQgZXZlbnRcbiAgICAgICAgdXNlSW5wdXQ6ICEvQ2hyb21lXFwvWzItNF1bMC05XXxTYW1zdW5nQnJvd3Nlci8udGVzdCh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCkgJiYgZXZlbnRTdXBwb3J0ZWQoJ2lucHV0JyksXG4gICAgICAgIHdhdGNoRGF0YU1hc2s6IGZhbHNlLFxuICAgICAgICBieVBhc3NLZXlzOiBbOSwgMTYsIDE3LCAxOCwgMzYsIDM3LCAzOCwgMzksIDQwLCA5MV0sXG4gICAgICAgIHRyYW5zbGF0aW9uOiB7XG4gICAgICAgICAgICAnMCc6IHtwYXR0ZXJuOiAvXFxkL30sXG4gICAgICAgICAgICAnOSc6IHtwYXR0ZXJuOiAvXFxkLywgb3B0aW9uYWw6IHRydWV9LFxuICAgICAgICAgICAgJyMnOiB7cGF0dGVybjogL1xcZC8sIHJlY3Vyc2l2ZTogdHJ1ZX0sXG4gICAgICAgICAgICAnQSc6IHtwYXR0ZXJuOiAvW2EtekEtWjAtOV0vfSxcbiAgICAgICAgICAgICdTJzoge3BhdHRlcm46IC9bYS16QS1aXS99XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgJC5qTWFza0dsb2JhbHMgPSAkLmpNYXNrR2xvYmFscyB8fCB7fTtcbiAgICBnbG9iYWxzID0gJC5qTWFza0dsb2JhbHMgPSAkLmV4dGVuZCh0cnVlLCB7fSwgZ2xvYmFscywgJC5qTWFza0dsb2JhbHMpO1xuXG4gICAgLy8gbG9va2luZyBmb3IgaW5wdXRzIHdpdGggZGF0YS1tYXNrIGF0dHJpYnV0ZVxuICAgIGlmIChnbG9iYWxzLmRhdGFNYXNrKSB7XG4gICAgICAgICQuYXBwbHlEYXRhTWFzaygpO1xuICAgIH1cblxuICAgIHNldEludGVydmFsKGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoJC5qTWFza0dsb2JhbHMud2F0Y2hEYXRhTWFzaykge1xuICAgICAgICAgICAgJC5hcHBseURhdGFNYXNrKCk7XG4gICAgICAgIH1cbiAgICB9LCBnbG9iYWxzLndhdGNoSW50ZXJ2YWwpO1xufSwgd2luZG93LmpRdWVyeSwgd2luZG93LlplcHRvKSk7XG4iLCIoZnVuY3Rpb24oJCkge1xuICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkge1xuICAgICAgICBhcHAuaW5pdCgpO1xuICAgICAgICBhcHAudXRpbHMoKTtcbiAgICB9KTtcblxuICAgIHZhciBhcHAgPSB7XG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ2ZvbycpO1xuICAgICAgICAgICAgYXBwLm9zY2FyTWFpbkZvcm1zKCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgdXRpbHM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJCgnLmNoZWNrYm94IGlucHV0W3R5cGU9XCJjaGVja2JveFwiXSwgZGl2W2RhdGEtdHlwZT10cnVlX2ZhbHNlXSAuYWNmLWlucHV0IGlucHV0W3R5cGU9Y2hlY2tib3hdJykub24oJ2NoYW5nZScsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoJCh0aGlzKS5pcygnOmNoZWNrZWQnKSkge1xuICAgICAgICAgICAgICAgICAgICAkKCcuYWNmLWZvcm0tc3VibWl0IGlucHV0W3R5cGU9c3VibWl0XScpLnJlbW92ZUF0dHIoJ2Rpc2FibGVkJyk7XG4gICAgICAgICAgICAgICAgICAgICQodGhpcykucGFyZW50KCkucGFyZW50KCkuYWRkQ2xhc3MoJ3NlbGVjdGVkJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgJCgnLmFjZi1mb3JtLXN1Ym1pdCBpbnB1dFt0eXBlPXN1Ym1pdF0nKS5hdHRyKCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpO1xuICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnBhcmVudCgpLnBhcmVudCgpLnJlbW92ZUNsYXNzKCdzZWxlY3RlZCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIG9zY2FyTWFpbkZvcm1zOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICgkKCcjYWNmX2luc2NyaWNvZXMtb3NjYXItMjAxOCcpLmxlbmd0aCkge1xuICAgICAgICAgICAgXHRpZiggJCgnZGl2W2RhdGEtbmFtZT1cImRlY2xhcmFjYW9cIl0gaW5wdXRbdHlwZT1cImNoZWNrYm94XCJdJykuaXMoJzpjaGVja2VkJykgKXtcbiAgICAgICAgICAgIFx0XHQkKCdkaXZbZGF0YS1uYW1lPVwiZGVjbGFyYWNhb1wiXSBpbnB1dFt0eXBlPVwiY2hlY2tib3hcIl0nKS5wYXJlbnQoKS5wYXJlbnQoKS5hZGRDbGFzcygnc2VsZWN0ZWQnKTtcbiAgICAgICAgICAgIFx0fWVsc2V7XG4gICAgICAgICAgICBcdFx0JCgnLmFjZi1mb3JtLXN1Ym1pdCBpbnB1dFt0eXBlPXN1Ym1pdF0nKS5hdHRyKCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpO1xuICAgICAgICAgICAgXHR9XG5cbiAgICAgICAgICAgICAgICAkKCcjb3NjYXItYWRkLWNhc3QnKS5vbignY2xpY2snLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNhc3ROYW1lID0gJCgnI25vbWUtZWxlbmNvJyk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjYXN0TmF0aW9uYWxpdHkgPSAkKCcjbmFjaW9uYWxpZGFkZS1lbGVuY28nKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRlbGltaXRlciA9ICQoJyNlbGVuY28nKS52YWwoKSA9PT0gJycgPyAnJyA6ICcgfCAnO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChjYXN0TmFtZS52YWwoKS5sZW5ndGggJiYgY2FzdE5hdGlvbmFsaXR5LnZhbCgpLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJCgnI2VsZW5jbycpLnZhbCgkKCcjZWxlbmNvJykudmFsKCkgKyBkZWxpbWl0ZXIgKyBjYXN0TmFtZS52YWwoKSArICcgKCcgKyBjYXN0TmF0aW9uYWxpdHkudmFsKCkgKyAnKScpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXN0TmFtZS52YWwoJycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzdE5hdGlvbmFsaXR5LnZhbCgnJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjYXN0VmFsID0gJCgnI2VsZW5jbycpLnZhbCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlcyA9IGNhc3RWYWwuc3BsaXQoJyB8ICcpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAkKCcjY2FzdC1ob2xkZXIgdWwnKS5odG1sKCcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICQocmVzKS5lYWNoKGZ1bmN0aW9uKGksIHZhbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpdGVtID0gJzxsaSBjbGFzcz1cImxpc3QtZ3JvdXAtaXRlbVwiPjxzcGFuPicgKyB2YWwgKyAnPC9zcGFuPjxhIGhyZWY9XCIhI1wiPjxzcGFuIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1yZW1vdmUtc2lnblwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvc3Bhbj48L2E+PC9saT4nO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJyNjYXN0LWhvbGRlciB1bCcpLmFwcGVuZChpdGVtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0NhbXBvIHZhemlvJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAgICAgJCgnYm9keScpLm9uKCdjbGljaycsICcjY2FzdC1ob2xkZXIgLmxpc3QtZ3JvdXAgLmxpc3QtZ3JvdXAtaXRlbSBhJywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjYXN0VmFsID0gJCgnI2VsZW5jbycpLnZhbCgpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgYXJyID0gY2FzdFZhbC5zcGxpdCgnIHwgJyk7XG4gICAgICAgICAgICAgICAgICAgIGFyci5zcGxpY2UoYXJyLmluZGV4T2YoJCh0aGlzKS5wYXJlbnQoKS5maW5kKCdzcGFuJykudGV4dCgpKSwgMSk7XG5cbiAgICAgICAgICAgICAgICAgICAgJCgnI2VsZW5jbycpLnZhbCgnJyk7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gYXJyLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRlbGltaXRlciA9ICQoJyNlbGVuY28nKS52YWwoKSA9PT0gJycgPyAnJyA6ICcgfCAnO1xuICAgICAgICAgICAgICAgICAgICAgICAgJCgnI2VsZW5jbycpLnZhbCgkKCcjZWxlbmNvJykudmFsKCkgKyBkZWxpbWl0ZXIgKyBhcnJbaV0pO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5wYXJlbnQoKS5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICQoJ2RpdltkYXRhLW5hbWU9XCJkYXRhX2VzdHJlaWFcIl0gaW5wdXQnKS5tYXNrKCcwMC8wMC8wMDAwJyk7XG5cbiAgICAgICAgICAgICAgICB2YXIgbWFza0JlaGF2aW9yID0gZnVuY3Rpb24odmFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsLnJlcGxhY2UoL1xcRC9nLCAnJykubGVuZ3RoID09PSAxMSA/ICcoMDApIDAwMDAwLTAwMDAnIDogJygwMCkgMDAwMC0wMDAwOSc7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvbktleVByZXNzOiBmdW5jdGlvbih2YWwsIGUsIGZpZWxkLCBvcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmllbGQubWFzayhtYXNrQmVoYXZpb3IuYXBwbHkoe30sIGFyZ3VtZW50cyksIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgLy8gJCgnI2VtcHJlc2EtcHJvZHV0b3JhLXRlbGVmb25lLCAjZW1wcmVzYS1wcm9kdXRvcmEtZmF4JykubWFzayhtYXNrQmVoYXZpb3IsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgICQoJ2RpdltkYXRhLW5hbWU9XCJlbXByZXNhX3RlbGVmb25lXCJdIGlucHV0LCBkaXZbZGF0YS1uYW1lPVwiZW1wcmVzYV9mYXhcIl0gaW5wdXQnKS5tYXNrKG1hc2tCZWhhdmlvciwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgLy8gJCgnZGl2e2RhdGEtbmFtZT1cImFuZXhvc1wiXSB0YWJsZSA+IHRib2R5ID4gdHIuYWNmLXJvdycpXG4gICAgICAgICAgICAgICAgJC5lYWNoKCAkKCdkaXZbZGF0YS1uYW1lPVwiYW5leG9zXCJdIHRhYmxlID4gdGJvZHkgPiB0ci5hY2Ytcm93JyksIGZ1bmN0aW9uKCBpLCByb3dFbCApIHtcbiAgICAgICAgICAgICAgICAgIFx0Y29uc29sZS5sb2coIHJvd0VsICk7XG4gICAgICAgICAgICAgICAgICBcdC8vIGlmKCAnLmZpbGUtd3JhcCAuZmlsZS1pbmZvIHN0cm9uZ1tkYXRhLW5hbWU9XCJ0aXRsZVwiXScgKVxuICAgICAgICAgICAgICAgICAgXHQkKHRoaXMpLmZpbmQoJy5maWxlLXdyYXAgLmZpbGUtaW5mbyBzdHJvbmdbZGF0YS1uYW1lPVwidGl0bGVcIl0nKS5hZGRDbGFzcygneHh4Jyk7XG4gICAgICAgICAgICAgICAgICBcdGlmKCAkKHRoaXMpLmZpbmQoJy5maWxlLXdyYXAgLmZpbGUtaW5mbyBzdHJvbmdbZGF0YS1uYW1lPVwidGl0bGVcIl0nKS50ZXh0KCkgIT09ICcnICl7XG4gICAgICAgICAgICAgICAgICBcdFx0JCh0aGlzKS5maW5kKCcuZmlsZS13cmFwJykuc2hvdygpO1xuICAgICAgICAgICAgICAgICAgXHRcdCQodGhpcykuZmluZCgnLmhpZGUtaWYtdmFsdWUnKS5oaWRlKCk7XG4gICAgICAgICAgICAgICAgICBcdH1cblxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoJCgnI29zY2FyLXZpZGVvLWZvcm0nKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAkKGRvY3VtZW50KS5vbignY2hhbmdlJywgJyNvc2Nhci12aWRlbycsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCQodGhpcylbMF0uZmlsZXNbMF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJyNvc2Nhci12aWRlby1uYW1lJykudGV4dCgkKHRoaXMpWzBdLmZpbGVzWzBdLm5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJCgnI29zY2FyLXZpZGVvLXVwbG9hZC1idG4nKS5yZW1vdmVBdHRyKCdkaXNhYmxlZCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJCgnI29zY2FyLXZpZGVvLWZvcm0gLnZpZGVvLWRyYWctYXJlYScpLmFkZENsYXNzKCdyZWFkeS10by11cGxvYWQnKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJyNvc2Nhci12aWRlby1uYW1lJykudGV4dCgnJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKCcjb3NjYXItdmlkZW8tdXBsb2FkLWJ0bicpLmF0dHIoJ2Rpc2FibGVkJywgJ2Rpc2FibGVkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKCcjb3NjYXItdmlkZW8tZm9ybSAudmlkZW8tZHJhZy1hcmVhJykucmVtb3ZlQ2xhc3MoJ3JlYWR5LXRvLXVwbG9hZCcpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAkKFwiI29zY2FyLXZpZGVvLWZvcm1cIikub24oJ3N1Ym1pdCcsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICAkKCcjb3NjYXItdmlkZW8tZm9ybSAubXlwcm9ncmVzcycpLmNzcygnd2lkdGgnLCAnMCcpO1xuICAgICAgICAgICAgICAgICAgICAkKCcjb3NjYXItdmlkZW8tZm9ybSAubXNnJykudGV4dCgnJyk7XG4gICAgICAgICAgICAgICAgICAgIC8vIHZhciBmaWxlbmFtZSA9ICQoJyNmaWxlbmFtZScpLnZhbCgpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZmlsZW5hbWUgPSAnRm9vYmFyJztcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9zY2FyVmlkZW8gPSAkKCcjb3NjYXItdmlkZW8nKS52YWwoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9zY2FyVmlkZW8gPT0gJycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KCdQb3IgZmF2b3IsIHNlbGVjaW9uZSB1bSBhcnF1aXZvIHBhcmEgdXBsb2FkLicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZhciBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xuICAgICAgICAgICAgICAgICAgICBmb3JtRGF0YS5hcHBlbmQoJ29zY2FyVmlkZW8nLCAkKCcjb3NjYXItdmlkZW8nKVswXS5maWxlc1swXSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIGZvcm1EYXRhLmFwcGVuZCgnZmlsZW5hbWUnLCBmaWxlbmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIGZvcm1EYXRhLmFwcGVuZCgnYWN0aW9uJywgJ3VwbG9hZF9vc2Nhcl92aWRlbycpO1xuICAgICAgICAgICAgICAgICAgICAvLyAkKCcjYnRuJykuYXR0cignZGlzYWJsZWQnLCAnZGlzYWJsZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgJCgnI29zY2FyLXZpZGVvLWZvcm0gLm1zZycpLnRleHQoJ1VwbG9hZCBlbSBwcm9ncmVzc28sIHBvciBmYXZvciwgYWd1YXJkZS4uLicpO1xuICAgICAgICAgICAgICAgICAgICAkLmFqYXgoe1xuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBvc2NhckpTLmFqYXh1cmwsXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBmb3JtRGF0YSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3NEYXRhOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRUeXBlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdQT1NUJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJlZm9yZVNlbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJyN1cGxvYWQtc3RhdHVzJykucmVtb3ZlQ2xhc3MoJ2hpZGRlbicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoaXMgcGFydCBpcyBwcm9ncmVzcyBiYXJcbiAgICAgICAgICAgICAgICAgICAgICAgIHhocjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHhociA9IG5ldyB3aW5kb3cuWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4aHIudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoXCJwcm9ncmVzc1wiLCBmdW5jdGlvbihldnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2dC5sZW5ndGhDb21wdXRhYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGVyY2VudENvbXBsZXRlID0gZXZ0LmxvYWRlZCAvIGV2dC50b3RhbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlcmNlbnRDb21wbGV0ZSA9IHBhcnNlSW50KHBlcmNlbnRDb21wbGV0ZSAqIDEwMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcjb3NjYXItdmlkZW8tZm9ybSAubXlwcm9ncmVzcycpLnRleHQocGVyY2VudENvbXBsZXRlICsgJyUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJyNvc2Nhci12aWRlby1mb3JtIC5teXByb2dyZXNzJykuY3NzKCd3aWR0aCcsIHBlcmNlbnRDb21wbGV0ZSArICclJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHhocjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnI29zY2FyLXZpZGVvLWZvcm0gLm1zZycpLmFkZENsYXNzKCdzdWNjZXNzJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnI29zY2FyLXZpZGVvLWZvcm0gLm1zZycpLmh0bWwoZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAvLyByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICgkKCcjb3NjYXItcmVnaXN0ZXItZm9ybScpLmxlbmd0aCkge1xuICAgICAgICAgICBcdFx0JCgnaW5wdXRbbmFtZT1cImNucGpcIl0nKS5tYXNrKCcwMC4wMDAuMDAwLzAwMDAtMDAnLCB7cmV2ZXJzZTogdHJ1ZX0pOyBcdFxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cbiAgICB9O1xufSkoalF1ZXJ5KTsiXX0=
