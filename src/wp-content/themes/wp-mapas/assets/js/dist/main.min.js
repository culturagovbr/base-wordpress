if("undefined"==typeof jQuery)throw new Error("Bootstrap's JavaScript requires jQuery");+function(t){"use strict";var e=t.fn.jquery.split(" ")[0].split(".");if(e[0]<2&&e[1]<9||1==e[0]&&9==e[1]&&e[2]<1||e[0]>3)throw new Error("Bootstrap's JavaScript requires jQuery version 1.9.1 or higher, but lower than version 4")}(jQuery),function(t){"use strict";function e(){var t=document.createElement("bootstrap"),e={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(var i in e)if(void 0!==t.style[i])return{end:e[i]};return!1}t.fn.emulateTransitionEnd=function(e){var i=!1,o=this;t(this).one("bsTransitionEnd",function(){i=!0});var n=function(){i||t(o).trigger(t.support.transition.end)};return setTimeout(n,e),this},t(function(){t.support.transition=e(),t.support.transition&&(t.event.special.bsTransitionEnd={bindType:t.support.transition.end,delegateType:t.support.transition.end,handle:function(e){if(t(e.target).is(this))return e.handleObj.handler.apply(this,arguments)}})})}(jQuery),function(t){"use strict";function e(e){return this.each(function(){var i=t(this),n=i.data("bs.alert");n||i.data("bs.alert",n=new o(this)),"string"==typeof e&&n[e].call(i)})}var i='[data-dismiss="alert"]',o=function(e){t(e).on("click",i,this.close)};o.VERSION="3.3.7",o.TRANSITION_DURATION=150,o.prototype.close=function(e){function i(){a.detach().trigger("closed.bs.alert").remove()}var n=t(this),s=n.attr("data-target");s||(s=n.attr("href"),s=s&&s.replace(/.*(?=#[^\s]*$)/,""));var a=t("#"===s?[]:s);e&&e.preventDefault(),a.length||(a=n.closest(".alert")),a.trigger(e=t.Event("close.bs.alert")),e.isDefaultPrevented()||(a.removeClass("in"),t.support.transition&&a.hasClass("fade")?a.one("bsTransitionEnd",i).emulateTransitionEnd(o.TRANSITION_DURATION):i())};var n=t.fn.alert;t.fn.alert=e,t.fn.alert.Constructor=o,t.fn.alert.noConflict=function(){return t.fn.alert=n,this},t(document).on("click.bs.alert.data-api",i,o.prototype.close)}(jQuery),function(t){"use strict";function e(e){return this.each(function(){var o=t(this),n=o.data("bs.button"),s="object"==typeof e&&e;n||o.data("bs.button",n=new i(this,s)),"toggle"==e?n.toggle():e&&n.setState(e)})}var i=function(e,o){this.$element=t(e),this.options=t.extend({},i.DEFAULTS,o),this.isLoading=!1};i.VERSION="3.3.7",i.DEFAULTS={loadingText:"loading..."},i.prototype.setState=function(e){var i="disabled",o=this.$element,n=o.is("input")?"val":"html",s=o.data();e+="Text",null==s.resetText&&o.data("resetText",o[n]()),setTimeout(t.proxy(function(){o[n](null==s[e]?this.options[e]:s[e]),"loadingText"==e?(this.isLoading=!0,o.addClass(i).attr(i,i).prop(i,!0)):this.isLoading&&(this.isLoading=!1,o.removeClass(i).removeAttr(i).prop(i,!1))},this),0)},i.prototype.toggle=function(){var t=!0,e=this.$element.closest('[data-toggle="buttons"]');if(e.length){var i=this.$element.find("input");"radio"==i.prop("type")?(i.prop("checked")&&(t=!1),e.find(".active").removeClass("active"),this.$element.addClass("active")):"checkbox"==i.prop("type")&&(i.prop("checked")!==this.$element.hasClass("active")&&(t=!1),this.$element.toggleClass("active")),i.prop("checked",this.$element.hasClass("active")),t&&i.trigger("change")}else this.$element.attr("aria-pressed",!this.$element.hasClass("active")),this.$element.toggleClass("active")};var o=t.fn.button;t.fn.button=e,t.fn.button.Constructor=i,t.fn.button.noConflict=function(){return t.fn.button=o,this},t(document).on("click.bs.button.data-api",'[data-toggle^="button"]',function(i){var o=t(i.target).closest(".btn");e.call(o,"toggle"),t(i.target).is('input[type="radio"], input[type="checkbox"]')||(i.preventDefault(),o.is("input,button")?o.trigger("focus"):o.find("input:visible,button:visible").first().trigger("focus"))}).on("focus.bs.button.data-api blur.bs.button.data-api",'[data-toggle^="button"]',function(e){t(e.target).closest(".btn").toggleClass("focus",/^focus(in)?$/.test(e.type))})}(jQuery),function(t){"use strict";function e(e){return this.each(function(){var o=t(this),n=o.data("bs.carousel"),s=t.extend({},i.DEFAULTS,o.data(),"object"==typeof e&&e),a="string"==typeof e?e:s.slide;n||o.data("bs.carousel",n=new i(this,s)),"number"==typeof e?n.to(e):a?n[a]():s.interval&&n.pause().cycle()})}var i=function(e,i){this.$element=t(e),this.$indicators=this.$element.find(".carousel-indicators"),this.options=i,this.paused=null,this.sliding=null,this.interval=null,this.$active=null,this.$items=null,this.options.keyboard&&this.$element.on("keydown.bs.carousel",t.proxy(this.keydown,this)),"hover"==this.options.pause&&!("ontouchstart"in document.documentElement)&&this.$element.on("mouseenter.bs.carousel",t.proxy(this.pause,this)).on("mouseleave.bs.carousel",t.proxy(this.cycle,this))};i.VERSION="3.3.7",i.TRANSITION_DURATION=600,i.DEFAULTS={interval:5e3,pause:"hover",wrap:!0,keyboard:!0},i.prototype.keydown=function(t){if(!/input|textarea/i.test(t.target.tagName)){switch(t.which){case 37:this.prev();break;case 39:this.next();break;default:return}t.preventDefault()}},i.prototype.cycle=function(e){return e||(this.paused=!1),this.interval&&clearInterval(this.interval),this.options.interval&&!this.paused&&(this.interval=setInterval(t.proxy(this.next,this),this.options.interval)),this},i.prototype.getItemIndex=function(t){return this.$items=t.parent().children(".item"),this.$items.index(t||this.$active)},i.prototype.getItemForDirection=function(t,e){var i=this.getItemIndex(e);if(("prev"==t&&0===i||"next"==t&&i==this.$items.length-1)&&!this.options.wrap)return e;var o="prev"==t?-1:1,n=(i+o)%this.$items.length;return this.$items.eq(n)},i.prototype.to=function(t){var e=this,i=this.getItemIndex(this.$active=this.$element.find(".item.active"));if(!(t>this.$items.length-1||t<0))return this.sliding?this.$element.one("slid.bs.carousel",function(){e.to(t)}):i==t?this.pause().cycle():this.slide(t>i?"next":"prev",this.$items.eq(t))},i.prototype.pause=function(e){return e||(this.paused=!0),this.$element.find(".next, .prev").length&&t.support.transition&&(this.$element.trigger(t.support.transition.end),this.cycle(!0)),this.interval=clearInterval(this.interval),this},i.prototype.next=function(){if(!this.sliding)return this.slide("next")},i.prototype.prev=function(){if(!this.sliding)return this.slide("prev")},i.prototype.slide=function(e,o){var n=this.$element.find(".item.active"),s=o||this.getItemForDirection(e,n),a=this.interval,r="next"==e?"left":"right",l=this;if(s.hasClass("active"))return this.sliding=!1;var h=s[0],d=t.Event("slide.bs.carousel",{relatedTarget:h,direction:r});if(this.$element.trigger(d),!d.isDefaultPrevented()){if(this.sliding=!0,a&&this.pause(),this.$indicators.length){this.$indicators.find(".active").removeClass("active");var p=t(this.$indicators.children()[this.getItemIndex(s)]);p&&p.addClass("active")}var c=t.Event("slid.bs.carousel",{relatedTarget:h,direction:r});return t.support.transition&&this.$element.hasClass("slide")?(s.addClass(e),s[0].offsetWidth,n.addClass(r),s.addClass(r),n.one("bsTransitionEnd",function(){s.removeClass([e,r].join(" ")).addClass("active"),n.removeClass(["active",r].join(" ")),l.sliding=!1,setTimeout(function(){l.$element.trigger(c)},0)}).emulateTransitionEnd(i.TRANSITION_DURATION)):(n.removeClass("active"),s.addClass("active"),this.sliding=!1,this.$element.trigger(c)),a&&this.cycle(),this}};var o=t.fn.carousel;t.fn.carousel=e,t.fn.carousel.Constructor=i,t.fn.carousel.noConflict=function(){return t.fn.carousel=o,this};var n=function(i){var o,n=t(this),s=t(n.attr("data-target")||(o=n.attr("href"))&&o.replace(/.*(?=#[^\s]+$)/,""));if(s.hasClass("carousel")){var a=t.extend({},s.data(),n.data()),r=n.attr("data-slide-to");r&&(a.interval=!1),e.call(s,a),r&&s.data("bs.carousel").to(r),i.preventDefault()}};t(document).on("click.bs.carousel.data-api","[data-slide]",n).on("click.bs.carousel.data-api","[data-slide-to]",n),t(window).on("load",function(){t('[data-ride="carousel"]').each(function(){var i=t(this);e.call(i,i.data())})})}(jQuery),function(t){"use strict";function e(e){var i,o=e.attr("data-target")||(i=e.attr("href"))&&i.replace(/.*(?=#[^\s]+$)/,"");return t(o)}function i(e){return this.each(function(){var i=t(this),n=i.data("bs.collapse"),s=t.extend({},o.DEFAULTS,i.data(),"object"==typeof e&&e);!n&&s.toggle&&/show|hide/.test(e)&&(s.toggle=!1),n||i.data("bs.collapse",n=new o(this,s)),"string"==typeof e&&n[e]()})}var o=function(e,i){this.$element=t(e),this.options=t.extend({},o.DEFAULTS,i),this.$trigger=t('[data-toggle="collapse"][href="#'+e.id+'"],[data-toggle="collapse"][data-target="#'+e.id+'"]'),this.transitioning=null,this.options.parent?this.$parent=this.getParent():this.addAriaAndCollapsedClass(this.$element,this.$trigger),this.options.toggle&&this.toggle()};o.VERSION="3.3.7",o.TRANSITION_DURATION=350,o.DEFAULTS={toggle:!0},o.prototype.dimension=function(){return this.$element.hasClass("width")?"width":"height"},o.prototype.show=function(){if(!this.transitioning&&!this.$element.hasClass("in")){var e,n=this.$parent&&this.$parent.children(".panel").children(".in, .collapsing");if(!(n&&n.length&&(e=n.data("bs.collapse"))&&e.transitioning)){var s=t.Event("show.bs.collapse");if(this.$element.trigger(s),!s.isDefaultPrevented()){n&&n.length&&(i.call(n,"hide"),e||n.data("bs.collapse",null));var a=this.dimension();this.$element.removeClass("collapse").addClass("collapsing")[a](0).attr("aria-expanded",!0),this.$trigger.removeClass("collapsed").attr("aria-expanded",!0),this.transitioning=1;var r=function(){this.$element.removeClass("collapsing").addClass("collapse in")[a](""),this.transitioning=0,this.$element.trigger("shown.bs.collapse")};if(!t.support.transition)return r.call(this);var l=t.camelCase(["scroll",a].join("-"));this.$element.one("bsTransitionEnd",t.proxy(r,this)).emulateTransitionEnd(o.TRANSITION_DURATION)[a](this.$element[0][l])}}}},o.prototype.hide=function(){if(!this.transitioning&&this.$element.hasClass("in")){var e=t.Event("hide.bs.collapse");if(this.$element.trigger(e),!e.isDefaultPrevented()){var i=this.dimension();this.$element[i](this.$element[i]())[0].offsetHeight,this.$element.addClass("collapsing").removeClass("collapse in").attr("aria-expanded",!1),this.$trigger.addClass("collapsed").attr("aria-expanded",!1),this.transitioning=1;var n=function(){this.transitioning=0,this.$element.removeClass("collapsing").addClass("collapse").trigger("hidden.bs.collapse")};if(!t.support.transition)return n.call(this);this.$element[i](0).one("bsTransitionEnd",t.proxy(n,this)).emulateTransitionEnd(o.TRANSITION_DURATION)}}},o.prototype.toggle=function(){this[this.$element.hasClass("in")?"hide":"show"]()},o.prototype.getParent=function(){return t(this.options.parent).find('[data-toggle="collapse"][data-parent="'+this.options.parent+'"]').each(t.proxy(function(i,o){var n=t(o);this.addAriaAndCollapsedClass(e(n),n)},this)).end()},o.prototype.addAriaAndCollapsedClass=function(t,e){var i=t.hasClass("in");t.attr("aria-expanded",i),e.toggleClass("collapsed",!i).attr("aria-expanded",i)};var n=t.fn.collapse;t.fn.collapse=i,t.fn.collapse.Constructor=o,t.fn.collapse.noConflict=function(){return t.fn.collapse=n,this},t(document).on("click.bs.collapse.data-api",'[data-toggle="collapse"]',function(o){var n=t(this);n.attr("data-target")||o.preventDefault();var s=e(n),a=s.data("bs.collapse"),r=a?"toggle":n.data();i.call(s,r)})}(jQuery),function(t){"use strict";function e(e){var i=e.attr("data-target");i||(i=e.attr("href"),i=i&&/#[A-Za-z]/.test(i)&&i.replace(/.*(?=#[^\s]*$)/,""));var o=i&&t(i);return o&&o.length?o:e.parent()}function i(i){i&&3===i.which||(t(n).remove(),t(s).each(function(){var o=t(this),n=e(o),s={relatedTarget:this};n.hasClass("open")&&(i&&"click"==i.type&&/input|textarea/i.test(i.target.tagName)&&t.contains(n[0],i.target)||(n.trigger(i=t.Event("hide.bs.dropdown",s)),i.isDefaultPrevented()||(o.attr("aria-expanded","false"),n.removeClass("open").trigger(t.Event("hidden.bs.dropdown",s)))))}))}function o(e){return this.each(function(){var i=t(this),o=i.data("bs.dropdown");o||i.data("bs.dropdown",o=new a(this)),"string"==typeof e&&o[e].call(i)})}var n=".dropdown-backdrop",s='[data-toggle="dropdown"]',a=function(e){t(e).on("click.bs.dropdown",this.toggle)};a.VERSION="3.3.7",a.prototype.toggle=function(o){var n=t(this);if(!n.is(".disabled, :disabled")){var s=e(n),a=s.hasClass("open");if(i(),!a){"ontouchstart"in document.documentElement&&!s.closest(".navbar-nav").length&&t(document.createElement("div")).addClass("dropdown-backdrop").insertAfter(t(this)).on("click",i);var r={relatedTarget:this};if(s.trigger(o=t.Event("show.bs.dropdown",r)),o.isDefaultPrevented())return;n.trigger("focus").attr("aria-expanded","true"),s.toggleClass("open").trigger(t.Event("shown.bs.dropdown",r))}return!1}},a.prototype.keydown=function(i){if(/(38|40|27|32)/.test(i.which)&&!/input|textarea/i.test(i.target.tagName)){var o=t(this);if(i.preventDefault(),i.stopPropagation(),!o.is(".disabled, :disabled")){var n=e(o),a=n.hasClass("open");if(!a&&27!=i.which||a&&27==i.which)return 27==i.which&&n.find(s).trigger("focus"),o.trigger("click");var r=n.find(".dropdown-menu li:not(.disabled):visible a");if(r.length){var l=r.index(i.target);38==i.which&&l>0&&l--,40==i.which&&l<r.length-1&&l++,~l||(l=0),r.eq(l).trigger("focus")}}}};var r=t.fn.dropdown;t.fn.dropdown=o,t.fn.dropdown.Constructor=a,t.fn.dropdown.noConflict=function(){return t.fn.dropdown=r,this},t(document).on("click.bs.dropdown.data-api",i).on("click.bs.dropdown.data-api",".dropdown form",function(t){t.stopPropagation()}).on("click.bs.dropdown.data-api",s,a.prototype.toggle).on("keydown.bs.dropdown.data-api",s,a.prototype.keydown).on("keydown.bs.dropdown.data-api",".dropdown-menu",a.prototype.keydown)}(jQuery),function(t){"use strict";function e(e,o){return this.each(function(){var n=t(this),s=n.data("bs.modal"),a=t.extend({},i.DEFAULTS,n.data(),"object"==typeof e&&e);s||n.data("bs.modal",s=new i(this,a)),"string"==typeof e?s[e](o):a.show&&s.show(o)})}var i=function(e,i){this.options=i,this.$body=t(document.body),this.$element=t(e),this.$dialog=this.$element.find(".modal-dialog"),this.$backdrop=null,this.isShown=null,this.originalBodyPad=null,this.scrollbarWidth=0,this.ignoreBackdropClick=!1,this.options.remote&&this.$element.find(".modal-content").load(this.options.remote,t.proxy(function(){this.$element.trigger("loaded.bs.modal")},this))};i.VERSION="3.3.7",i.TRANSITION_DURATION=300,i.BACKDROP_TRANSITION_DURATION=150,i.DEFAULTS={backdrop:!0,keyboard:!0,show:!0},i.prototype.toggle=function(t){return this.isShown?this.hide():this.show(t)},i.prototype.show=function(e){var o=this,n=t.Event("show.bs.modal",{relatedTarget:e});this.$element.trigger(n),this.isShown||n.isDefaultPrevented()||(this.isShown=!0,this.checkScrollbar(),this.setScrollbar(),this.$body.addClass("modal-open"),this.escape(),this.resize(),this.$element.on("click.dismiss.bs.modal",'[data-dismiss="modal"]',t.proxy(this.hide,this)),this.$dialog.on("mousedown.dismiss.bs.modal",function(){o.$element.one("mouseup.dismiss.bs.modal",function(e){t(e.target).is(o.$element)&&(o.ignoreBackdropClick=!0)})}),this.backdrop(function(){var n=t.support.transition&&o.$element.hasClass("fade");o.$element.parent().length||o.$element.appendTo(o.$body),o.$element.show().scrollTop(0),o.adjustDialog(),n&&o.$element[0].offsetWidth,o.$element.addClass("in"),o.enforceFocus();var s=t.Event("shown.bs.modal",{relatedTarget:e});n?o.$dialog.one("bsTransitionEnd",function(){o.$element.trigger("focus").trigger(s)}).emulateTransitionEnd(i.TRANSITION_DURATION):o.$element.trigger("focus").trigger(s)}))},i.prototype.hide=function(e){e&&e.preventDefault(),e=t.Event("hide.bs.modal"),this.$element.trigger(e),this.isShown&&!e.isDefaultPrevented()&&(this.isShown=!1,this.escape(),this.resize(),t(document).off("focusin.bs.modal"),this.$element.removeClass("in").off("click.dismiss.bs.modal").off("mouseup.dismiss.bs.modal"),this.$dialog.off("mousedown.dismiss.bs.modal"),t.support.transition&&this.$element.hasClass("fade")?this.$element.one("bsTransitionEnd",t.proxy(this.hideModal,this)).emulateTransitionEnd(i.TRANSITION_DURATION):this.hideModal())},i.prototype.enforceFocus=function(){t(document).off("focusin.bs.modal").on("focusin.bs.modal",t.proxy(function(t){document===t.target||this.$element[0]===t.target||this.$element.has(t.target).length||this.$element.trigger("focus")},this))},i.prototype.escape=function(){this.isShown&&this.options.keyboard?this.$element.on("keydown.dismiss.bs.modal",t.proxy(function(t){27==t.which&&this.hide()},this)):this.isShown||this.$element.off("keydown.dismiss.bs.modal")},i.prototype.resize=function(){this.isShown?t(window).on("resize.bs.modal",t.proxy(this.handleUpdate,this)):t(window).off("resize.bs.modal")},i.prototype.hideModal=function(){var t=this;this.$element.hide(),this.backdrop(function(){t.$body.removeClass("modal-open"),t.resetAdjustments(),t.resetScrollbar(),t.$element.trigger("hidden.bs.modal")})},i.prototype.removeBackdrop=function(){this.$backdrop&&this.$backdrop.remove(),this.$backdrop=null},i.prototype.backdrop=function(e){var o=this,n=this.$element.hasClass("fade")?"fade":"";if(this.isShown&&this.options.backdrop){var s=t.support.transition&&n;if(this.$backdrop=t(document.createElement("div")).addClass("modal-backdrop "+n).appendTo(this.$body),this.$element.on("click.dismiss.bs.modal",t.proxy(function(t){if(this.ignoreBackdropClick)return void(this.ignoreBackdropClick=!1);t.target===t.currentTarget&&("static"==this.options.backdrop?this.$element[0].focus():this.hide())},this)),s&&this.$backdrop[0].offsetWidth,this.$backdrop.addClass("in"),!e)return;s?this.$backdrop.one("bsTransitionEnd",e).emulateTransitionEnd(i.BACKDROP_TRANSITION_DURATION):e()}else if(!this.isShown&&this.$backdrop){this.$backdrop.removeClass("in");var a=function(){o.removeBackdrop(),e&&e()};t.support.transition&&this.$element.hasClass("fade")?this.$backdrop.one("bsTransitionEnd",a).emulateTransitionEnd(i.BACKDROP_TRANSITION_DURATION):a()}else e&&e()},i.prototype.handleUpdate=function(){this.adjustDialog()},i.prototype.adjustDialog=function(){var t=this.$element[0].scrollHeight>document.documentElement.clientHeight;this.$element.css({paddingLeft:!this.bodyIsOverflowing&&t?this.scrollbarWidth:"",paddingRight:this.bodyIsOverflowing&&!t?this.scrollbarWidth:""})},i.prototype.resetAdjustments=function(){this.$element.css({paddingLeft:"",paddingRight:""})},i.prototype.checkScrollbar=function(){var t=window.innerWidth;if(!t){var e=document.documentElement.getBoundingClientRect();t=e.right-Math.abs(e.left)}this.bodyIsOverflowing=document.body.clientWidth<t,this.scrollbarWidth=this.measureScrollbar()},i.prototype.setScrollbar=function(){var t=parseInt(this.$body.css("padding-right")||0,10);this.originalBodyPad=document.body.style.paddingRight||"",this.bodyIsOverflowing&&this.$body.css("padding-right",t+this.scrollbarWidth)},i.prototype.resetScrollbar=function(){this.$body.css("padding-right",this.originalBodyPad)},i.prototype.measureScrollbar=function(){var t=document.createElement("div");t.className="modal-scrollbar-measure",this.$body.append(t);var e=t.offsetWidth-t.clientWidth;return this.$body[0].removeChild(t),e};var o=t.fn.modal;t.fn.modal=e,t.fn.modal.Constructor=i,t.fn.modal.noConflict=function(){return t.fn.modal=o,this},t(document).on("click.bs.modal.data-api",'[data-toggle="modal"]',function(i){var o=t(this),n=o.attr("href"),s=t(o.attr("data-target")||n&&n.replace(/.*(?=#[^\s]+$)/,"")),a=s.data("bs.modal")?"toggle":t.extend({remote:!/#/.test(n)&&n},s.data(),o.data());o.is("a")&&i.preventDefault(),s.one("show.bs.modal",function(t){t.isDefaultPrevented()||s.one("hidden.bs.modal",function(){o.is(":visible")&&o.trigger("focus")})}),e.call(s,a,this)})}(jQuery),function(t){"use strict";function e(e){return this.each(function(){var o=t(this),n=o.data("bs.tooltip"),s="object"==typeof e&&e;!n&&/destroy|hide/.test(e)||(n||o.data("bs.tooltip",n=new i(this,s)),"string"==typeof e&&n[e]())})}var i=function(t,e){this.type=null,this.options=null,this.enabled=null,this.timeout=null,this.hoverState=null,this.$element=null,this.inState=null,this.init("tooltip",t,e)};i.VERSION="3.3.7",i.TRANSITION_DURATION=150,i.DEFAULTS={animation:!0,placement:"top",selector:!1,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,container:!1,viewport:{selector:"body",padding:0}},i.prototype.init=function(e,i,o){if(this.enabled=!0,this.type=e,this.$element=t(i),this.options=this.getOptions(o),this.$viewport=this.options.viewport&&t(t.isFunction(this.options.viewport)?this.options.viewport.call(this,this.$element):this.options.viewport.selector||this.options.viewport),this.inState={click:!1,hover:!1,focus:!1},this.$element[0]instanceof document.constructor&&!this.options.selector)throw new Error("`selector` option must be specified when initializing "+this.type+" on the window.document object!");for(var n=this.options.trigger.split(" "),s=n.length;s--;){var a=n[s];if("click"==a)this.$element.on("click."+this.type,this.options.selector,t.proxy(this.toggle,this));else if("manual"!=a){var r="hover"==a?"mouseenter":"focusin",l="hover"==a?"mouseleave":"focusout";this.$element.on(r+"."+this.type,this.options.selector,t.proxy(this.enter,this)),this.$element.on(l+"."+this.type,this.options.selector,t.proxy(this.leave,this))}}this.options.selector?this._options=t.extend({},this.options,{trigger:"manual",selector:""}):this.fixTitle()},i.prototype.getDefaults=function(){return i.DEFAULTS},i.prototype.getOptions=function(e){return e=t.extend({},this.getDefaults(),this.$element.data(),e),e.delay&&"number"==typeof e.delay&&(e.delay={show:e.delay,hide:e.delay}),e},i.prototype.getDelegateOptions=function(){var e={},i=this.getDefaults();return this._options&&t.each(this._options,function(t,o){i[t]!=o&&(e[t]=o)}),e},i.prototype.enter=function(e){var i=e instanceof this.constructor?e:t(e.currentTarget).data("bs."+this.type);return i||(i=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,i)),e instanceof t.Event&&(i.inState["focusin"==e.type?"focus":"hover"]=!0),i.tip().hasClass("in")||"in"==i.hoverState?void(i.hoverState="in"):(clearTimeout(i.timeout),i.hoverState="in",i.options.delay&&i.options.delay.show?void(i.timeout=setTimeout(function(){"in"==i.hoverState&&i.show()},i.options.delay.show)):i.show())},i.prototype.isInStateTrue=function(){for(var t in this.inState)if(this.inState[t])return!0;return!1},i.prototype.leave=function(e){var i=e instanceof this.constructor?e:t(e.currentTarget).data("bs."+this.type);if(i||(i=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,i)),e instanceof t.Event&&(i.inState["focusout"==e.type?"focus":"hover"]=!1),!i.isInStateTrue()){if(clearTimeout(i.timeout),i.hoverState="out",!i.options.delay||!i.options.delay.hide)return i.hide();i.timeout=setTimeout(function(){"out"==i.hoverState&&i.hide()},i.options.delay.hide)}},i.prototype.show=function(){var e=t.Event("show.bs."+this.type);if(this.hasContent()&&this.enabled){this.$element.trigger(e);var o=t.contains(this.$element[0].ownerDocument.documentElement,this.$element[0]);if(e.isDefaultPrevented()||!o)return;var n=this,s=this.tip(),a=this.getUID(this.type);this.setContent(),s.attr("id",a),this.$element.attr("aria-describedby",a),this.options.animation&&s.addClass("fade");var r="function"==typeof this.options.placement?this.options.placement.call(this,s[0],this.$element[0]):this.options.placement,l=/\s?auto?\s?/i,h=l.test(r);h&&(r=r.replace(l,"")||"top"),s.detach().css({top:0,left:0,display:"block"}).addClass(r).data("bs."+this.type,this),this.options.container?s.appendTo(this.options.container):s.insertAfter(this.$element),this.$element.trigger("inserted.bs."+this.type);var d=this.getPosition(),p=s[0].offsetWidth,c=s[0].offsetHeight;if(h){var f=r,u=this.getPosition(this.$viewport);r="bottom"==r&&d.bottom+c>u.bottom?"top":"top"==r&&d.top-c<u.top?"bottom":"right"==r&&d.right+p>u.width?"left":"left"==r&&d.left-p<u.left?"right":r,s.removeClass(f).addClass(r)}var g=this.getCalculatedOffset(r,d,p,c);this.applyPlacement(g,r);var m=function(){var t=n.hoverState;n.$element.trigger("shown.bs."+n.type),n.hoverState=null,"out"==t&&n.leave(n)};t.support.transition&&this.$tip.hasClass("fade")?s.one("bsTransitionEnd",m).emulateTransitionEnd(i.TRANSITION_DURATION):m()}},i.prototype.applyPlacement=function(e,i){var o=this.tip(),n=o[0].offsetWidth,s=o[0].offsetHeight,a=parseInt(o.css("margin-top"),10),r=parseInt(o.css("margin-left"),10);isNaN(a)&&(a=0),isNaN(r)&&(r=0),e.top+=a,e.left+=r,t.offset.setOffset(o[0],t.extend({using:function(t){o.css({top:Math.round(t.top),left:Math.round(t.left)})}},e),0),o.addClass("in");var l=o[0].offsetWidth,h=o[0].offsetHeight;"top"==i&&h!=s&&(e.top=e.top+s-h);var d=this.getViewportAdjustedDelta(i,e,l,h);d.left?e.left+=d.left:e.top+=d.top;var p=/top|bottom/.test(i),c=p?2*d.left-n+l:2*d.top-s+h,f=p?"offsetWidth":"offsetHeight";o.offset(e),this.replaceArrow(c,o[0][f],p)},i.prototype.replaceArrow=function(t,e,i){this.arrow().css(i?"left":"top",50*(1-t/e)+"%").css(i?"top":"left","")},i.prototype.setContent=function(){var t=this.tip(),e=this.getTitle();t.find(".tooltip-inner")[this.options.html?"html":"text"](e),t.removeClass("fade in top bottom left right")},i.prototype.hide=function(e){function o(){"in"!=n.hoverState&&s.detach(),n.$element&&n.$element.removeAttr("aria-describedby").trigger("hidden.bs."+n.type),e&&e()}var n=this,s=t(this.$tip),a=t.Event("hide.bs."+this.type);if(this.$element.trigger(a),!a.isDefaultPrevented())return s.removeClass("in"),t.support.transition&&s.hasClass("fade")?s.one("bsTransitionEnd",o).emulateTransitionEnd(i.TRANSITION_DURATION):o(),this.hoverState=null,this},i.prototype.fixTitle=function(){var t=this.$element;(t.attr("title")||"string"!=typeof t.attr("data-original-title"))&&t.attr("data-original-title",t.attr("title")||"").attr("title","")},i.prototype.hasContent=function(){return this.getTitle()},i.prototype.getPosition=function(e){e=e||this.$element;var i=e[0],o="BODY"==i.tagName,n=i.getBoundingClientRect();null==n.width&&(n=t.extend({},n,{width:n.right-n.left,height:n.bottom-n.top}));var s=window.SVGElement&&i instanceof window.SVGElement,a=o?{top:0,left:0}:s?null:e.offset(),r={scroll:o?document.documentElement.scrollTop||document.body.scrollTop:e.scrollTop()},l=o?{width:t(window).width(),height:t(window).height()}:null;return t.extend({},n,r,l,a)},i.prototype.getCalculatedOffset=function(t,e,i,o){return"bottom"==t?{top:e.top+e.height,left:e.left+e.width/2-i/2}:"top"==t?{top:e.top-o,left:e.left+e.width/2-i/2}:"left"==t?{top:e.top+e.height/2-o/2,left:e.left-i}:{top:e.top+e.height/2-o/2,left:e.left+e.width}},i.prototype.getViewportAdjustedDelta=function(t,e,i,o){var n={top:0,left:0};if(!this.$viewport)return n;var s=this.options.viewport&&this.options.viewport.padding||0,a=this.getPosition(this.$viewport);if(/right|left/.test(t)){var r=e.top-s-a.scroll,l=e.top+s-a.scroll+o;r<a.top?n.top=a.top-r:l>a.top+a.height&&(n.top=a.top+a.height-l)}else{var h=e.left-s,d=e.left+s+i;h<a.left?n.left=a.left-h:d>a.right&&(n.left=a.left+a.width-d)}return n},i.prototype.getTitle=function(){var t=this.$element,e=this.options;return t.attr("data-original-title")||("function"==typeof e.title?e.title.call(t[0]):e.title)},i.prototype.getUID=function(t){do{t+=~~(1e6*Math.random())}while(document.getElementById(t));return t},i.prototype.tip=function(){if(!this.$tip&&(this.$tip=t(this.options.template),1!=this.$tip.length))throw new Error(this.type+" `template` option must consist of exactly 1 top-level element!");return this.$tip},i.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".tooltip-arrow")},i.prototype.enable=function(){this.enabled=!0},i.prototype.disable=function(){this.enabled=!1},i.prototype.toggleEnabled=function(){this.enabled=!this.enabled},i.prototype.toggle=function(e){var i=this;e&&((i=t(e.currentTarget).data("bs."+this.type))||(i=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,i))),e?(i.inState.click=!i.inState.click,i.isInStateTrue()?i.enter(i):i.leave(i)):i.tip().hasClass("in")?i.leave(i):i.enter(i)},i.prototype.destroy=function(){var t=this;clearTimeout(this.timeout),this.hide(function(){t.$element.off("."+t.type).removeData("bs."+t.type),t.$tip&&t.$tip.detach(),t.$tip=null,t.$arrow=null,t.$viewport=null,t.$element=null})};var o=t.fn.tooltip;t.fn.tooltip=e,t.fn.tooltip.Constructor=i,t.fn.tooltip.noConflict=function(){return t.fn.tooltip=o,this}}(jQuery),function(t){"use strict";function e(e){return this.each(function(){var o=t(this),n=o.data("bs.popover"),s="object"==typeof e&&e;!n&&/destroy|hide/.test(e)||(n||o.data("bs.popover",n=new i(this,s)),"string"==typeof e&&n[e]())})}var i=function(t,e){this.init("popover",t,e)};if(!t.fn.tooltip)throw new Error("Popover requires tooltip.js");i.VERSION="3.3.7",i.DEFAULTS=t.extend({},t.fn.tooltip.Constructor.DEFAULTS,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'}),i.prototype=t.extend({},t.fn.tooltip.Constructor.prototype),i.prototype.constructor=i,i.prototype.getDefaults=function(){return i.DEFAULTS},i.prototype.setContent=function(){var t=this.tip(),e=this.getTitle(),i=this.getContent();t.find(".popover-title")[this.options.html?"html":"text"](e),t.find(".popover-content").children().detach().end()[this.options.html?"string"==typeof i?"html":"append":"text"](i),t.removeClass("fade top bottom left right in"),t.find(".popover-title").html()||t.find(".popover-title").hide()},i.prototype.hasContent=function(){return this.getTitle()||this.getContent()},i.prototype.getContent=function(){var t=this.$element,e=this.options;return t.attr("data-content")||("function"==typeof e.content?e.content.call(t[0]):e.content)},i.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".arrow")};var o=t.fn.popover;t.fn.popover=e,t.fn.popover.Constructor=i,t.fn.popover.noConflict=function(){return t.fn.popover=o,this}}(jQuery),function(t){"use strict";function e(i,o){this.$body=t(document.body),this.$scrollElement=t(t(i).is(document.body)?window:i),this.options=t.extend({},e.DEFAULTS,o),this.selector=(this.options.target||"")+" .nav li > a",this.offsets=[],this.targets=[],this.activeTarget=null,this.scrollHeight=0,this.$scrollElement.on("scroll.bs.scrollspy",t.proxy(this.process,this)),this.refresh(),this.process()}function i(i){return this.each(function(){var o=t(this),n=o.data("bs.scrollspy"),s="object"==typeof i&&i;n||o.data("bs.scrollspy",n=new e(this,s)),"string"==typeof i&&n[i]()})}e.VERSION="3.3.7",e.DEFAULTS={offset:10},e.prototype.getScrollHeight=function(){return this.$scrollElement[0].scrollHeight||Math.max(this.$body[0].scrollHeight,document.documentElement.scrollHeight)},e.prototype.refresh=function(){var e=this,i="offset",o=0;this.offsets=[],this.targets=[],this.scrollHeight=this.getScrollHeight(),t.isWindow(this.$scrollElement[0])||(i="position",o=this.$scrollElement.scrollTop()),this.$body.find(this.selector).map(function(){var e=t(this),n=e.data("target")||e.attr("href"),s=/^#./.test(n)&&t(n);return s&&s.length&&s.is(":visible")&&[[s[i]().top+o,n]]||null}).sort(function(t,e){return t[0]-e[0]}).each(function(){e.offsets.push(this[0]),e.targets.push(this[1])})},e.prototype.process=function(){var t,e=this.$scrollElement.scrollTop()+this.options.offset,i=this.getScrollHeight(),o=this.options.offset+i-this.$scrollElement.height(),n=this.offsets,s=this.targets,a=this.activeTarget;if(this.scrollHeight!=i&&this.refresh(),e>=o)return a!=(t=s[s.length-1])&&this.activate(t);if(a&&e<n[0])return this.activeTarget=null,this.clear();for(t=n.length;t--;)a!=s[t]&&e>=n[t]&&(void 0===n[t+1]||e<n[t+1])&&this.activate(s[t])},e.prototype.activate=function(e){
this.activeTarget=e,this.clear();var i=this.selector+'[data-target="'+e+'"],'+this.selector+'[href="'+e+'"]',o=t(i).parents("li").addClass("active");o.parent(".dropdown-menu").length&&(o=o.closest("li.dropdown").addClass("active")),o.trigger("activate.bs.scrollspy")},e.prototype.clear=function(){t(this.selector).parentsUntil(this.options.target,".active").removeClass("active")};var o=t.fn.scrollspy;t.fn.scrollspy=i,t.fn.scrollspy.Constructor=e,t.fn.scrollspy.noConflict=function(){return t.fn.scrollspy=o,this},t(window).on("load.bs.scrollspy.data-api",function(){t('[data-spy="scroll"]').each(function(){var e=t(this);i.call(e,e.data())})})}(jQuery),function(t){"use strict";function e(e){return this.each(function(){var o=t(this),n=o.data("bs.tab");n||o.data("bs.tab",n=new i(this)),"string"==typeof e&&n[e]()})}var i=function(e){this.element=t(e)};i.VERSION="3.3.7",i.TRANSITION_DURATION=150,i.prototype.show=function(){var e=this.element,i=e.closest("ul:not(.dropdown-menu)"),o=e.data("target");if(o||(o=e.attr("href"),o=o&&o.replace(/.*(?=#[^\s]*$)/,"")),!e.parent("li").hasClass("active")){var n=i.find(".active:last a"),s=t.Event("hide.bs.tab",{relatedTarget:e[0]}),a=t.Event("show.bs.tab",{relatedTarget:n[0]});if(n.trigger(s),e.trigger(a),!a.isDefaultPrevented()&&!s.isDefaultPrevented()){var r=t(o);this.activate(e.closest("li"),i),this.activate(r,r.parent(),function(){n.trigger({type:"hidden.bs.tab",relatedTarget:e[0]}),e.trigger({type:"shown.bs.tab",relatedTarget:n[0]})})}}},i.prototype.activate=function(e,o,n){function s(){a.removeClass("active").find("> .dropdown-menu > .active").removeClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!1),e.addClass("active").find('[data-toggle="tab"]').attr("aria-expanded",!0),r?(e[0].offsetWidth,e.addClass("in")):e.removeClass("fade"),e.parent(".dropdown-menu").length&&e.closest("li.dropdown").addClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!0),n&&n()}var a=o.find("> .active"),r=n&&t.support.transition&&(a.length&&a.hasClass("fade")||!!o.find("> .fade").length);a.length&&r?a.one("bsTransitionEnd",s).emulateTransitionEnd(i.TRANSITION_DURATION):s(),a.removeClass("in")};var o=t.fn.tab;t.fn.tab=e,t.fn.tab.Constructor=i,t.fn.tab.noConflict=function(){return t.fn.tab=o,this};var n=function(i){i.preventDefault(),e.call(t(this),"show")};t(document).on("click.bs.tab.data-api",'[data-toggle="tab"]',n).on("click.bs.tab.data-api",'[data-toggle="pill"]',n)}(jQuery),function(t){"use strict";function e(e){return this.each(function(){var o=t(this),n=o.data("bs.affix"),s="object"==typeof e&&e;n||o.data("bs.affix",n=new i(this,s)),"string"==typeof e&&n[e]()})}var i=function(e,o){this.options=t.extend({},i.DEFAULTS,o),this.$target=t(this.options.target).on("scroll.bs.affix.data-api",t.proxy(this.checkPosition,this)).on("click.bs.affix.data-api",t.proxy(this.checkPositionWithEventLoop,this)),this.$element=t(e),this.affixed=null,this.unpin=null,this.pinnedOffset=null,this.checkPosition()};i.VERSION="3.3.7",i.RESET="affix affix-top affix-bottom",i.DEFAULTS={offset:0,target:window},i.prototype.getState=function(t,e,i,o){var n=this.$target.scrollTop(),s=this.$element.offset(),a=this.$target.height();if(null!=i&&"top"==this.affixed)return n<i&&"top";if("bottom"==this.affixed)return null!=i?!(n+this.unpin<=s.top)&&"bottom":!(n+a<=t-o)&&"bottom";var r=null==this.affixed,l=r?n:s.top,h=r?a:e;return null!=i&&n<=i?"top":null!=o&&l+h>=t-o&&"bottom"},i.prototype.getPinnedOffset=function(){if(this.pinnedOffset)return this.pinnedOffset;this.$element.removeClass(i.RESET).addClass("affix");var t=this.$target.scrollTop(),e=this.$element.offset();return this.pinnedOffset=e.top-t},i.prototype.checkPositionWithEventLoop=function(){setTimeout(t.proxy(this.checkPosition,this),1)},i.prototype.checkPosition=function(){if(this.$element.is(":visible")){var e=this.$element.height(),o=this.options.offset,n=o.top,s=o.bottom,a=Math.max(t(document).height(),t(document.body).height());"object"!=typeof o&&(s=n=o),"function"==typeof n&&(n=o.top(this.$element)),"function"==typeof s&&(s=o.bottom(this.$element));var r=this.getState(a,e,n,s);if(this.affixed!=r){null!=this.unpin&&this.$element.css("top","");var l="affix"+(r?"-"+r:""),h=t.Event(l+".bs.affix");if(this.$element.trigger(h),h.isDefaultPrevented())return;this.affixed=r,this.unpin="bottom"==r?this.getPinnedOffset():null,this.$element.removeClass(i.RESET).addClass(l).trigger(l.replace("affix","affixed")+".bs.affix")}"bottom"==r&&this.$element.offset({top:a-e-s})}};var o=t.fn.affix;t.fn.affix=e,t.fn.affix.Constructor=i,t.fn.affix.noConflict=function(){return t.fn.affix=o,this},t(window).on("load",function(){t('[data-spy="affix"]').each(function(){var i=t(this),o=i.data();o.offset=o.offset||{},null!=o.offsetBottom&&(o.offset.bottom=o.offsetBottom),null!=o.offsetTop&&(o.offset.top=o.offsetTop),e.call(i,o)})})}(jQuery);
"use strict";!function(t,a,e){"function"==typeof define&&define.amd?define(["jquery"],t):"object"==typeof exports?module.exports=t(require("jquery")):t(a||e)}(function(t){var a=function(a,e,n){var s={invalid:[],getCaret:function(){try{var t,e=0,n=a.get(0),r=document.selection,o=n.selectionStart;return r&&-1===navigator.appVersion.indexOf("MSIE 10")?(t=r.createRange(),t.moveStart("character",-s.val().length),e=t.text.length):(o||"0"===o)&&(e=o),e}catch(t){}},setCaret:function(t){try{if(a.is(":focus")){var e,n=a.get(0);n.setSelectionRange?n.setSelectionRange(t,t):(e=n.createTextRange(),e.collapse(!0),e.moveEnd("character",t),e.moveStart("character",t),e.select())}}catch(t){}},events:function(){a.on("keydown.mask",function(t){a.data("mask-keycode",t.keyCode||t.which),a.data("mask-previus-value",a.val()),a.data("mask-previus-caret-pos",s.getCaret()),s.maskDigitPosMapOld=s.maskDigitPosMap}).on(t.jMaskGlobals.useInput?"input.mask":"keyup.mask",s.behaviour).on("paste.mask drop.mask",function(){setTimeout(function(){a.keydown().keyup()},100)}).on("change.mask",function(){a.data("changed",!0)}).on("blur.mask",function(){i===s.val()||a.data("changed")||a.trigger("change"),a.data("changed",!1)}).on("blur.mask",function(){i=s.val()}).on("focus.mask",function(a){!0===n.selectOnFocus&&t(a.target).select()}).on("focusout.mask",function(){n.clearIfNotMatch&&!r.test(s.val())&&s.val("")})},getRegexMask:function(){for(var t,a,n,s,r,i,c=[],l=0;l<e.length;l++)t=o.translation[e.charAt(l)],t?(a=t.pattern.toString().replace(/.{1}$|^.{1}/g,""),n=t.optional,s=t.recursive,s?(c.push(e.charAt(l)),r={digit:e.charAt(l),pattern:a}):c.push(n||s?a+"?":a)):c.push(e.charAt(l).replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&"));return i=c.join(""),r&&(i=i.replace(new RegExp("("+r.digit+"(.*"+r.digit+")?)"),"($1)?").replace(new RegExp(r.digit,"g"),r.pattern)),new RegExp(i)},destroyEvents:function(){a.off(["input","keydown","keyup","paste","drop","blur","focusout",""].join(".mask "))},val:function(t){var e,n=a.is("input"),s=n?"val":"text";return arguments.length>0?(a[s]()!==t&&a[s](t),e=a):e=a[s](),e},calculateCaretPosition:function(){var t=a.data("mask-previus-value")||"",e=s.getMasked(),n=s.getCaret();if(t!==e){var r=a.data("mask-previus-caret-pos")||0,o=e.length,i=t.length,c=0,l=0,u=0,f=0,k=0;for(k=n;k<o&&s.maskDigitPosMap[k];k++)l++;for(k=n-1;k>=0&&s.maskDigitPosMap[k];k--)c++;for(k=n-1;k>=0;k--)s.maskDigitPosMap[k]&&u++;for(k=r-1;k>=0;k--)s.maskDigitPosMapOld[k]&&f++;if(n>i)n=o;else if(r>=n&&r!==i){if(!s.maskDigitPosMapOld[n]){var v=n;n-=f-u,n-=c,s.maskDigitPosMap[n]&&(n=v)}}else n>r&&(n+=u-f,n+=l)}return n},behaviour:function(e){e=e||window.event,s.invalid=[];var n=a.data("mask-keycode");if(-1===t.inArray(n,o.byPassKeys)){var r=s.getMasked(),i=s.getCaret();return setTimeout(function(){s.setCaret(s.calculateCaretPosition())},10),s.val(r),s.setCaret(i),s.callbacks(e)}},getMasked:function(t,a){var r,i,c=[],l=void 0===a?s.val():a+"",u=0,f=e.length,k=0,v=l.length,d=1,p="push",h=-1,g=0,m=[];n.reverse?(p="unshift",d=-1,r=0,u=f-1,k=v-1,i=function(){return u>-1&&k>-1}):(r=f-1,i=function(){return u<f&&k<v});for(var M;i();){var y=e.charAt(u),b=l.charAt(k),w=o.translation[y];w?(b.match(w.pattern)?(c[p](b),w.recursive&&(-1===h?h=u:u===r&&(u=h-d),r===h&&(u-=d)),u+=d):b===M?(g--,M=void 0):w.optional?(u+=d,k-=d):w.fallback?(c[p](w.fallback),u+=d,k-=d):s.invalid.push({p:k,v:b,e:w.pattern}),k+=d):(t||c[p](y),b===y?(m.push(k),k+=d):(M=y,m.push(k+g),g++),u+=d)}var j=e.charAt(r);f!==v+1||o.translation[j]||c.push(j);var C=c.join("");return s.mapMaskdigitPositions(C,m,v),C},mapMaskdigitPositions:function(t,a,e){var r=n.reverse?t.length-e:0;s.maskDigitPosMap={};for(var o=0;o<a.length;o++)s.maskDigitPosMap[a[o]+r]=1},callbacks:function(t){var r=s.val(),o=r!==i,c=[r,t,a,n],l=function(t,a,e){"function"==typeof n[t]&&a&&n[t].apply(this,e)};l("onChange",!0===o,c),l("onKeyPress",!0===o,c),l("onComplete",r.length===e.length,c),l("onInvalid",s.invalid.length>0,[r,t,a,s.invalid,n])}};a=t(a);var r,o=this,i=s.val();e="function"==typeof e?e(s.val(),void 0,a,n):e,o.mask=e,o.options=n,o.remove=function(){var t=s.getCaret();return s.destroyEvents(),s.val(o.getCleanVal()),s.setCaret(t),a},o.getCleanVal=function(){return s.getMasked(!0)},o.getMaskedVal=function(t){return s.getMasked(!1,t)},o.init=function(i){if(i=i||!1,n=n||{},o.clearIfNotMatch=t.jMaskGlobals.clearIfNotMatch,o.byPassKeys=t.jMaskGlobals.byPassKeys,o.translation=t.extend({},t.jMaskGlobals.translation,n.translation),o=t.extend(!0,{},o,n),r=s.getRegexMask(),i)s.events(),s.val(s.getMasked());else{n.placeholder&&a.attr("placeholder",n.placeholder),a.data("mask")&&a.attr("autocomplete","off");for(var c=0,l=!0;c<e.length;c++){var u=o.translation[e.charAt(c)];if(u&&u.recursive){l=!1;break}}l&&a.attr("maxlength",e.length),s.destroyEvents(),s.events();var f=s.getCaret();s.val(s.getMasked()),s.setCaret(f)}},o.init(!a.is("input"))};t.maskWatchers={};var e=function(){var e=t(this),s={},r=e.attr("data-mask");if(e.attr("data-mask-reverse")&&(s.reverse=!0),e.attr("data-mask-clearifnotmatch")&&(s.clearIfNotMatch=!0),"true"===e.attr("data-mask-selectonfocus")&&(s.selectOnFocus=!0),n(e,r,s))return e.data("mask",new a(this,r,s))},n=function(a,e,n){n=n||{};var s=t(a).data("mask"),r=JSON.stringify,o=t(a).val()||t(a).text();try{return"function"==typeof e&&(e=e(o)),"object"!=typeof s||r(s.options)!==r(n)||s.mask!==e}catch(t){}};t.fn.mask=function(e,s){s=s||{};var r=this.selector,o=t.jMaskGlobals,i=o.watchInterval,c=s.watchInputs||o.watchInputs,l=function(){if(n(this,e,s))return t(this).data("mask",new a(this,e,s))};return t(this).each(l),r&&""!==r&&c&&(clearInterval(t.maskWatchers[r]),t.maskWatchers[r]=setInterval(function(){t(document).find(r).each(l)},i)),this},t.fn.masked=function(t){return this.data("mask").getMaskedVal(t)},t.fn.unmask=function(){return clearInterval(t.maskWatchers[this.selector]),delete t.maskWatchers[this.selector],this.each(function(){var a=t(this).data("mask");a&&a.remove().removeData("mask")})},t.fn.cleanVal=function(){return this.data("mask").getCleanVal()},t.applyDataMask=function(a){a=a||t.jMaskGlobals.maskElements,(a instanceof t?a:t(a)).filter(t.jMaskGlobals.dataMaskAttr).each(e)};var s={maskElements:"input,td,span,div",dataMaskAttr:"*[data-mask]",dataMask:!0,watchInterval:300,watchInputs:!0,useInput:!/Chrome\/[2-4][0-9]|SamsungBrowser/.test(window.navigator.userAgent)&&function(t){var a,e=document.createElement("div");return t="on"+t,a=t in e,a||(e.setAttribute(t,"return;"),a="function"==typeof e[t]),e=null,a}("input"),watchDataMask:!1,byPassKeys:[9,16,17,18,36,37,38,39,40,91],translation:{0:{pattern:/\d/},9:{pattern:/\d/,optional:!0},"#":{pattern:/\d/,recursive:!0},A:{pattern:/[a-zA-Z0-9]/},S:{pattern:/[a-zA-Z]/}}};t.jMaskGlobals=t.jMaskGlobals||{},s=t.jMaskGlobals=t.extend(!0,{},s,t.jMaskGlobals),s.dataMask&&t.applyDataMask(),setInterval(function(){t.jMaskGlobals.watchDataMask&&t.applyDataMask()},s.watchInterval)},window.jQuery,window.Zepto);
!function(n){n(document).ready(function(){e.init()});var e={init:function(){var e=function(n){return 11===n.replace(/\D/g,"").length?"(00) 00000-0000":"(00) 0000-00009"},t={onKeyPress:function(n,t,r,a){r.mask(e.apply({},arguments),a)}};n('div[data-name="telefone"] input').mask(e,t),n('a[href="#main-form-wrapper"]').click(function(e){return e.preventDefault(),n("html, body").animate({scrollTop:n("#main-form-wrapper").offset().top+"px"},"slow"),!1})}}}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJvb3RzdHJhcC5qcyIsImpxdWVyeS5tYXNrLmpzIiwibWFpbi5qcyJdLCJuYW1lcyI6WyJqUXVlcnkiLCJFcnJvciIsIiQiLCJ2ZXJzaW9uIiwiZm4iLCJqcXVlcnkiLCJzcGxpdCIsInRyYW5zaXRpb25FbmQiLCJlbCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsInRyYW5zRW5kRXZlbnROYW1lcyIsIldlYmtpdFRyYW5zaXRpb24iLCJNb3pUcmFuc2l0aW9uIiwiT1RyYW5zaXRpb24iLCJ0cmFuc2l0aW9uIiwibmFtZSIsInVuZGVmaW5lZCIsInN0eWxlIiwiZW5kIiwiZW11bGF0ZVRyYW5zaXRpb25FbmQiLCJkdXJhdGlvbiIsImNhbGxlZCIsIiRlbCIsInRoaXMiLCJvbmUiLCJjYWxsYmFjayIsInRyaWdnZXIiLCJzdXBwb3J0Iiwic2V0VGltZW91dCIsImV2ZW50Iiwic3BlY2lhbCIsImJzVHJhbnNpdGlvbkVuZCIsImJpbmRUeXBlIiwiZGVsZWdhdGVUeXBlIiwiaGFuZGxlIiwiZSIsInRhcmdldCIsImlzIiwiaGFuZGxlT2JqIiwiaGFuZGxlciIsImFwcGx5IiwiYXJndW1lbnRzIiwiUGx1Z2luIiwib3B0aW9uIiwiZWFjaCIsIiR0aGlzIiwiZGF0YSIsIkFsZXJ0IiwiY2FsbCIsImRpc21pc3MiLCJvbiIsImNsb3NlIiwiVkVSU0lPTiIsIlRSQU5TSVRJT05fRFVSQVRJT04iLCJwcm90b3R5cGUiLCJyZW1vdmVFbGVtZW50IiwiJHBhcmVudCIsImRldGFjaCIsInJlbW92ZSIsInNlbGVjdG9yIiwiYXR0ciIsInJlcGxhY2UiLCJwcmV2ZW50RGVmYXVsdCIsImxlbmd0aCIsImNsb3Nlc3QiLCJFdmVudCIsImlzRGVmYXVsdFByZXZlbnRlZCIsInJlbW92ZUNsYXNzIiwiaGFzQ2xhc3MiLCJvbGQiLCJhbGVydCIsIkNvbnN0cnVjdG9yIiwibm9Db25mbGljdCIsIm9wdGlvbnMiLCJCdXR0b24iLCJ0b2dnbGUiLCJzZXRTdGF0ZSIsImVsZW1lbnQiLCIkZWxlbWVudCIsImV4dGVuZCIsIkRFRkFVTFRTIiwiaXNMb2FkaW5nIiwibG9hZGluZ1RleHQiLCJzdGF0ZSIsImQiLCJ2YWwiLCJyZXNldFRleHQiLCJwcm94eSIsImFkZENsYXNzIiwicHJvcCIsInJlbW92ZUF0dHIiLCJjaGFuZ2VkIiwiJGlucHV0IiwiZmluZCIsInRvZ2dsZUNsYXNzIiwiYnV0dG9uIiwiJGJ0biIsImZpcnN0IiwidGVzdCIsInR5cGUiLCJDYXJvdXNlbCIsImFjdGlvbiIsInNsaWRlIiwidG8iLCJpbnRlcnZhbCIsInBhdXNlIiwiY3ljbGUiLCIkaW5kaWNhdG9ycyIsInBhdXNlZCIsInNsaWRpbmciLCIkYWN0aXZlIiwiJGl0ZW1zIiwia2V5Ym9hcmQiLCJrZXlkb3duIiwiZG9jdW1lbnRFbGVtZW50Iiwid3JhcCIsInRhZ05hbWUiLCJ3aGljaCIsInByZXYiLCJuZXh0IiwiY2xlYXJJbnRlcnZhbCIsInNldEludGVydmFsIiwiZ2V0SXRlbUluZGV4IiwiaXRlbSIsInBhcmVudCIsImNoaWxkcmVuIiwiaW5kZXgiLCJnZXRJdGVtRm9yRGlyZWN0aW9uIiwiZGlyZWN0aW9uIiwiYWN0aXZlIiwiYWN0aXZlSW5kZXgiLCJkZWx0YSIsIml0ZW1JbmRleCIsImVxIiwicG9zIiwidGhhdCIsIiRuZXh0IiwiaXNDeWNsaW5nIiwicmVsYXRlZFRhcmdldCIsInNsaWRlRXZlbnQiLCIkbmV4dEluZGljYXRvciIsInNsaWRFdmVudCIsIm9mZnNldFdpZHRoIiwiam9pbiIsImNhcm91c2VsIiwiY2xpY2tIYW5kbGVyIiwiaHJlZiIsIiR0YXJnZXQiLCJzbGlkZUluZGV4Iiwid2luZG93IiwiJGNhcm91c2VsIiwiZ2V0VGFyZ2V0RnJvbVRyaWdnZXIiLCIkdHJpZ2dlciIsIkNvbGxhcHNlIiwiaWQiLCJ0cmFuc2l0aW9uaW5nIiwiZ2V0UGFyZW50IiwiYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzIiwiZGltZW5zaW9uIiwic2hvdyIsImFjdGl2ZXNEYXRhIiwiYWN0aXZlcyIsInN0YXJ0RXZlbnQiLCJjb21wbGV0ZSIsInNjcm9sbFNpemUiLCJjYW1lbENhc2UiLCJoaWRlIiwib2Zmc2V0SGVpZ2h0IiwiaSIsImlzT3BlbiIsImNvbGxhcHNlIiwiY2xlYXJNZW51cyIsImJhY2tkcm9wIiwiY29udGFpbnMiLCJEcm9wZG93biIsImlzQWN0aXZlIiwiaW5zZXJ0QWZ0ZXIiLCJzdG9wUHJvcGFnYXRpb24iLCJkcm9wZG93biIsIl9yZWxhdGVkVGFyZ2V0IiwiTW9kYWwiLCIkYm9keSIsImJvZHkiLCIkZGlhbG9nIiwiJGJhY2tkcm9wIiwiaXNTaG93biIsIm9yaWdpbmFsQm9keVBhZCIsInNjcm9sbGJhcldpZHRoIiwiaWdub3JlQmFja2Ryb3BDbGljayIsInJlbW90ZSIsImxvYWQiLCJCQUNLRFJPUF9UUkFOU0lUSU9OX0RVUkFUSU9OIiwiY2hlY2tTY3JvbGxiYXIiLCJzZXRTY3JvbGxiYXIiLCJlc2NhcGUiLCJyZXNpemUiLCJhcHBlbmRUbyIsInNjcm9sbFRvcCIsImFkanVzdERpYWxvZyIsImVuZm9yY2VGb2N1cyIsIm9mZiIsImhpZGVNb2RhbCIsImhhcyIsImhhbmRsZVVwZGF0ZSIsInJlc2V0QWRqdXN0bWVudHMiLCJyZXNldFNjcm9sbGJhciIsInJlbW92ZUJhY2tkcm9wIiwiYW5pbWF0ZSIsImRvQW5pbWF0ZSIsImN1cnJlbnRUYXJnZXQiLCJmb2N1cyIsImNhbGxiYWNrUmVtb3ZlIiwibW9kYWxJc092ZXJmbG93aW5nIiwic2Nyb2xsSGVpZ2h0IiwiY2xpZW50SGVpZ2h0IiwiY3NzIiwicGFkZGluZ0xlZnQiLCJib2R5SXNPdmVyZmxvd2luZyIsInBhZGRpbmdSaWdodCIsImZ1bGxXaW5kb3dXaWR0aCIsImlubmVyV2lkdGgiLCJkb2N1bWVudEVsZW1lbnRSZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwicmlnaHQiLCJNYXRoIiwiYWJzIiwibGVmdCIsImNsaWVudFdpZHRoIiwibWVhc3VyZVNjcm9sbGJhciIsImJvZHlQYWQiLCJwYXJzZUludCIsInNjcm9sbERpdiIsImNsYXNzTmFtZSIsImFwcGVuZCIsInJlbW92ZUNoaWxkIiwibW9kYWwiLCJzaG93RXZlbnQiLCJUb29sdGlwIiwiZW5hYmxlZCIsInRpbWVvdXQiLCJob3ZlclN0YXRlIiwiaW5TdGF0ZSIsImluaXQiLCJhbmltYXRpb24iLCJwbGFjZW1lbnQiLCJ0ZW1wbGF0ZSIsInRpdGxlIiwiZGVsYXkiLCJodG1sIiwiY29udGFpbmVyIiwidmlld3BvcnQiLCJwYWRkaW5nIiwiZ2V0T3B0aW9ucyIsIiR2aWV3cG9ydCIsImlzRnVuY3Rpb24iLCJjbGljayIsImhvdmVyIiwiY29uc3RydWN0b3IiLCJ0cmlnZ2VycyIsImV2ZW50SW4iLCJldmVudE91dCIsImVudGVyIiwibGVhdmUiLCJfb3B0aW9ucyIsImZpeFRpdGxlIiwiZ2V0RGVmYXVsdHMiLCJnZXREZWxlZ2F0ZU9wdGlvbnMiLCJkZWZhdWx0cyIsImtleSIsInZhbHVlIiwib2JqIiwic2VsZiIsInRpcCIsImNsZWFyVGltZW91dCIsImlzSW5TdGF0ZVRydWUiLCJoYXNDb250ZW50IiwiaW5Eb20iLCJvd25lckRvY3VtZW50IiwiJHRpcCIsInRpcElkIiwiZ2V0VUlEIiwic2V0Q29udGVudCIsImF1dG9Ub2tlbiIsImF1dG9QbGFjZSIsInRvcCIsImRpc3BsYXkiLCJnZXRQb3NpdGlvbiIsImFjdHVhbFdpZHRoIiwiYWN0dWFsSGVpZ2h0Iiwib3JnUGxhY2VtZW50Iiwidmlld3BvcnREaW0iLCJib3R0b20iLCJ3aWR0aCIsImNhbGN1bGF0ZWRPZmZzZXQiLCJnZXRDYWxjdWxhdGVkT2Zmc2V0IiwiYXBwbHlQbGFjZW1lbnQiLCJwcmV2SG92ZXJTdGF0ZSIsIm9mZnNldCIsImhlaWdodCIsIm1hcmdpblRvcCIsIm1hcmdpbkxlZnQiLCJpc05hTiIsInNldE9mZnNldCIsInVzaW5nIiwicHJvcHMiLCJyb3VuZCIsImdldFZpZXdwb3J0QWRqdXN0ZWREZWx0YSIsImlzVmVydGljYWwiLCJhcnJvd0RlbHRhIiwiYXJyb3dPZmZzZXRQb3NpdGlvbiIsInJlcGxhY2VBcnJvdyIsImFycm93IiwiZ2V0VGl0bGUiLCIkZSIsImlzQm9keSIsImVsUmVjdCIsImlzU3ZnIiwiU1ZHRWxlbWVudCIsImVsT2Zmc2V0Iiwic2Nyb2xsIiwib3V0ZXJEaW1zIiwidmlld3BvcnRQYWRkaW5nIiwidmlld3BvcnREaW1lbnNpb25zIiwidG9wRWRnZU9mZnNldCIsImJvdHRvbUVkZ2VPZmZzZXQiLCJsZWZ0RWRnZU9mZnNldCIsInJpZ2h0RWRnZU9mZnNldCIsIm8iLCJwcmVmaXgiLCJyYW5kb20iLCJnZXRFbGVtZW50QnlJZCIsIiRhcnJvdyIsImVuYWJsZSIsImRpc2FibGUiLCJ0b2dnbGVFbmFibGVkIiwiZGVzdHJveSIsInJlbW92ZURhdGEiLCJ0b29sdGlwIiwiUG9wb3ZlciIsImNvbnRlbnQiLCJnZXRDb250ZW50IiwicG9wb3ZlciIsIlNjcm9sbFNweSIsIiRzY3JvbGxFbGVtZW50Iiwib2Zmc2V0cyIsInRhcmdldHMiLCJhY3RpdmVUYXJnZXQiLCJwcm9jZXNzIiwicmVmcmVzaCIsImdldFNjcm9sbEhlaWdodCIsIm1heCIsIm9mZnNldE1ldGhvZCIsIm9mZnNldEJhc2UiLCJpc1dpbmRvdyIsIm1hcCIsIiRocmVmIiwic29ydCIsImEiLCJiIiwicHVzaCIsIm1heFNjcm9sbCIsImFjdGl2YXRlIiwiY2xlYXIiLCJwYXJlbnRzIiwicGFyZW50c1VudGlsIiwic2Nyb2xsc3B5IiwiJHNweSIsIlRhYiIsIiR1bCIsIiRwcmV2aW91cyIsImhpZGVFdmVudCIsInRhYiIsIkFmZml4IiwiY2hlY2tQb3NpdGlvbiIsImNoZWNrUG9zaXRpb25XaXRoRXZlbnRMb29wIiwiYWZmaXhlZCIsInVucGluIiwicGlubmVkT2Zmc2V0IiwiUkVTRVQiLCJnZXRTdGF0ZSIsIm9mZnNldFRvcCIsIm9mZnNldEJvdHRvbSIsInBvc2l0aW9uIiwidGFyZ2V0SGVpZ2h0IiwiaW5pdGlhbGl6aW5nIiwiY29sbGlkZXJUb3AiLCJjb2xsaWRlckhlaWdodCIsImdldFBpbm5lZE9mZnNldCIsImFmZml4IiwiYWZmaXhUeXBlIiwiZmFjdG9yeSIsIlplcHRvIiwiZGVmaW5lIiwiYW1kIiwiZXhwb3J0cyIsIm1vZHVsZSIsInJlcXVpcmUiLCJNYXNrIiwibWFzayIsInAiLCJpbnZhbGlkIiwiZ2V0Q2FyZXQiLCJzZWwiLCJjdHJsIiwiZ2V0IiwiZFNlbCIsInNlbGVjdGlvbiIsImNTZWxTdGFydCIsInNlbGVjdGlvblN0YXJ0IiwibmF2aWdhdG9yIiwiYXBwVmVyc2lvbiIsImluZGV4T2YiLCJjcmVhdGVSYW5nZSIsIm1vdmVTdGFydCIsInRleHQiLCJzZXRDYXJldCIsInJhbmdlIiwic2V0U2VsZWN0aW9uUmFuZ2UiLCJjcmVhdGVUZXh0UmFuZ2UiLCJtb3ZlRW5kIiwic2VsZWN0IiwiZXZlbnRzIiwia2V5Q29kZSIsIm1hc2tEaWdpdFBvc01hcE9sZCIsIm1hc2tEaWdpdFBvc01hcCIsImpNYXNrR2xvYmFscyIsInVzZUlucHV0IiwiYmVoYXZpb3VyIiwia2V5dXAiLCJvbGRWYWx1ZSIsInNlbGVjdE9uRm9jdXMiLCJjbGVhcklmTm90TWF0Y2giLCJyZWdleE1hc2siLCJnZXRSZWdleE1hc2siLCJ0cmFuc2xhdGlvbiIsInBhdHRlcm4iLCJvcHRpb25hbCIsInJlY3Vyc2l2ZSIsIm9SZWN1cnNpdmUiLCJyIiwibWFza0NodW5rcyIsImpNYXNrIiwiY2hhckF0IiwidG9TdHJpbmciLCJkaWdpdCIsIlJlZ0V4cCIsImRlc3Ryb3lFdmVudHMiLCJ2IiwiaXNJbnB1dCIsIm1ldGhvZCIsImNhbGN1bGF0ZUNhcmV0UG9zaXRpb24iLCJvbGRWYWwiLCJuZXdWYWwiLCJnZXRNYXNrZWQiLCJjYXJldFBvc05ldyIsImNhcmV0UG9zT2xkIiwibmV3VmFsTCIsIm9sZFZhbEwiLCJtYXNrRGlnaXRzQmVmb3JlQ2FyZXQiLCJtYXNrRGlnaXRzQWZ0ZXJDYXJldCIsIm1hc2tEaWdpdHNCZWZvcmVDYXJldEFsbCIsIm1hc2tEaWdpdHNCZWZvcmVDYXJldEFsbE9sZCIsImNhcmV0UG9zIiwiaW5BcnJheSIsImJ5UGFzc0tleXMiLCJjYWxsYmFja3MiLCJza2lwTWFza0NoYXJzIiwibGFzdE1hc2tDaGFyIiwiY2hlY2siLCJidWYiLCJtIiwibWFza0xlbiIsInZhbExlbiIsImFkZE1ldGhvZCIsInJlc2V0UG9zIiwibWFza0RpZ2l0Q291bnQiLCJtYXNrRGlnaXRQb3NBcnIiLCJyZXZlcnNlIiwibGFzdFVudHJhbnNsYXRlZE1hc2tDaGFyIiwibWFza0RpZ2l0IiwidmFsRGlnaXQiLCJtYXRjaCIsImZhbGxiYWNrIiwibGFzdE1hc2tDaGFyRGlnaXQiLCJtYXBNYXNrZGlnaXRQb3NpdGlvbnMiLCJtYXNrRGlmZiIsImRlZmF1bHRBcmdzIiwiY3JpdGVyaWEiLCJhcmdzIiwiY2FyZXQiLCJnZXRDbGVhblZhbCIsImdldE1hc2tlZFZhbCIsIm9ubHlNYXNrIiwicGxhY2Vob2xkZXIiLCJtYXhsZW5ndGgiLCJtYXNrV2F0Y2hlcnMiLCJIVE1MQXR0cmlidXRlcyIsImlucHV0Iiwibm90U2FtZU1hc2tPYmplY3QiLCJmaWVsZCIsIm1hc2tPYmplY3QiLCJzdHJpbmdpZnkiLCJKU09OIiwiZ2xvYmFscyIsIndhdGNoSW50ZXJ2YWwiLCJ3YXRjaElucHV0cyIsIm1hc2tGdW5jdGlvbiIsIm1hc2tlZCIsInVubWFzayIsImRhdGFNYXNrIiwiY2xlYW5WYWwiLCJhcHBseURhdGFNYXNrIiwibWFza0VsZW1lbnRzIiwiZmlsdGVyIiwiZGF0YU1hc2tBdHRyIiwidXNlckFnZW50IiwiZXZlbnROYW1lIiwiaXNTdXBwb3J0ZWQiLCJzZXRBdHRyaWJ1dGUiLCJ3YXRjaERhdGFNYXNrIiwiMCIsIjkiLCIjIiwiQSIsIlMiLCJyZWFkeSIsImFwcCIsIm1hc2tCZWhhdmlvciIsIm9uS2V5UHJlc3MiXSwibWFwcGluZ3MiOiJBQU1BLEdBQXNCLG1CQUFYQSxRQUNULEtBQU0sSUFBSUMsT0FBTSwyQ0FHakIsU0FBVUMsR0FDVCxZQUNBLElBQUlDLEdBQVVELEVBQUVFLEdBQUdDLE9BQU9DLE1BQU0sS0FBSyxHQUFHQSxNQUFNLElBQzlDLElB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TSxFQUFFLHNCQUFzQndTLFNBQVNiLElBQU0sTUFDbkQsU0FDSSxPQUlwQjdSIiwiZmlsZSI6Im1haW4ubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBCb290c3RyYXAgdjMuMy43IChodHRwOi8vZ2V0Ym9vdHN0cmFwLmNvbSlcbiAqIENvcHlyaWdodCAyMDExLTIwMTYgVHdpdHRlciwgSW5jLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKi9cblxuaWYgKHR5cGVvZiBqUXVlcnkgPT09ICd1bmRlZmluZWQnKSB7XG4gIHRocm93IG5ldyBFcnJvcignQm9vdHN0cmFwXFwncyBKYXZhU2NyaXB0IHJlcXVpcmVzIGpRdWVyeScpXG59XG5cbitmdW5jdGlvbiAoJCkge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciB2ZXJzaW9uID0gJC5mbi5qcXVlcnkuc3BsaXQoJyAnKVswXS5zcGxpdCgnLicpXG4gIGlmICgodmVyc2lvblswXSA8IDIgJiYgdmVyc2lvblsxXSA8IDkpIHx8ICh2ZXJzaW9uWzBdID09IDEgJiYgdmVyc2lvblsxXSA9PSA5ICYmIHZlcnNpb25bMl0gPCAxKSB8fCAodmVyc2lvblswXSA+IDMpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdCb290c3RyYXBcXCdzIEphdmFTY3JpcHQgcmVxdWlyZXMgalF1ZXJ5IHZlcnNpb24gMS45LjEgb3IgaGlnaGVyLCBidXQgbG93ZXIgdGhhbiB2ZXJzaW9uIDQnKVxuICB9XG59KGpRdWVyeSk7XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQm9vdHN0cmFwOiB0cmFuc2l0aW9uLmpzIHYzLjMuN1xuICogaHR0cDovL2dldGJvb3RzdHJhcC5jb20vamF2YXNjcmlwdC8jdHJhbnNpdGlvbnNcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29weXJpZ2h0IDIwMTEtMjAxNiBUd2l0dGVyLCBJbmMuXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cblxuK2Z1bmN0aW9uICgkKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBDU1MgVFJBTlNJVElPTiBTVVBQT1JUIChTaG91dG91dDogaHR0cDovL3d3dy5tb2Rlcm5penIuY29tLylcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgZnVuY3Rpb24gdHJhbnNpdGlvbkVuZCgpIHtcbiAgICB2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdib290c3RyYXAnKVxuXG4gICAgdmFyIHRyYW5zRW5kRXZlbnROYW1lcyA9IHtcbiAgICAgIFdlYmtpdFRyYW5zaXRpb24gOiAnd2Via2l0VHJhbnNpdGlvbkVuZCcsXG4gICAgICBNb3pUcmFuc2l0aW9uICAgIDogJ3RyYW5zaXRpb25lbmQnLFxuICAgICAgT1RyYW5zaXRpb24gICAgICA6ICdvVHJhbnNpdGlvbkVuZCBvdHJhbnNpdGlvbmVuZCcsXG4gICAgICB0cmFuc2l0aW9uICAgICAgIDogJ3RyYW5zaXRpb25lbmQnXG4gICAgfVxuXG4gICAgZm9yICh2YXIgbmFtZSBpbiB0cmFuc0VuZEV2ZW50TmFtZXMpIHtcbiAgICAgIGlmIChlbC5zdHlsZVtuYW1lXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB7IGVuZDogdHJhbnNFbmRFdmVudE5hbWVzW25hbWVdIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2UgLy8gZXhwbGljaXQgZm9yIGllOCAoICAuXy4pXG4gIH1cblxuICAvLyBodHRwOi8vYmxvZy5hbGV4bWFjY2F3LmNvbS9jc3MtdHJhbnNpdGlvbnNcbiAgJC5mbi5lbXVsYXRlVHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uIChkdXJhdGlvbikge1xuICAgIHZhciBjYWxsZWQgPSBmYWxzZVxuICAgIHZhciAkZWwgPSB0aGlzXG4gICAgJCh0aGlzKS5vbmUoJ2JzVHJhbnNpdGlvbkVuZCcsIGZ1bmN0aW9uICgpIHsgY2FsbGVkID0gdHJ1ZSB9KVxuICAgIHZhciBjYWxsYmFjayA9IGZ1bmN0aW9uICgpIHsgaWYgKCFjYWxsZWQpICQoJGVsKS50cmlnZ2VyKCQuc3VwcG9ydC50cmFuc2l0aW9uLmVuZCkgfVxuICAgIHNldFRpbWVvdXQoY2FsbGJhY2ssIGR1cmF0aW9uKVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAkKGZ1bmN0aW9uICgpIHtcbiAgICAkLnN1cHBvcnQudHJhbnNpdGlvbiA9IHRyYW5zaXRpb25FbmQoKVxuXG4gICAgaWYgKCEkLnN1cHBvcnQudHJhbnNpdGlvbikgcmV0dXJuXG5cbiAgICAkLmV2ZW50LnNwZWNpYWwuYnNUcmFuc2l0aW9uRW5kID0ge1xuICAgICAgYmluZFR5cGU6ICQuc3VwcG9ydC50cmFuc2l0aW9uLmVuZCxcbiAgICAgIGRlbGVnYXRlVHlwZTogJC5zdXBwb3J0LnRyYW5zaXRpb24uZW5kLFxuICAgICAgaGFuZGxlOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICBpZiAoJChlLnRhcmdldCkuaXModGhpcykpIHJldHVybiBlLmhhbmRsZU9iai5oYW5kbGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbiAgICAgIH1cbiAgICB9XG4gIH0pXG5cbn0oalF1ZXJ5KTtcblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBCb290c3RyYXA6IGFsZXJ0LmpzIHYzLjMuN1xuICogaHR0cDovL2dldGJvb3RzdHJhcC5jb20vamF2YXNjcmlwdC8jYWxlcnRzXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvcHlyaWdodCAyMDExLTIwMTYgVHdpdHRlciwgSW5jLlxuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG5cbitmdW5jdGlvbiAoJCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gQUxFUlQgQ0xBU1MgREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09XG5cbiAgdmFyIGRpc21pc3MgPSAnW2RhdGEtZGlzbWlzcz1cImFsZXJ0XCJdJ1xuICB2YXIgQWxlcnQgICA9IGZ1bmN0aW9uIChlbCkge1xuICAgICQoZWwpLm9uKCdjbGljaycsIGRpc21pc3MsIHRoaXMuY2xvc2UpXG4gIH1cblxuICBBbGVydC5WRVJTSU9OID0gJzMuMy43J1xuXG4gIEFsZXJ0LlRSQU5TSVRJT05fRFVSQVRJT04gPSAxNTBcblxuICBBbGVydC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiAoZSkge1xuICAgIHZhciAkdGhpcyAgICA9ICQodGhpcylcbiAgICB2YXIgc2VsZWN0b3IgPSAkdGhpcy5hdHRyKCdkYXRhLXRhcmdldCcpXG5cbiAgICBpZiAoIXNlbGVjdG9yKSB7XG4gICAgICBzZWxlY3RvciA9ICR0aGlzLmF0dHIoJ2hyZWYnKVxuICAgICAgc2VsZWN0b3IgPSBzZWxlY3RvciAmJiBzZWxlY3Rvci5yZXBsYWNlKC8uKig/PSNbXlxcc10qJCkvLCAnJykgLy8gc3RyaXAgZm9yIGllN1xuICAgIH1cblxuICAgIHZhciAkcGFyZW50ID0gJChzZWxlY3RvciA9PT0gJyMnID8gW10gOiBzZWxlY3RvcilcblxuICAgIGlmIChlKSBlLnByZXZlbnREZWZhdWx0KClcblxuICAgIGlmICghJHBhcmVudC5sZW5ndGgpIHtcbiAgICAgICRwYXJlbnQgPSAkdGhpcy5jbG9zZXN0KCcuYWxlcnQnKVxuICAgIH1cblxuICAgICRwYXJlbnQudHJpZ2dlcihlID0gJC5FdmVudCgnY2xvc2UuYnMuYWxlcnQnKSlcblxuICAgIGlmIChlLmlzRGVmYXVsdFByZXZlbnRlZCgpKSByZXR1cm5cblxuICAgICRwYXJlbnQucmVtb3ZlQ2xhc3MoJ2luJylcblxuICAgIGZ1bmN0aW9uIHJlbW92ZUVsZW1lbnQoKSB7XG4gICAgICAvLyBkZXRhY2ggZnJvbSBwYXJlbnQsIGZpcmUgZXZlbnQgdGhlbiBjbGVhbiB1cCBkYXRhXG4gICAgICAkcGFyZW50LmRldGFjaCgpLnRyaWdnZXIoJ2Nsb3NlZC5icy5hbGVydCcpLnJlbW92ZSgpXG4gICAgfVxuXG4gICAgJC5zdXBwb3J0LnRyYW5zaXRpb24gJiYgJHBhcmVudC5oYXNDbGFzcygnZmFkZScpID9cbiAgICAgICRwYXJlbnRcbiAgICAgICAgLm9uZSgnYnNUcmFuc2l0aW9uRW5kJywgcmVtb3ZlRWxlbWVudClcbiAgICAgICAgLmVtdWxhdGVUcmFuc2l0aW9uRW5kKEFsZXJ0LlRSQU5TSVRJT05fRFVSQVRJT04pIDpcbiAgICAgIHJlbW92ZUVsZW1lbnQoKVxuICB9XG5cblxuICAvLyBBTEVSVCBQTFVHSU4gREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIGZ1bmN0aW9uIFBsdWdpbihvcHRpb24pIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGhpcyA9ICQodGhpcylcbiAgICAgIHZhciBkYXRhICA9ICR0aGlzLmRhdGEoJ2JzLmFsZXJ0JylcblxuICAgICAgaWYgKCFkYXRhKSAkdGhpcy5kYXRhKCdicy5hbGVydCcsIChkYXRhID0gbmV3IEFsZXJ0KHRoaXMpKSlcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9uID09ICdzdHJpbmcnKSBkYXRhW29wdGlvbl0uY2FsbCgkdGhpcylcbiAgICB9KVxuICB9XG5cbiAgdmFyIG9sZCA9ICQuZm4uYWxlcnRcblxuICAkLmZuLmFsZXJ0ICAgICAgICAgICAgID0gUGx1Z2luXG4gICQuZm4uYWxlcnQuQ29uc3RydWN0b3IgPSBBbGVydFxuXG5cbiAgLy8gQUxFUlQgTk8gQ09ORkxJQ1RcbiAgLy8gPT09PT09PT09PT09PT09PT1cblxuICAkLmZuLmFsZXJ0Lm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJC5mbi5hbGVydCA9IG9sZFxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuXG4gIC8vIEFMRVJUIERBVEEtQVBJXG4gIC8vID09PT09PT09PT09PT09XG5cbiAgJChkb2N1bWVudCkub24oJ2NsaWNrLmJzLmFsZXJ0LmRhdGEtYXBpJywgZGlzbWlzcywgQWxlcnQucHJvdG90eXBlLmNsb3NlKVxuXG59KGpRdWVyeSk7XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQm9vdHN0cmFwOiBidXR0b24uanMgdjMuMy43XG4gKiBodHRwOi8vZ2V0Ym9vdHN0cmFwLmNvbS9qYXZhc2NyaXB0LyNidXR0b25zXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvcHlyaWdodCAyMDExLTIwMTYgVHdpdHRlciwgSW5jLlxuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG5cbitmdW5jdGlvbiAoJCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gQlVUVE9OIFBVQkxJQyBDTEFTUyBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIHZhciBCdXR0b24gPSBmdW5jdGlvbiAoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMuJGVsZW1lbnQgID0gJChlbGVtZW50KVxuICAgIHRoaXMub3B0aW9ucyAgID0gJC5leHRlbmQoe30sIEJ1dHRvbi5ERUZBVUxUUywgb3B0aW9ucylcbiAgICB0aGlzLmlzTG9hZGluZyA9IGZhbHNlXG4gIH1cblxuICBCdXR0b24uVkVSU0lPTiAgPSAnMy4zLjcnXG5cbiAgQnV0dG9uLkRFRkFVTFRTID0ge1xuICAgIGxvYWRpbmdUZXh0OiAnbG9hZGluZy4uLidcbiAgfVxuXG4gIEJ1dHRvbi5wcm90b3R5cGUuc2V0U3RhdGUgPSBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICB2YXIgZCAgICA9ICdkaXNhYmxlZCdcbiAgICB2YXIgJGVsICA9IHRoaXMuJGVsZW1lbnRcbiAgICB2YXIgdmFsICA9ICRlbC5pcygnaW5wdXQnKSA/ICd2YWwnIDogJ2h0bWwnXG4gICAgdmFyIGRhdGEgPSAkZWwuZGF0YSgpXG5cbiAgICBzdGF0ZSArPSAnVGV4dCdcblxuICAgIGlmIChkYXRhLnJlc2V0VGV4dCA9PSBudWxsKSAkZWwuZGF0YSgncmVzZXRUZXh0JywgJGVsW3ZhbF0oKSlcblxuICAgIC8vIHB1c2ggdG8gZXZlbnQgbG9vcCB0byBhbGxvdyBmb3JtcyB0byBzdWJtaXRcbiAgICBzZXRUaW1lb3V0KCQucHJveHkoZnVuY3Rpb24gKCkge1xuICAgICAgJGVsW3ZhbF0oZGF0YVtzdGF0ZV0gPT0gbnVsbCA/IHRoaXMub3B0aW9uc1tzdGF0ZV0gOiBkYXRhW3N0YXRlXSlcblxuICAgICAgaWYgKHN0YXRlID09ICdsb2FkaW5nVGV4dCcpIHtcbiAgICAgICAgdGhpcy5pc0xvYWRpbmcgPSB0cnVlXG4gICAgICAgICRlbC5hZGRDbGFzcyhkKS5hdHRyKGQsIGQpLnByb3AoZCwgdHJ1ZSlcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5pc0xvYWRpbmcpIHtcbiAgICAgICAgdGhpcy5pc0xvYWRpbmcgPSBmYWxzZVxuICAgICAgICAkZWwucmVtb3ZlQ2xhc3MoZCkucmVtb3ZlQXR0cihkKS5wcm9wKGQsIGZhbHNlKVxuICAgICAgfVxuICAgIH0sIHRoaXMpLCAwKVxuICB9XG5cbiAgQnV0dG9uLnByb3RvdHlwZS50b2dnbGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGNoYW5nZWQgPSB0cnVlXG4gICAgdmFyICRwYXJlbnQgPSB0aGlzLiRlbGVtZW50LmNsb3Nlc3QoJ1tkYXRhLXRvZ2dsZT1cImJ1dHRvbnNcIl0nKVxuXG4gICAgaWYgKCRwYXJlbnQubGVuZ3RoKSB7XG4gICAgICB2YXIgJGlucHV0ID0gdGhpcy4kZWxlbWVudC5maW5kKCdpbnB1dCcpXG4gICAgICBpZiAoJGlucHV0LnByb3AoJ3R5cGUnKSA9PSAncmFkaW8nKSB7XG4gICAgICAgIGlmICgkaW5wdXQucHJvcCgnY2hlY2tlZCcpKSBjaGFuZ2VkID0gZmFsc2VcbiAgICAgICAgJHBhcmVudC5maW5kKCcuYWN0aXZlJykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpXG4gICAgICAgIHRoaXMuJGVsZW1lbnQuYWRkQ2xhc3MoJ2FjdGl2ZScpXG4gICAgICB9IGVsc2UgaWYgKCRpbnB1dC5wcm9wKCd0eXBlJykgPT0gJ2NoZWNrYm94Jykge1xuICAgICAgICBpZiAoKCRpbnB1dC5wcm9wKCdjaGVja2VkJykpICE9PSB0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdhY3RpdmUnKSkgY2hhbmdlZCA9IGZhbHNlXG4gICAgICAgIHRoaXMuJGVsZW1lbnQudG9nZ2xlQ2xhc3MoJ2FjdGl2ZScpXG4gICAgICB9XG4gICAgICAkaW5wdXQucHJvcCgnY2hlY2tlZCcsIHRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2FjdGl2ZScpKVxuICAgICAgaWYgKGNoYW5nZWQpICRpbnB1dC50cmlnZ2VyKCdjaGFuZ2UnKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLiRlbGVtZW50LmF0dHIoJ2FyaWEtcHJlc3NlZCcsICF0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdhY3RpdmUnKSlcbiAgICAgIHRoaXMuJGVsZW1lbnQudG9nZ2xlQ2xhc3MoJ2FjdGl2ZScpXG4gICAgfVxuICB9XG5cblxuICAvLyBCVVRUT04gUExVR0lOIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgZnVuY3Rpb24gUGx1Z2luKG9wdGlvbikge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICR0aGlzICAgPSAkKHRoaXMpXG4gICAgICB2YXIgZGF0YSAgICA9ICR0aGlzLmRhdGEoJ2JzLmJ1dHRvbicpXG4gICAgICB2YXIgb3B0aW9ucyA9IHR5cGVvZiBvcHRpb24gPT0gJ29iamVjdCcgJiYgb3B0aW9uXG5cbiAgICAgIGlmICghZGF0YSkgJHRoaXMuZGF0YSgnYnMuYnV0dG9uJywgKGRhdGEgPSBuZXcgQnV0dG9uKHRoaXMsIG9wdGlvbnMpKSlcblxuICAgICAgaWYgKG9wdGlvbiA9PSAndG9nZ2xlJykgZGF0YS50b2dnbGUoKVxuICAgICAgZWxzZSBpZiAob3B0aW9uKSBkYXRhLnNldFN0YXRlKG9wdGlvbilcbiAgICB9KVxuICB9XG5cbiAgdmFyIG9sZCA9ICQuZm4uYnV0dG9uXG5cbiAgJC5mbi5idXR0b24gICAgICAgICAgICAgPSBQbHVnaW5cbiAgJC5mbi5idXR0b24uQ29uc3RydWN0b3IgPSBCdXR0b25cblxuXG4gIC8vIEJVVFRPTiBOTyBDT05GTElDVFxuICAvLyA9PT09PT09PT09PT09PT09PT1cblxuICAkLmZuLmJ1dHRvbi5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm4uYnV0dG9uID0gb2xkXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG5cbiAgLy8gQlVUVE9OIERBVEEtQVBJXG4gIC8vID09PT09PT09PT09PT09PVxuXG4gICQoZG9jdW1lbnQpXG4gICAgLm9uKCdjbGljay5icy5idXR0b24uZGF0YS1hcGknLCAnW2RhdGEtdG9nZ2xlXj1cImJ1dHRvblwiXScsIGZ1bmN0aW9uIChlKSB7XG4gICAgICB2YXIgJGJ0biA9ICQoZS50YXJnZXQpLmNsb3Nlc3QoJy5idG4nKVxuICAgICAgUGx1Z2luLmNhbGwoJGJ0biwgJ3RvZ2dsZScpXG4gICAgICBpZiAoISgkKGUudGFyZ2V0KS5pcygnaW5wdXRbdHlwZT1cInJhZGlvXCJdLCBpbnB1dFt0eXBlPVwiY2hlY2tib3hcIl0nKSkpIHtcbiAgICAgICAgLy8gUHJldmVudCBkb3VibGUgY2xpY2sgb24gcmFkaW9zLCBhbmQgdGhlIGRvdWJsZSBzZWxlY3Rpb25zIChzbyBjYW5jZWxsYXRpb24pIG9uIGNoZWNrYm94ZXNcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgIC8vIFRoZSB0YXJnZXQgY29tcG9uZW50IHN0aWxsIHJlY2VpdmUgdGhlIGZvY3VzXG4gICAgICAgIGlmICgkYnRuLmlzKCdpbnB1dCxidXR0b24nKSkgJGJ0bi50cmlnZ2VyKCdmb2N1cycpXG4gICAgICAgIGVsc2UgJGJ0bi5maW5kKCdpbnB1dDp2aXNpYmxlLGJ1dHRvbjp2aXNpYmxlJykuZmlyc3QoKS50cmlnZ2VyKCdmb2N1cycpXG4gICAgICB9XG4gICAgfSlcbiAgICAub24oJ2ZvY3VzLmJzLmJ1dHRvbi5kYXRhLWFwaSBibHVyLmJzLmJ1dHRvbi5kYXRhLWFwaScsICdbZGF0YS10b2dnbGVePVwiYnV0dG9uXCJdJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICQoZS50YXJnZXQpLmNsb3Nlc3QoJy5idG4nKS50b2dnbGVDbGFzcygnZm9jdXMnLCAvXmZvY3VzKGluKT8kLy50ZXN0KGUudHlwZSkpXG4gICAgfSlcblxufShqUXVlcnkpO1xuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEJvb3RzdHJhcDogY2Fyb3VzZWwuanMgdjMuMy43XG4gKiBodHRwOi8vZ2V0Ym9vdHN0cmFwLmNvbS9qYXZhc2NyaXB0LyNjYXJvdXNlbFxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb3B5cmlnaHQgMjAxMS0yMDE2IFR3aXR0ZXIsIEluYy5cbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuXG4rZnVuY3Rpb24gKCQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIENBUk9VU0VMIENMQVNTIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIHZhciBDYXJvdXNlbCA9IGZ1bmN0aW9uIChlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy4kZWxlbWVudCAgICA9ICQoZWxlbWVudClcbiAgICB0aGlzLiRpbmRpY2F0b3JzID0gdGhpcy4kZWxlbWVudC5maW5kKCcuY2Fyb3VzZWwtaW5kaWNhdG9ycycpXG4gICAgdGhpcy5vcHRpb25zICAgICA9IG9wdGlvbnNcbiAgICB0aGlzLnBhdXNlZCAgICAgID0gbnVsbFxuICAgIHRoaXMuc2xpZGluZyAgICAgPSBudWxsXG4gICAgdGhpcy5pbnRlcnZhbCAgICA9IG51bGxcbiAgICB0aGlzLiRhY3RpdmUgICAgID0gbnVsbFxuICAgIHRoaXMuJGl0ZW1zICAgICAgPSBudWxsXG5cbiAgICB0aGlzLm9wdGlvbnMua2V5Ym9hcmQgJiYgdGhpcy4kZWxlbWVudC5vbigna2V5ZG93bi5icy5jYXJvdXNlbCcsICQucHJveHkodGhpcy5rZXlkb3duLCB0aGlzKSlcblxuICAgIHRoaXMub3B0aW9ucy5wYXVzZSA9PSAnaG92ZXInICYmICEoJ29udG91Y2hzdGFydCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSAmJiB0aGlzLiRlbGVtZW50XG4gICAgICAub24oJ21vdXNlZW50ZXIuYnMuY2Fyb3VzZWwnLCAkLnByb3h5KHRoaXMucGF1c2UsIHRoaXMpKVxuICAgICAgLm9uKCdtb3VzZWxlYXZlLmJzLmNhcm91c2VsJywgJC5wcm94eSh0aGlzLmN5Y2xlLCB0aGlzKSlcbiAgfVxuXG4gIENhcm91c2VsLlZFUlNJT04gID0gJzMuMy43J1xuXG4gIENhcm91c2VsLlRSQU5TSVRJT05fRFVSQVRJT04gPSA2MDBcblxuICBDYXJvdXNlbC5ERUZBVUxUUyA9IHtcbiAgICBpbnRlcnZhbDogNTAwMCxcbiAgICBwYXVzZTogJ2hvdmVyJyxcbiAgICB3cmFwOiB0cnVlLFxuICAgIGtleWJvYXJkOiB0cnVlXG4gIH1cblxuICBDYXJvdXNlbC5wcm90b3R5cGUua2V5ZG93biA9IGZ1bmN0aW9uIChlKSB7XG4gICAgaWYgKC9pbnB1dHx0ZXh0YXJlYS9pLnRlc3QoZS50YXJnZXQudGFnTmFtZSkpIHJldHVyblxuICAgIHN3aXRjaCAoZS53aGljaCkge1xuICAgICAgY2FzZSAzNzogdGhpcy5wcmV2KCk7IGJyZWFrXG4gICAgICBjYXNlIDM5OiB0aGlzLm5leHQoKTsgYnJlYWtcbiAgICAgIGRlZmF1bHQ6IHJldHVyblxuICAgIH1cblxuICAgIGUucHJldmVudERlZmF1bHQoKVxuICB9XG5cbiAgQ2Fyb3VzZWwucHJvdG90eXBlLmN5Y2xlID0gZnVuY3Rpb24gKGUpIHtcbiAgICBlIHx8ICh0aGlzLnBhdXNlZCA9IGZhbHNlKVxuXG4gICAgdGhpcy5pbnRlcnZhbCAmJiBjbGVhckludGVydmFsKHRoaXMuaW50ZXJ2YWwpXG5cbiAgICB0aGlzLm9wdGlvbnMuaW50ZXJ2YWxcbiAgICAgICYmICF0aGlzLnBhdXNlZFxuICAgICAgJiYgKHRoaXMuaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgkLnByb3h5KHRoaXMubmV4dCwgdGhpcyksIHRoaXMub3B0aW9ucy5pbnRlcnZhbCkpXG5cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgQ2Fyb3VzZWwucHJvdG90eXBlLmdldEl0ZW1JbmRleCA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgdGhpcy4kaXRlbXMgPSBpdGVtLnBhcmVudCgpLmNoaWxkcmVuKCcuaXRlbScpXG4gICAgcmV0dXJuIHRoaXMuJGl0ZW1zLmluZGV4KGl0ZW0gfHwgdGhpcy4kYWN0aXZlKVxuICB9XG5cbiAgQ2Fyb3VzZWwucHJvdG90eXBlLmdldEl0ZW1Gb3JEaXJlY3Rpb24gPSBmdW5jdGlvbiAoZGlyZWN0aW9uLCBhY3RpdmUpIHtcbiAgICB2YXIgYWN0aXZlSW5kZXggPSB0aGlzLmdldEl0ZW1JbmRleChhY3RpdmUpXG4gICAgdmFyIHdpbGxXcmFwID0gKGRpcmVjdGlvbiA9PSAncHJldicgJiYgYWN0aXZlSW5kZXggPT09IDApXG4gICAgICAgICAgICAgICAgfHwgKGRpcmVjdGlvbiA9PSAnbmV4dCcgJiYgYWN0aXZlSW5kZXggPT0gKHRoaXMuJGl0ZW1zLmxlbmd0aCAtIDEpKVxuICAgIGlmICh3aWxsV3JhcCAmJiAhdGhpcy5vcHRpb25zLndyYXApIHJldHVybiBhY3RpdmVcbiAgICB2YXIgZGVsdGEgPSBkaXJlY3Rpb24gPT0gJ3ByZXYnID8gLTEgOiAxXG4gICAgdmFyIGl0ZW1JbmRleCA9IChhY3RpdmVJbmRleCArIGRlbHRhKSAlIHRoaXMuJGl0ZW1zLmxlbmd0aFxuICAgIHJldHVybiB0aGlzLiRpdGVtcy5lcShpdGVtSW5kZXgpXG4gIH1cblxuICBDYXJvdXNlbC5wcm90b3R5cGUudG8gPSBmdW5jdGlvbiAocG9zKSB7XG4gICAgdmFyIHRoYXQgICAgICAgID0gdGhpc1xuICAgIHZhciBhY3RpdmVJbmRleCA9IHRoaXMuZ2V0SXRlbUluZGV4KHRoaXMuJGFjdGl2ZSA9IHRoaXMuJGVsZW1lbnQuZmluZCgnLml0ZW0uYWN0aXZlJykpXG5cbiAgICBpZiAocG9zID4gKHRoaXMuJGl0ZW1zLmxlbmd0aCAtIDEpIHx8IHBvcyA8IDApIHJldHVyblxuXG4gICAgaWYgKHRoaXMuc2xpZGluZykgICAgICAgcmV0dXJuIHRoaXMuJGVsZW1lbnQub25lKCdzbGlkLmJzLmNhcm91c2VsJywgZnVuY3Rpb24gKCkgeyB0aGF0LnRvKHBvcykgfSkgLy8geWVzLCBcInNsaWRcIlxuICAgIGlmIChhY3RpdmVJbmRleCA9PSBwb3MpIHJldHVybiB0aGlzLnBhdXNlKCkuY3ljbGUoKVxuXG4gICAgcmV0dXJuIHRoaXMuc2xpZGUocG9zID4gYWN0aXZlSW5kZXggPyAnbmV4dCcgOiAncHJldicsIHRoaXMuJGl0ZW1zLmVxKHBvcykpXG4gIH1cblxuICBDYXJvdXNlbC5wcm90b3R5cGUucGF1c2UgPSBmdW5jdGlvbiAoZSkge1xuICAgIGUgfHwgKHRoaXMucGF1c2VkID0gdHJ1ZSlcblxuICAgIGlmICh0aGlzLiRlbGVtZW50LmZpbmQoJy5uZXh0LCAucHJldicpLmxlbmd0aCAmJiAkLnN1cHBvcnQudHJhbnNpdGlvbikge1xuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCQuc3VwcG9ydC50cmFuc2l0aW9uLmVuZClcbiAgICAgIHRoaXMuY3ljbGUodHJ1ZSlcbiAgICB9XG5cbiAgICB0aGlzLmludGVydmFsID0gY2xlYXJJbnRlcnZhbCh0aGlzLmludGVydmFsKVxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIENhcm91c2VsLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLnNsaWRpbmcpIHJldHVyblxuICAgIHJldHVybiB0aGlzLnNsaWRlKCduZXh0JylcbiAgfVxuXG4gIENhcm91c2VsLnByb3RvdHlwZS5wcmV2ID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLnNsaWRpbmcpIHJldHVyblxuICAgIHJldHVybiB0aGlzLnNsaWRlKCdwcmV2JylcbiAgfVxuXG4gIENhcm91c2VsLnByb3RvdHlwZS5zbGlkZSA9IGZ1bmN0aW9uICh0eXBlLCBuZXh0KSB7XG4gICAgdmFyICRhY3RpdmUgICA9IHRoaXMuJGVsZW1lbnQuZmluZCgnLml0ZW0uYWN0aXZlJylcbiAgICB2YXIgJG5leHQgICAgID0gbmV4dCB8fCB0aGlzLmdldEl0ZW1Gb3JEaXJlY3Rpb24odHlwZSwgJGFjdGl2ZSlcbiAgICB2YXIgaXNDeWNsaW5nID0gdGhpcy5pbnRlcnZhbFxuICAgIHZhciBkaXJlY3Rpb24gPSB0eXBlID09ICduZXh0JyA/ICdsZWZ0JyA6ICdyaWdodCdcbiAgICB2YXIgdGhhdCAgICAgID0gdGhpc1xuXG4gICAgaWYgKCRuZXh0Lmhhc0NsYXNzKCdhY3RpdmUnKSkgcmV0dXJuICh0aGlzLnNsaWRpbmcgPSBmYWxzZSlcblxuICAgIHZhciByZWxhdGVkVGFyZ2V0ID0gJG5leHRbMF1cbiAgICB2YXIgc2xpZGVFdmVudCA9ICQuRXZlbnQoJ3NsaWRlLmJzLmNhcm91c2VsJywge1xuICAgICAgcmVsYXRlZFRhcmdldDogcmVsYXRlZFRhcmdldCxcbiAgICAgIGRpcmVjdGlvbjogZGlyZWN0aW9uXG4gICAgfSlcbiAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoc2xpZGVFdmVudClcbiAgICBpZiAoc2xpZGVFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgcmV0dXJuXG5cbiAgICB0aGlzLnNsaWRpbmcgPSB0cnVlXG5cbiAgICBpc0N5Y2xpbmcgJiYgdGhpcy5wYXVzZSgpXG5cbiAgICBpZiAodGhpcy4kaW5kaWNhdG9ycy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuJGluZGljYXRvcnMuZmluZCgnLmFjdGl2ZScpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKVxuICAgICAgdmFyICRuZXh0SW5kaWNhdG9yID0gJCh0aGlzLiRpbmRpY2F0b3JzLmNoaWxkcmVuKClbdGhpcy5nZXRJdGVtSW5kZXgoJG5leHQpXSlcbiAgICAgICRuZXh0SW5kaWNhdG9yICYmICRuZXh0SW5kaWNhdG9yLmFkZENsYXNzKCdhY3RpdmUnKVxuICAgIH1cblxuICAgIHZhciBzbGlkRXZlbnQgPSAkLkV2ZW50KCdzbGlkLmJzLmNhcm91c2VsJywgeyByZWxhdGVkVGFyZ2V0OiByZWxhdGVkVGFyZ2V0LCBkaXJlY3Rpb246IGRpcmVjdGlvbiB9KSAvLyB5ZXMsIFwic2xpZFwiXG4gICAgaWYgKCQuc3VwcG9ydC50cmFuc2l0aW9uICYmIHRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ3NsaWRlJykpIHtcbiAgICAgICRuZXh0LmFkZENsYXNzKHR5cGUpXG4gICAgICAkbmV4dFswXS5vZmZzZXRXaWR0aCAvLyBmb3JjZSByZWZsb3dcbiAgICAgICRhY3RpdmUuYWRkQ2xhc3MoZGlyZWN0aW9uKVxuICAgICAgJG5leHQuYWRkQ2xhc3MoZGlyZWN0aW9uKVxuICAgICAgJGFjdGl2ZVxuICAgICAgICAub25lKCdic1RyYW5zaXRpb25FbmQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgJG5leHQucmVtb3ZlQ2xhc3MoW3R5cGUsIGRpcmVjdGlvbl0uam9pbignICcpKS5hZGRDbGFzcygnYWN0aXZlJylcbiAgICAgICAgICAkYWN0aXZlLnJlbW92ZUNsYXNzKFsnYWN0aXZlJywgZGlyZWN0aW9uXS5qb2luKCcgJykpXG4gICAgICAgICAgdGhhdC5zbGlkaW5nID0gZmFsc2VcbiAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoYXQuJGVsZW1lbnQudHJpZ2dlcihzbGlkRXZlbnQpXG4gICAgICAgICAgfSwgMClcbiAgICAgICAgfSlcbiAgICAgICAgLmVtdWxhdGVUcmFuc2l0aW9uRW5kKENhcm91c2VsLlRSQU5TSVRJT05fRFVSQVRJT04pXG4gICAgfSBlbHNlIHtcbiAgICAgICRhY3RpdmUucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpXG4gICAgICAkbmV4dC5hZGRDbGFzcygnYWN0aXZlJylcbiAgICAgIHRoaXMuc2xpZGluZyA9IGZhbHNlXG4gICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoc2xpZEV2ZW50KVxuICAgIH1cblxuICAgIGlzQ3ljbGluZyAmJiB0aGlzLmN5Y2xlKClcblxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuXG4gIC8vIENBUk9VU0VMIFBMVUdJTiBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgZnVuY3Rpb24gUGx1Z2luKG9wdGlvbikge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICR0aGlzICAgPSAkKHRoaXMpXG4gICAgICB2YXIgZGF0YSAgICA9ICR0aGlzLmRhdGEoJ2JzLmNhcm91c2VsJylcbiAgICAgIHZhciBvcHRpb25zID0gJC5leHRlbmQoe30sIENhcm91c2VsLkRFRkFVTFRTLCAkdGhpcy5kYXRhKCksIHR5cGVvZiBvcHRpb24gPT0gJ29iamVjdCcgJiYgb3B0aW9uKVxuICAgICAgdmFyIGFjdGlvbiAgPSB0eXBlb2Ygb3B0aW9uID09ICdzdHJpbmcnID8gb3B0aW9uIDogb3B0aW9ucy5zbGlkZVxuXG4gICAgICBpZiAoIWRhdGEpICR0aGlzLmRhdGEoJ2JzLmNhcm91c2VsJywgKGRhdGEgPSBuZXcgQ2Fyb3VzZWwodGhpcywgb3B0aW9ucykpKVxuICAgICAgaWYgKHR5cGVvZiBvcHRpb24gPT0gJ251bWJlcicpIGRhdGEudG8ob3B0aW9uKVxuICAgICAgZWxzZSBpZiAoYWN0aW9uKSBkYXRhW2FjdGlvbl0oKVxuICAgICAgZWxzZSBpZiAob3B0aW9ucy5pbnRlcnZhbCkgZGF0YS5wYXVzZSgpLmN5Y2xlKClcbiAgICB9KVxuICB9XG5cbiAgdmFyIG9sZCA9ICQuZm4uY2Fyb3VzZWxcblxuICAkLmZuLmNhcm91c2VsICAgICAgICAgICAgID0gUGx1Z2luXG4gICQuZm4uY2Fyb3VzZWwuQ29uc3RydWN0b3IgPSBDYXJvdXNlbFxuXG5cbiAgLy8gQ0FST1VTRUwgTk8gQ09ORkxJQ1RcbiAgLy8gPT09PT09PT09PT09PT09PT09PT1cblxuICAkLmZuLmNhcm91c2VsLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJC5mbi5jYXJvdXNlbCA9IG9sZFxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuXG4gIC8vIENBUk9VU0VMIERBVEEtQVBJXG4gIC8vID09PT09PT09PT09PT09PT09XG5cbiAgdmFyIGNsaWNrSGFuZGxlciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgdmFyIGhyZWZcbiAgICB2YXIgJHRoaXMgICA9ICQodGhpcylcbiAgICB2YXIgJHRhcmdldCA9ICQoJHRoaXMuYXR0cignZGF0YS10YXJnZXQnKSB8fCAoaHJlZiA9ICR0aGlzLmF0dHIoJ2hyZWYnKSkgJiYgaHJlZi5yZXBsYWNlKC8uKig/PSNbXlxcc10rJCkvLCAnJykpIC8vIHN0cmlwIGZvciBpZTdcbiAgICBpZiAoISR0YXJnZXQuaGFzQ2xhc3MoJ2Nhcm91c2VsJykpIHJldHVyblxuICAgIHZhciBvcHRpb25zID0gJC5leHRlbmQoe30sICR0YXJnZXQuZGF0YSgpLCAkdGhpcy5kYXRhKCkpXG4gICAgdmFyIHNsaWRlSW5kZXggPSAkdGhpcy5hdHRyKCdkYXRhLXNsaWRlLXRvJylcbiAgICBpZiAoc2xpZGVJbmRleCkgb3B0aW9ucy5pbnRlcnZhbCA9IGZhbHNlXG5cbiAgICBQbHVnaW4uY2FsbCgkdGFyZ2V0LCBvcHRpb25zKVxuXG4gICAgaWYgKHNsaWRlSW5kZXgpIHtcbiAgICAgICR0YXJnZXQuZGF0YSgnYnMuY2Fyb3VzZWwnKS50byhzbGlkZUluZGV4KVxuICAgIH1cblxuICAgIGUucHJldmVudERlZmF1bHQoKVxuICB9XG5cbiAgJChkb2N1bWVudClcbiAgICAub24oJ2NsaWNrLmJzLmNhcm91c2VsLmRhdGEtYXBpJywgJ1tkYXRhLXNsaWRlXScsIGNsaWNrSGFuZGxlcilcbiAgICAub24oJ2NsaWNrLmJzLmNhcm91c2VsLmRhdGEtYXBpJywgJ1tkYXRhLXNsaWRlLXRvXScsIGNsaWNrSGFuZGxlcilcblxuICAkKHdpbmRvdykub24oJ2xvYWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgJCgnW2RhdGEtcmlkZT1cImNhcm91c2VsXCJdJykuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJGNhcm91c2VsID0gJCh0aGlzKVxuICAgICAgUGx1Z2luLmNhbGwoJGNhcm91c2VsLCAkY2Fyb3VzZWwuZGF0YSgpKVxuICAgIH0pXG4gIH0pXG5cbn0oalF1ZXJ5KTtcblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBCb290c3RyYXA6IGNvbGxhcHNlLmpzIHYzLjMuN1xuICogaHR0cDovL2dldGJvb3RzdHJhcC5jb20vamF2YXNjcmlwdC8jY29sbGFwc2VcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29weXJpZ2h0IDIwMTEtMjAxNiBUd2l0dGVyLCBJbmMuXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cbi8qIGpzaGludCBsYXRlZGVmOiBmYWxzZSAqL1xuXG4rZnVuY3Rpb24gKCQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIENPTExBUFNFIFBVQkxJQyBDTEFTUyBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgdmFyIENvbGxhcHNlID0gZnVuY3Rpb24gKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRlbGVtZW50ICAgICAgPSAkKGVsZW1lbnQpXG4gICAgdGhpcy5vcHRpb25zICAgICAgID0gJC5leHRlbmQoe30sIENvbGxhcHNlLkRFRkFVTFRTLCBvcHRpb25zKVxuICAgIHRoaXMuJHRyaWdnZXIgICAgICA9ICQoJ1tkYXRhLXRvZ2dsZT1cImNvbGxhcHNlXCJdW2hyZWY9XCIjJyArIGVsZW1lbnQuaWQgKyAnXCJdLCcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1tkYXRhLXRvZ2dsZT1cImNvbGxhcHNlXCJdW2RhdGEtdGFyZ2V0PVwiIycgKyBlbGVtZW50LmlkICsgJ1wiXScpXG4gICAgdGhpcy50cmFuc2l0aW9uaW5nID0gbnVsbFxuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5wYXJlbnQpIHtcbiAgICAgIHRoaXMuJHBhcmVudCA9IHRoaXMuZ2V0UGFyZW50KClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5hZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3ModGhpcy4kZWxlbWVudCwgdGhpcy4kdHJpZ2dlcilcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLnRvZ2dsZSkgdGhpcy50b2dnbGUoKVxuICB9XG5cbiAgQ29sbGFwc2UuVkVSU0lPTiAgPSAnMy4zLjcnXG5cbiAgQ29sbGFwc2UuVFJBTlNJVElPTl9EVVJBVElPTiA9IDM1MFxuXG4gIENvbGxhcHNlLkRFRkFVTFRTID0ge1xuICAgIHRvZ2dsZTogdHJ1ZVxuICB9XG5cbiAgQ29sbGFwc2UucHJvdG90eXBlLmRpbWVuc2lvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaGFzV2lkdGggPSB0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCd3aWR0aCcpXG4gICAgcmV0dXJuIGhhc1dpZHRoID8gJ3dpZHRoJyA6ICdoZWlnaHQnXG4gIH1cblxuICBDb2xsYXBzZS5wcm90b3R5cGUuc2hvdyA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy50cmFuc2l0aW9uaW5nIHx8IHRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2luJykpIHJldHVyblxuXG4gICAgdmFyIGFjdGl2ZXNEYXRhXG4gICAgdmFyIGFjdGl2ZXMgPSB0aGlzLiRwYXJlbnQgJiYgdGhpcy4kcGFyZW50LmNoaWxkcmVuKCcucGFuZWwnKS5jaGlsZHJlbignLmluLCAuY29sbGFwc2luZycpXG5cbiAgICBpZiAoYWN0aXZlcyAmJiBhY3RpdmVzLmxlbmd0aCkge1xuICAgICAgYWN0aXZlc0RhdGEgPSBhY3RpdmVzLmRhdGEoJ2JzLmNvbGxhcHNlJylcbiAgICAgIGlmIChhY3RpdmVzRGF0YSAmJiBhY3RpdmVzRGF0YS50cmFuc2l0aW9uaW5nKSByZXR1cm5cbiAgICB9XG5cbiAgICB2YXIgc3RhcnRFdmVudCA9ICQuRXZlbnQoJ3Nob3cuYnMuY29sbGFwc2UnKVxuICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcihzdGFydEV2ZW50KVxuICAgIGlmIChzdGFydEV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSByZXR1cm5cblxuICAgIGlmIChhY3RpdmVzICYmIGFjdGl2ZXMubGVuZ3RoKSB7XG4gICAgICBQbHVnaW4uY2FsbChhY3RpdmVzLCAnaGlkZScpXG4gICAgICBhY3RpdmVzRGF0YSB8fCBhY3RpdmVzLmRhdGEoJ2JzLmNvbGxhcHNlJywgbnVsbClcbiAgICB9XG5cbiAgICB2YXIgZGltZW5zaW9uID0gdGhpcy5kaW1lbnNpb24oKVxuXG4gICAgdGhpcy4kZWxlbWVudFxuICAgICAgLnJlbW92ZUNsYXNzKCdjb2xsYXBzZScpXG4gICAgICAuYWRkQ2xhc3MoJ2NvbGxhcHNpbmcnKVtkaW1lbnNpb25dKDApXG4gICAgICAuYXR0cignYXJpYS1leHBhbmRlZCcsIHRydWUpXG5cbiAgICB0aGlzLiR0cmlnZ2VyXG4gICAgICAucmVtb3ZlQ2xhc3MoJ2NvbGxhcHNlZCcpXG4gICAgICAuYXR0cignYXJpYS1leHBhbmRlZCcsIHRydWUpXG5cbiAgICB0aGlzLnRyYW5zaXRpb25pbmcgPSAxXG5cbiAgICB2YXIgY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLiRlbGVtZW50XG4gICAgICAgIC5yZW1vdmVDbGFzcygnY29sbGFwc2luZycpXG4gICAgICAgIC5hZGRDbGFzcygnY29sbGFwc2UgaW4nKVtkaW1lbnNpb25dKCcnKVxuICAgICAgdGhpcy50cmFuc2l0aW9uaW5nID0gMFxuICAgICAgdGhpcy4kZWxlbWVudFxuICAgICAgICAudHJpZ2dlcignc2hvd24uYnMuY29sbGFwc2UnKVxuICAgIH1cblxuICAgIGlmICghJC5zdXBwb3J0LnRyYW5zaXRpb24pIHJldHVybiBjb21wbGV0ZS5jYWxsKHRoaXMpXG5cbiAgICB2YXIgc2Nyb2xsU2l6ZSA9ICQuY2FtZWxDYXNlKFsnc2Nyb2xsJywgZGltZW5zaW9uXS5qb2luKCctJykpXG5cbiAgICB0aGlzLiRlbGVtZW50XG4gICAgICAub25lKCdic1RyYW5zaXRpb25FbmQnLCAkLnByb3h5KGNvbXBsZXRlLCB0aGlzKSlcbiAgICAgIC5lbXVsYXRlVHJhbnNpdGlvbkVuZChDb2xsYXBzZS5UUkFOU0lUSU9OX0RVUkFUSU9OKVtkaW1lbnNpb25dKHRoaXMuJGVsZW1lbnRbMF1bc2Nyb2xsU2l6ZV0pXG4gIH1cblxuICBDb2xsYXBzZS5wcm90b3R5cGUuaGlkZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy50cmFuc2l0aW9uaW5nIHx8ICF0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdpbicpKSByZXR1cm5cblxuICAgIHZhciBzdGFydEV2ZW50ID0gJC5FdmVudCgnaGlkZS5icy5jb2xsYXBzZScpXG4gICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKHN0YXJ0RXZlbnQpXG4gICAgaWYgKHN0YXJ0RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHJldHVyblxuXG4gICAgdmFyIGRpbWVuc2lvbiA9IHRoaXMuZGltZW5zaW9uKClcblxuICAgIHRoaXMuJGVsZW1lbnRbZGltZW5zaW9uXSh0aGlzLiRlbGVtZW50W2RpbWVuc2lvbl0oKSlbMF0ub2Zmc2V0SGVpZ2h0XG5cbiAgICB0aGlzLiRlbGVtZW50XG4gICAgICAuYWRkQ2xhc3MoJ2NvbGxhcHNpbmcnKVxuICAgICAgLnJlbW92ZUNsYXNzKCdjb2xsYXBzZSBpbicpXG4gICAgICAuYXR0cignYXJpYS1leHBhbmRlZCcsIGZhbHNlKVxuXG4gICAgdGhpcy4kdHJpZ2dlclxuICAgICAgLmFkZENsYXNzKCdjb2xsYXBzZWQnKVxuICAgICAgLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCBmYWxzZSlcblxuICAgIHRoaXMudHJhbnNpdGlvbmluZyA9IDFcblxuICAgIHZhciBjb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMudHJhbnNpdGlvbmluZyA9IDBcbiAgICAgIHRoaXMuJGVsZW1lbnRcbiAgICAgICAgLnJlbW92ZUNsYXNzKCdjb2xsYXBzaW5nJylcbiAgICAgICAgLmFkZENsYXNzKCdjb2xsYXBzZScpXG4gICAgICAgIC50cmlnZ2VyKCdoaWRkZW4uYnMuY29sbGFwc2UnKVxuICAgIH1cblxuICAgIGlmICghJC5zdXBwb3J0LnRyYW5zaXRpb24pIHJldHVybiBjb21wbGV0ZS5jYWxsKHRoaXMpXG5cbiAgICB0aGlzLiRlbGVtZW50XG4gICAgICBbZGltZW5zaW9uXSgwKVxuICAgICAgLm9uZSgnYnNUcmFuc2l0aW9uRW5kJywgJC5wcm94eShjb21wbGV0ZSwgdGhpcykpXG4gICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQoQ29sbGFwc2UuVFJBTlNJVElPTl9EVVJBVElPTilcbiAgfVxuXG4gIENvbGxhcHNlLnByb3RvdHlwZS50b2dnbGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpc1t0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdpbicpID8gJ2hpZGUnIDogJ3Nob3cnXSgpXG4gIH1cblxuICBDb2xsYXBzZS5wcm90b3R5cGUuZ2V0UGFyZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAkKHRoaXMub3B0aW9ucy5wYXJlbnQpXG4gICAgICAuZmluZCgnW2RhdGEtdG9nZ2xlPVwiY29sbGFwc2VcIl1bZGF0YS1wYXJlbnQ9XCInICsgdGhpcy5vcHRpb25zLnBhcmVudCArICdcIl0nKVxuICAgICAgLmVhY2goJC5wcm94eShmdW5jdGlvbiAoaSwgZWxlbWVudCkge1xuICAgICAgICB2YXIgJGVsZW1lbnQgPSAkKGVsZW1lbnQpXG4gICAgICAgIHRoaXMuYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzKGdldFRhcmdldEZyb21UcmlnZ2VyKCRlbGVtZW50KSwgJGVsZW1lbnQpXG4gICAgICB9LCB0aGlzKSlcbiAgICAgIC5lbmQoKVxuICB9XG5cbiAgQ29sbGFwc2UucHJvdG90eXBlLmFkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyA9IGZ1bmN0aW9uICgkZWxlbWVudCwgJHRyaWdnZXIpIHtcbiAgICB2YXIgaXNPcGVuID0gJGVsZW1lbnQuaGFzQ2xhc3MoJ2luJylcblxuICAgICRlbGVtZW50LmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCBpc09wZW4pXG4gICAgJHRyaWdnZXJcbiAgICAgIC50b2dnbGVDbGFzcygnY29sbGFwc2VkJywgIWlzT3BlbilcbiAgICAgIC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgaXNPcGVuKVxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0VGFyZ2V0RnJvbVRyaWdnZXIoJHRyaWdnZXIpIHtcbiAgICB2YXIgaHJlZlxuICAgIHZhciB0YXJnZXQgPSAkdHJpZ2dlci5hdHRyKCdkYXRhLXRhcmdldCcpXG4gICAgICB8fCAoaHJlZiA9ICR0cmlnZ2VyLmF0dHIoJ2hyZWYnKSkgJiYgaHJlZi5yZXBsYWNlKC8uKig/PSNbXlxcc10rJCkvLCAnJykgLy8gc3RyaXAgZm9yIGllN1xuXG4gICAgcmV0dXJuICQodGFyZ2V0KVxuICB9XG5cblxuICAvLyBDT0xMQVBTRSBQTFVHSU4gREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIGZ1bmN0aW9uIFBsdWdpbihvcHRpb24pIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGhpcyAgID0gJCh0aGlzKVxuICAgICAgdmFyIGRhdGEgICAgPSAkdGhpcy5kYXRhKCdicy5jb2xsYXBzZScpXG4gICAgICB2YXIgb3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBDb2xsYXBzZS5ERUZBVUxUUywgJHRoaXMuZGF0YSgpLCB0eXBlb2Ygb3B0aW9uID09ICdvYmplY3QnICYmIG9wdGlvbilcblxuICAgICAgaWYgKCFkYXRhICYmIG9wdGlvbnMudG9nZ2xlICYmIC9zaG93fGhpZGUvLnRlc3Qob3B0aW9uKSkgb3B0aW9ucy50b2dnbGUgPSBmYWxzZVxuICAgICAgaWYgKCFkYXRhKSAkdGhpcy5kYXRhKCdicy5jb2xsYXBzZScsIChkYXRhID0gbmV3IENvbGxhcHNlKHRoaXMsIG9wdGlvbnMpKSlcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9uID09ICdzdHJpbmcnKSBkYXRhW29wdGlvbl0oKVxuICAgIH0pXG4gIH1cblxuICB2YXIgb2xkID0gJC5mbi5jb2xsYXBzZVxuXG4gICQuZm4uY29sbGFwc2UgICAgICAgICAgICAgPSBQbHVnaW5cbiAgJC5mbi5jb2xsYXBzZS5Db25zdHJ1Y3RvciA9IENvbGxhcHNlXG5cblxuICAvLyBDT0xMQVBTRSBOTyBDT05GTElDVFxuICAvLyA9PT09PT09PT09PT09PT09PT09PVxuXG4gICQuZm4uY29sbGFwc2Uubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuLmNvbGxhcHNlID0gb2xkXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG5cbiAgLy8gQ09MTEFQU0UgREFUQS1BUElcbiAgLy8gPT09PT09PT09PT09PT09PT1cblxuICAkKGRvY3VtZW50KS5vbignY2xpY2suYnMuY29sbGFwc2UuZGF0YS1hcGknLCAnW2RhdGEtdG9nZ2xlPVwiY29sbGFwc2VcIl0nLCBmdW5jdGlvbiAoZSkge1xuICAgIHZhciAkdGhpcyAgID0gJCh0aGlzKVxuXG4gICAgaWYgKCEkdGhpcy5hdHRyKCdkYXRhLXRhcmdldCcpKSBlLnByZXZlbnREZWZhdWx0KClcblxuICAgIHZhciAkdGFyZ2V0ID0gZ2V0VGFyZ2V0RnJvbVRyaWdnZXIoJHRoaXMpXG4gICAgdmFyIGRhdGEgICAgPSAkdGFyZ2V0LmRhdGEoJ2JzLmNvbGxhcHNlJylcbiAgICB2YXIgb3B0aW9uICA9IGRhdGEgPyAndG9nZ2xlJyA6ICR0aGlzLmRhdGEoKVxuXG4gICAgUGx1Z2luLmNhbGwoJHRhcmdldCwgb3B0aW9uKVxuICB9KVxuXG59KGpRdWVyeSk7XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQm9vdHN0cmFwOiBkcm9wZG93bi5qcyB2My4zLjdcbiAqIGh0dHA6Ly9nZXRib290c3RyYXAuY29tL2phdmFzY3JpcHQvI2Ryb3Bkb3duc1xuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb3B5cmlnaHQgMjAxMS0yMDE2IFR3aXR0ZXIsIEluYy5cbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuXG4rZnVuY3Rpb24gKCQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIERST1BET1dOIENMQVNTIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIHZhciBiYWNrZHJvcCA9ICcuZHJvcGRvd24tYmFja2Ryb3AnXG4gIHZhciB0b2dnbGUgICA9ICdbZGF0YS10b2dnbGU9XCJkcm9wZG93blwiXSdcbiAgdmFyIERyb3Bkb3duID0gZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAkKGVsZW1lbnQpLm9uKCdjbGljay5icy5kcm9wZG93bicsIHRoaXMudG9nZ2xlKVxuICB9XG5cbiAgRHJvcGRvd24uVkVSU0lPTiA9ICczLjMuNydcblxuICBmdW5jdGlvbiBnZXRQYXJlbnQoJHRoaXMpIHtcbiAgICB2YXIgc2VsZWN0b3IgPSAkdGhpcy5hdHRyKCdkYXRhLXRhcmdldCcpXG5cbiAgICBpZiAoIXNlbGVjdG9yKSB7XG4gICAgICBzZWxlY3RvciA9ICR0aGlzLmF0dHIoJ2hyZWYnKVxuICAgICAgc2VsZWN0b3IgPSBzZWxlY3RvciAmJiAvI1tBLVphLXpdLy50ZXN0KHNlbGVjdG9yKSAmJiBzZWxlY3Rvci5yZXBsYWNlKC8uKig/PSNbXlxcc10qJCkvLCAnJykgLy8gc3RyaXAgZm9yIGllN1xuICAgIH1cblxuICAgIHZhciAkcGFyZW50ID0gc2VsZWN0b3IgJiYgJChzZWxlY3RvcilcblxuICAgIHJldHVybiAkcGFyZW50ICYmICRwYXJlbnQubGVuZ3RoID8gJHBhcmVudCA6ICR0aGlzLnBhcmVudCgpXG4gIH1cblxuICBmdW5jdGlvbiBjbGVhck1lbnVzKGUpIHtcbiAgICBpZiAoZSAmJiBlLndoaWNoID09PSAzKSByZXR1cm5cbiAgICAkKGJhY2tkcm9wKS5yZW1vdmUoKVxuICAgICQodG9nZ2xlKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGhpcyAgICAgICAgID0gJCh0aGlzKVxuICAgICAgdmFyICRwYXJlbnQgICAgICAgPSBnZXRQYXJlbnQoJHRoaXMpXG4gICAgICB2YXIgcmVsYXRlZFRhcmdldCA9IHsgcmVsYXRlZFRhcmdldDogdGhpcyB9XG5cbiAgICAgIGlmICghJHBhcmVudC5oYXNDbGFzcygnb3BlbicpKSByZXR1cm5cblxuICAgICAgaWYgKGUgJiYgZS50eXBlID09ICdjbGljaycgJiYgL2lucHV0fHRleHRhcmVhL2kudGVzdChlLnRhcmdldC50YWdOYW1lKSAmJiAkLmNvbnRhaW5zKCRwYXJlbnRbMF0sIGUudGFyZ2V0KSkgcmV0dXJuXG5cbiAgICAgICRwYXJlbnQudHJpZ2dlcihlID0gJC5FdmVudCgnaGlkZS5icy5kcm9wZG93bicsIHJlbGF0ZWRUYXJnZXQpKVxuXG4gICAgICBpZiAoZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgcmV0dXJuXG5cbiAgICAgICR0aGlzLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCAnZmFsc2UnKVxuICAgICAgJHBhcmVudC5yZW1vdmVDbGFzcygnb3BlbicpLnRyaWdnZXIoJC5FdmVudCgnaGlkZGVuLmJzLmRyb3Bkb3duJywgcmVsYXRlZFRhcmdldCkpXG4gICAgfSlcbiAgfVxuXG4gIERyb3Bkb3duLnByb3RvdHlwZS50b2dnbGUgPSBmdW5jdGlvbiAoZSkge1xuICAgIHZhciAkdGhpcyA9ICQodGhpcylcblxuICAgIGlmICgkdGhpcy5pcygnLmRpc2FibGVkLCA6ZGlzYWJsZWQnKSkgcmV0dXJuXG5cbiAgICB2YXIgJHBhcmVudCAgPSBnZXRQYXJlbnQoJHRoaXMpXG4gICAgdmFyIGlzQWN0aXZlID0gJHBhcmVudC5oYXNDbGFzcygnb3BlbicpXG5cbiAgICBjbGVhck1lbnVzKClcblxuICAgIGlmICghaXNBY3RpdmUpIHtcbiAgICAgIGlmICgnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgJiYgISRwYXJlbnQuY2xvc2VzdCgnLm5hdmJhci1uYXYnKS5sZW5ndGgpIHtcbiAgICAgICAgLy8gaWYgbW9iaWxlIHdlIHVzZSBhIGJhY2tkcm9wIGJlY2F1c2UgY2xpY2sgZXZlbnRzIGRvbid0IGRlbGVnYXRlXG4gICAgICAgICQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykpXG4gICAgICAgICAgLmFkZENsYXNzKCdkcm9wZG93bi1iYWNrZHJvcCcpXG4gICAgICAgICAgLmluc2VydEFmdGVyKCQodGhpcykpXG4gICAgICAgICAgLm9uKCdjbGljaycsIGNsZWFyTWVudXMpXG4gICAgICB9XG5cbiAgICAgIHZhciByZWxhdGVkVGFyZ2V0ID0geyByZWxhdGVkVGFyZ2V0OiB0aGlzIH1cbiAgICAgICRwYXJlbnQudHJpZ2dlcihlID0gJC5FdmVudCgnc2hvdy5icy5kcm9wZG93bicsIHJlbGF0ZWRUYXJnZXQpKVxuXG4gICAgICBpZiAoZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgcmV0dXJuXG5cbiAgICAgICR0aGlzXG4gICAgICAgIC50cmlnZ2VyKCdmb2N1cycpXG4gICAgICAgIC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgJ3RydWUnKVxuXG4gICAgICAkcGFyZW50XG4gICAgICAgIC50b2dnbGVDbGFzcygnb3BlbicpXG4gICAgICAgIC50cmlnZ2VyKCQuRXZlbnQoJ3Nob3duLmJzLmRyb3Bkb3duJywgcmVsYXRlZFRhcmdldCkpXG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICBEcm9wZG93bi5wcm90b3R5cGUua2V5ZG93biA9IGZ1bmN0aW9uIChlKSB7XG4gICAgaWYgKCEvKDM4fDQwfDI3fDMyKS8udGVzdChlLndoaWNoKSB8fCAvaW5wdXR8dGV4dGFyZWEvaS50ZXN0KGUudGFyZ2V0LnRhZ05hbWUpKSByZXR1cm5cblxuICAgIHZhciAkdGhpcyA9ICQodGhpcylcblxuICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgIGUuc3RvcFByb3BhZ2F0aW9uKClcblxuICAgIGlmICgkdGhpcy5pcygnLmRpc2FibGVkLCA6ZGlzYWJsZWQnKSkgcmV0dXJuXG5cbiAgICB2YXIgJHBhcmVudCAgPSBnZXRQYXJlbnQoJHRoaXMpXG4gICAgdmFyIGlzQWN0aXZlID0gJHBhcmVudC5oYXNDbGFzcygnb3BlbicpXG5cbiAgICBpZiAoIWlzQWN0aXZlICYmIGUud2hpY2ggIT0gMjcgfHwgaXNBY3RpdmUgJiYgZS53aGljaCA9PSAyNykge1xuICAgICAgaWYgKGUud2hpY2ggPT0gMjcpICRwYXJlbnQuZmluZCh0b2dnbGUpLnRyaWdnZXIoJ2ZvY3VzJylcbiAgICAgIHJldHVybiAkdGhpcy50cmlnZ2VyKCdjbGljaycpXG4gICAgfVxuXG4gICAgdmFyIGRlc2MgPSAnIGxpOm5vdCguZGlzYWJsZWQpOnZpc2libGUgYSdcbiAgICB2YXIgJGl0ZW1zID0gJHBhcmVudC5maW5kKCcuZHJvcGRvd24tbWVudScgKyBkZXNjKVxuXG4gICAgaWYgKCEkaXRlbXMubGVuZ3RoKSByZXR1cm5cblxuICAgIHZhciBpbmRleCA9ICRpdGVtcy5pbmRleChlLnRhcmdldClcblxuICAgIGlmIChlLndoaWNoID09IDM4ICYmIGluZGV4ID4gMCkgICAgICAgICAgICAgICAgIGluZGV4LS0gICAgICAgICAvLyB1cFxuICAgIGlmIChlLndoaWNoID09IDQwICYmIGluZGV4IDwgJGl0ZW1zLmxlbmd0aCAtIDEpIGluZGV4KysgICAgICAgICAvLyBkb3duXG4gICAgaWYgKCF+aW5kZXgpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXggPSAwXG5cbiAgICAkaXRlbXMuZXEoaW5kZXgpLnRyaWdnZXIoJ2ZvY3VzJylcbiAgfVxuXG5cbiAgLy8gRFJPUERPV04gUExVR0lOIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICBmdW5jdGlvbiBQbHVnaW4ob3B0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpXG4gICAgICB2YXIgZGF0YSAgPSAkdGhpcy5kYXRhKCdicy5kcm9wZG93bicpXG5cbiAgICAgIGlmICghZGF0YSkgJHRoaXMuZGF0YSgnYnMuZHJvcGRvd24nLCAoZGF0YSA9IG5ldyBEcm9wZG93bih0aGlzKSkpXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJykgZGF0YVtvcHRpb25dLmNhbGwoJHRoaXMpXG4gICAgfSlcbiAgfVxuXG4gIHZhciBvbGQgPSAkLmZuLmRyb3Bkb3duXG5cbiAgJC5mbi5kcm9wZG93biAgICAgICAgICAgICA9IFBsdWdpblxuICAkLmZuLmRyb3Bkb3duLkNvbnN0cnVjdG9yID0gRHJvcGRvd25cblxuXG4gIC8vIERST1BET1dOIE5PIENPTkZMSUNUXG4gIC8vID09PT09PT09PT09PT09PT09PT09XG5cbiAgJC5mbi5kcm9wZG93bi5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm4uZHJvcGRvd24gPSBvbGRcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cblxuICAvLyBBUFBMWSBUTyBTVEFOREFSRCBEUk9QRE9XTiBFTEVNRU5UU1xuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gICQoZG9jdW1lbnQpXG4gICAgLm9uKCdjbGljay5icy5kcm9wZG93bi5kYXRhLWFwaScsIGNsZWFyTWVudXMpXG4gICAgLm9uKCdjbGljay5icy5kcm9wZG93bi5kYXRhLWFwaScsICcuZHJvcGRvd24gZm9ybScsIGZ1bmN0aW9uIChlKSB7IGUuc3RvcFByb3BhZ2F0aW9uKCkgfSlcbiAgICAub24oJ2NsaWNrLmJzLmRyb3Bkb3duLmRhdGEtYXBpJywgdG9nZ2xlLCBEcm9wZG93bi5wcm90b3R5cGUudG9nZ2xlKVxuICAgIC5vbigna2V5ZG93bi5icy5kcm9wZG93bi5kYXRhLWFwaScsIHRvZ2dsZSwgRHJvcGRvd24ucHJvdG90eXBlLmtleWRvd24pXG4gICAgLm9uKCdrZXlkb3duLmJzLmRyb3Bkb3duLmRhdGEtYXBpJywgJy5kcm9wZG93bi1tZW51JywgRHJvcGRvd24ucHJvdG90eXBlLmtleWRvd24pXG5cbn0oalF1ZXJ5KTtcblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBCb290c3RyYXA6IG1vZGFsLmpzIHYzLjMuN1xuICogaHR0cDovL2dldGJvb3RzdHJhcC5jb20vamF2YXNjcmlwdC8jbW9kYWxzXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvcHlyaWdodCAyMDExLTIwMTYgVHdpdHRlciwgSW5jLlxuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG5cbitmdW5jdGlvbiAoJCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gTU9EQUwgQ0xBU1MgREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09XG5cbiAgdmFyIE1vZGFsID0gZnVuY3Rpb24gKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLm9wdGlvbnMgICAgICAgICAgICAgPSBvcHRpb25zXG4gICAgdGhpcy4kYm9keSAgICAgICAgICAgICAgID0gJChkb2N1bWVudC5ib2R5KVxuICAgIHRoaXMuJGVsZW1lbnQgICAgICAgICAgICA9ICQoZWxlbWVudClcbiAgICB0aGlzLiRkaWFsb2cgICAgICAgICAgICAgPSB0aGlzLiRlbGVtZW50LmZpbmQoJy5tb2RhbC1kaWFsb2cnKVxuICAgIHRoaXMuJGJhY2tkcm9wICAgICAgICAgICA9IG51bGxcbiAgICB0aGlzLmlzU2hvd24gICAgICAgICAgICAgPSBudWxsXG4gICAgdGhpcy5vcmlnaW5hbEJvZHlQYWQgICAgID0gbnVsbFxuICAgIHRoaXMuc2Nyb2xsYmFyV2lkdGggICAgICA9IDBcbiAgICB0aGlzLmlnbm9yZUJhY2tkcm9wQ2xpY2sgPSBmYWxzZVxuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5yZW1vdGUpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnRcbiAgICAgICAgLmZpbmQoJy5tb2RhbC1jb250ZW50JylcbiAgICAgICAgLmxvYWQodGhpcy5vcHRpb25zLnJlbW90ZSwgJC5wcm94eShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdsb2FkZWQuYnMubW9kYWwnKVxuICAgICAgICB9LCB0aGlzKSlcbiAgICB9XG4gIH1cblxuICBNb2RhbC5WRVJTSU9OICA9ICczLjMuNydcblxuICBNb2RhbC5UUkFOU0lUSU9OX0RVUkFUSU9OID0gMzAwXG4gIE1vZGFsLkJBQ0tEUk9QX1RSQU5TSVRJT05fRFVSQVRJT04gPSAxNTBcblxuICBNb2RhbC5ERUZBVUxUUyA9IHtcbiAgICBiYWNrZHJvcDogdHJ1ZSxcbiAgICBrZXlib2FyZDogdHJ1ZSxcbiAgICBzaG93OiB0cnVlXG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUudG9nZ2xlID0gZnVuY3Rpb24gKF9yZWxhdGVkVGFyZ2V0KSB7XG4gICAgcmV0dXJuIHRoaXMuaXNTaG93biA/IHRoaXMuaGlkZSgpIDogdGhpcy5zaG93KF9yZWxhdGVkVGFyZ2V0KVxuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLnNob3cgPSBmdW5jdGlvbiAoX3JlbGF0ZWRUYXJnZXQpIHtcbiAgICB2YXIgdGhhdCA9IHRoaXNcbiAgICB2YXIgZSAgICA9ICQuRXZlbnQoJ3Nob3cuYnMubW9kYWwnLCB7IHJlbGF0ZWRUYXJnZXQ6IF9yZWxhdGVkVGFyZ2V0IH0pXG5cbiAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoZSlcblxuICAgIGlmICh0aGlzLmlzU2hvd24gfHwgZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgcmV0dXJuXG5cbiAgICB0aGlzLmlzU2hvd24gPSB0cnVlXG5cbiAgICB0aGlzLmNoZWNrU2Nyb2xsYmFyKClcbiAgICB0aGlzLnNldFNjcm9sbGJhcigpXG4gICAgdGhpcy4kYm9keS5hZGRDbGFzcygnbW9kYWwtb3BlbicpXG5cbiAgICB0aGlzLmVzY2FwZSgpXG4gICAgdGhpcy5yZXNpemUoKVxuXG4gICAgdGhpcy4kZWxlbWVudC5vbignY2xpY2suZGlzbWlzcy5icy5tb2RhbCcsICdbZGF0YS1kaXNtaXNzPVwibW9kYWxcIl0nLCAkLnByb3h5KHRoaXMuaGlkZSwgdGhpcykpXG5cbiAgICB0aGlzLiRkaWFsb2cub24oJ21vdXNlZG93bi5kaXNtaXNzLmJzLm1vZGFsJywgZnVuY3Rpb24gKCkge1xuICAgICAgdGhhdC4kZWxlbWVudC5vbmUoJ21vdXNldXAuZGlzbWlzcy5icy5tb2RhbCcsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGlmICgkKGUudGFyZ2V0KS5pcyh0aGF0LiRlbGVtZW50KSkgdGhhdC5pZ25vcmVCYWNrZHJvcENsaWNrID0gdHJ1ZVxuICAgICAgfSlcbiAgICB9KVxuXG4gICAgdGhpcy5iYWNrZHJvcChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdHJhbnNpdGlvbiA9ICQuc3VwcG9ydC50cmFuc2l0aW9uICYmIHRoYXQuJGVsZW1lbnQuaGFzQ2xhc3MoJ2ZhZGUnKVxuXG4gICAgICBpZiAoIXRoYXQuJGVsZW1lbnQucGFyZW50KCkubGVuZ3RoKSB7XG4gICAgICAgIHRoYXQuJGVsZW1lbnQuYXBwZW5kVG8odGhhdC4kYm9keSkgLy8gZG9uJ3QgbW92ZSBtb2RhbHMgZG9tIHBvc2l0aW9uXG4gICAgICB9XG5cbiAgICAgIHRoYXQuJGVsZW1lbnRcbiAgICAgICAgLnNob3coKVxuICAgICAgICAuc2Nyb2xsVG9wKDApXG5cbiAgICAgIHRoYXQuYWRqdXN0RGlhbG9nKClcblxuICAgICAgaWYgKHRyYW5zaXRpb24pIHtcbiAgICAgICAgdGhhdC4kZWxlbWVudFswXS5vZmZzZXRXaWR0aCAvLyBmb3JjZSByZWZsb3dcbiAgICAgIH1cblxuICAgICAgdGhhdC4kZWxlbWVudC5hZGRDbGFzcygnaW4nKVxuXG4gICAgICB0aGF0LmVuZm9yY2VGb2N1cygpXG5cbiAgICAgIHZhciBlID0gJC5FdmVudCgnc2hvd24uYnMubW9kYWwnLCB7IHJlbGF0ZWRUYXJnZXQ6IF9yZWxhdGVkVGFyZ2V0IH0pXG5cbiAgICAgIHRyYW5zaXRpb24gP1xuICAgICAgICB0aGF0LiRkaWFsb2cgLy8gd2FpdCBmb3IgbW9kYWwgdG8gc2xpZGUgaW5cbiAgICAgICAgICAub25lKCdic1RyYW5zaXRpb25FbmQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGF0LiRlbGVtZW50LnRyaWdnZXIoJ2ZvY3VzJykudHJpZ2dlcihlKVxuICAgICAgICAgIH0pXG4gICAgICAgICAgLmVtdWxhdGVUcmFuc2l0aW9uRW5kKE1vZGFsLlRSQU5TSVRJT05fRFVSQVRJT04pIDpcbiAgICAgICAgdGhhdC4kZWxlbWVudC50cmlnZ2VyKCdmb2N1cycpLnRyaWdnZXIoZSlcbiAgICB9KVxuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLmhpZGUgPSBmdW5jdGlvbiAoZSkge1xuICAgIGlmIChlKSBlLnByZXZlbnREZWZhdWx0KClcblxuICAgIGUgPSAkLkV2ZW50KCdoaWRlLmJzLm1vZGFsJylcblxuICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcihlKVxuXG4gICAgaWYgKCF0aGlzLmlzU2hvd24gfHwgZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgcmV0dXJuXG5cbiAgICB0aGlzLmlzU2hvd24gPSBmYWxzZVxuXG4gICAgdGhpcy5lc2NhcGUoKVxuICAgIHRoaXMucmVzaXplKClcblxuICAgICQoZG9jdW1lbnQpLm9mZignZm9jdXNpbi5icy5tb2RhbCcpXG5cbiAgICB0aGlzLiRlbGVtZW50XG4gICAgICAucmVtb3ZlQ2xhc3MoJ2luJylcbiAgICAgIC5vZmYoJ2NsaWNrLmRpc21pc3MuYnMubW9kYWwnKVxuICAgICAgLm9mZignbW91c2V1cC5kaXNtaXNzLmJzLm1vZGFsJylcblxuICAgIHRoaXMuJGRpYWxvZy5vZmYoJ21vdXNlZG93bi5kaXNtaXNzLmJzLm1vZGFsJylcblxuICAgICQuc3VwcG9ydC50cmFuc2l0aW9uICYmIHRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2ZhZGUnKSA/XG4gICAgICB0aGlzLiRlbGVtZW50XG4gICAgICAgIC5vbmUoJ2JzVHJhbnNpdGlvbkVuZCcsICQucHJveHkodGhpcy5oaWRlTW9kYWwsIHRoaXMpKVxuICAgICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQoTW9kYWwuVFJBTlNJVElPTl9EVVJBVElPTikgOlxuICAgICAgdGhpcy5oaWRlTW9kYWwoKVxuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLmVuZm9yY2VGb2N1cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAkKGRvY3VtZW50KVxuICAgICAgLm9mZignZm9jdXNpbi5icy5tb2RhbCcpIC8vIGd1YXJkIGFnYWluc3QgaW5maW5pdGUgZm9jdXMgbG9vcFxuICAgICAgLm9uKCdmb2N1c2luLmJzLm1vZGFsJywgJC5wcm94eShmdW5jdGlvbiAoZSkge1xuICAgICAgICBpZiAoZG9jdW1lbnQgIT09IGUudGFyZ2V0ICYmXG4gICAgICAgICAgICB0aGlzLiRlbGVtZW50WzBdICE9PSBlLnRhcmdldCAmJlxuICAgICAgICAgICAgIXRoaXMuJGVsZW1lbnQuaGFzKGUudGFyZ2V0KS5sZW5ndGgpIHtcbiAgICAgICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2ZvY3VzJylcbiAgICAgICAgfVxuICAgICAgfSwgdGhpcykpXG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUuZXNjYXBlID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLmlzU2hvd24gJiYgdGhpcy5vcHRpb25zLmtleWJvYXJkKSB7XG4gICAgICB0aGlzLiRlbGVtZW50Lm9uKCdrZXlkb3duLmRpc21pc3MuYnMubW9kYWwnLCAkLnByb3h5KGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGUud2hpY2ggPT0gMjcgJiYgdGhpcy5oaWRlKClcbiAgICAgIH0sIHRoaXMpKVxuICAgIH0gZWxzZSBpZiAoIXRoaXMuaXNTaG93bikge1xuICAgICAgdGhpcy4kZWxlbWVudC5vZmYoJ2tleWRvd24uZGlzbWlzcy5icy5tb2RhbCcpXG4gICAgfVxuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLnJlc2l6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5pc1Nob3duKSB7XG4gICAgICAkKHdpbmRvdykub24oJ3Jlc2l6ZS5icy5tb2RhbCcsICQucHJveHkodGhpcy5oYW5kbGVVcGRhdGUsIHRoaXMpKVxuICAgIH0gZWxzZSB7XG4gICAgICAkKHdpbmRvdykub2ZmKCdyZXNpemUuYnMubW9kYWwnKVxuICAgIH1cbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS5oaWRlTW9kYWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRoYXQgPSB0aGlzXG4gICAgdGhpcy4kZWxlbWVudC5oaWRlKClcbiAgICB0aGlzLmJhY2tkcm9wKGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoYXQuJGJvZHkucmVtb3ZlQ2xhc3MoJ21vZGFsLW9wZW4nKVxuICAgICAgdGhhdC5yZXNldEFkanVzdG1lbnRzKClcbiAgICAgIHRoYXQucmVzZXRTY3JvbGxiYXIoKVxuICAgICAgdGhhdC4kZWxlbWVudC50cmlnZ2VyKCdoaWRkZW4uYnMubW9kYWwnKVxuICAgIH0pXG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUucmVtb3ZlQmFja2Ryb3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy4kYmFja2Ryb3AgJiYgdGhpcy4kYmFja2Ryb3AucmVtb3ZlKClcbiAgICB0aGlzLiRiYWNrZHJvcCA9IG51bGxcbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS5iYWNrZHJvcCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgIHZhciB0aGF0ID0gdGhpc1xuICAgIHZhciBhbmltYXRlID0gdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnZmFkZScpID8gJ2ZhZGUnIDogJydcblxuICAgIGlmICh0aGlzLmlzU2hvd24gJiYgdGhpcy5vcHRpb25zLmJhY2tkcm9wKSB7XG4gICAgICB2YXIgZG9BbmltYXRlID0gJC5zdXBwb3J0LnRyYW5zaXRpb24gJiYgYW5pbWF0ZVxuXG4gICAgICB0aGlzLiRiYWNrZHJvcCA9ICQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykpXG4gICAgICAgIC5hZGRDbGFzcygnbW9kYWwtYmFja2Ryb3AgJyArIGFuaW1hdGUpXG4gICAgICAgIC5hcHBlbmRUbyh0aGlzLiRib2R5KVxuXG4gICAgICB0aGlzLiRlbGVtZW50Lm9uKCdjbGljay5kaXNtaXNzLmJzLm1vZGFsJywgJC5wcm94eShmdW5jdGlvbiAoZSkge1xuICAgICAgICBpZiAodGhpcy5pZ25vcmVCYWNrZHJvcENsaWNrKSB7XG4gICAgICAgICAgdGhpcy5pZ25vcmVCYWNrZHJvcENsaWNrID0gZmFsc2VcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBpZiAoZS50YXJnZXQgIT09IGUuY3VycmVudFRhcmdldCkgcmV0dXJuXG4gICAgICAgIHRoaXMub3B0aW9ucy5iYWNrZHJvcCA9PSAnc3RhdGljJ1xuICAgICAgICAgID8gdGhpcy4kZWxlbWVudFswXS5mb2N1cygpXG4gICAgICAgICAgOiB0aGlzLmhpZGUoKVxuICAgICAgfSwgdGhpcykpXG5cbiAgICAgIGlmIChkb0FuaW1hdGUpIHRoaXMuJGJhY2tkcm9wWzBdLm9mZnNldFdpZHRoIC8vIGZvcmNlIHJlZmxvd1xuXG4gICAgICB0aGlzLiRiYWNrZHJvcC5hZGRDbGFzcygnaW4nKVxuXG4gICAgICBpZiAoIWNhbGxiYWNrKSByZXR1cm5cblxuICAgICAgZG9BbmltYXRlID9cbiAgICAgICAgdGhpcy4kYmFja2Ryb3BcbiAgICAgICAgICAub25lKCdic1RyYW5zaXRpb25FbmQnLCBjYWxsYmFjaylcbiAgICAgICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQoTW9kYWwuQkFDS0RST1BfVFJBTlNJVElPTl9EVVJBVElPTikgOlxuICAgICAgICBjYWxsYmFjaygpXG5cbiAgICB9IGVsc2UgaWYgKCF0aGlzLmlzU2hvd24gJiYgdGhpcy4kYmFja2Ryb3ApIHtcbiAgICAgIHRoaXMuJGJhY2tkcm9wLnJlbW92ZUNsYXNzKCdpbicpXG5cbiAgICAgIHZhciBjYWxsYmFja1JlbW92ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhhdC5yZW1vdmVCYWNrZHJvcCgpXG4gICAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKClcbiAgICAgIH1cbiAgICAgICQuc3VwcG9ydC50cmFuc2l0aW9uICYmIHRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2ZhZGUnKSA/XG4gICAgICAgIHRoaXMuJGJhY2tkcm9wXG4gICAgICAgICAgLm9uZSgnYnNUcmFuc2l0aW9uRW5kJywgY2FsbGJhY2tSZW1vdmUpXG4gICAgICAgICAgLmVtdWxhdGVUcmFuc2l0aW9uRW5kKE1vZGFsLkJBQ0tEUk9QX1RSQU5TSVRJT05fRFVSQVRJT04pIDpcbiAgICAgICAgY2FsbGJhY2tSZW1vdmUoKVxuXG4gICAgfSBlbHNlIGlmIChjYWxsYmFjaykge1xuICAgICAgY2FsbGJhY2soKVxuICAgIH1cbiAgfVxuXG4gIC8vIHRoZXNlIGZvbGxvd2luZyBtZXRob2RzIGFyZSB1c2VkIHRvIGhhbmRsZSBvdmVyZmxvd2luZyBtb2RhbHNcblxuICBNb2RhbC5wcm90b3R5cGUuaGFuZGxlVXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuYWRqdXN0RGlhbG9nKClcbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS5hZGp1c3REaWFsb2cgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG1vZGFsSXNPdmVyZmxvd2luZyA9IHRoaXMuJGVsZW1lbnRbMF0uc2Nyb2xsSGVpZ2h0ID4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodFxuXG4gICAgdGhpcy4kZWxlbWVudC5jc3Moe1xuICAgICAgcGFkZGluZ0xlZnQ6ICAhdGhpcy5ib2R5SXNPdmVyZmxvd2luZyAmJiBtb2RhbElzT3ZlcmZsb3dpbmcgPyB0aGlzLnNjcm9sbGJhcldpZHRoIDogJycsXG4gICAgICBwYWRkaW5nUmlnaHQ6IHRoaXMuYm9keUlzT3ZlcmZsb3dpbmcgJiYgIW1vZGFsSXNPdmVyZmxvd2luZyA/IHRoaXMuc2Nyb2xsYmFyV2lkdGggOiAnJ1xuICAgIH0pXG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUucmVzZXRBZGp1c3RtZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLiRlbGVtZW50LmNzcyh7XG4gICAgICBwYWRkaW5nTGVmdDogJycsXG4gICAgICBwYWRkaW5nUmlnaHQ6ICcnXG4gICAgfSlcbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS5jaGVja1Njcm9sbGJhciA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZnVsbFdpbmRvd1dpZHRoID0gd2luZG93LmlubmVyV2lkdGhcbiAgICBpZiAoIWZ1bGxXaW5kb3dXaWR0aCkgeyAvLyB3b3JrYXJvdW5kIGZvciBtaXNzaW5nIHdpbmRvdy5pbm5lcldpZHRoIGluIElFOFxuICAgICAgdmFyIGRvY3VtZW50RWxlbWVudFJlY3QgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgICAgIGZ1bGxXaW5kb3dXaWR0aCA9IGRvY3VtZW50RWxlbWVudFJlY3QucmlnaHQgLSBNYXRoLmFicyhkb2N1bWVudEVsZW1lbnRSZWN0LmxlZnQpXG4gICAgfVxuICAgIHRoaXMuYm9keUlzT3ZlcmZsb3dpbmcgPSBkb2N1bWVudC5ib2R5LmNsaWVudFdpZHRoIDwgZnVsbFdpbmRvd1dpZHRoXG4gICAgdGhpcy5zY3JvbGxiYXJXaWR0aCA9IHRoaXMubWVhc3VyZVNjcm9sbGJhcigpXG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUuc2V0U2Nyb2xsYmFyID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBib2R5UGFkID0gcGFyc2VJbnQoKHRoaXMuJGJvZHkuY3NzKCdwYWRkaW5nLXJpZ2h0JykgfHwgMCksIDEwKVxuICAgIHRoaXMub3JpZ2luYWxCb2R5UGFkID0gZG9jdW1lbnQuYm9keS5zdHlsZS5wYWRkaW5nUmlnaHQgfHwgJydcbiAgICBpZiAodGhpcy5ib2R5SXNPdmVyZmxvd2luZykgdGhpcy4kYm9keS5jc3MoJ3BhZGRpbmctcmlnaHQnLCBib2R5UGFkICsgdGhpcy5zY3JvbGxiYXJXaWR0aClcbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS5yZXNldFNjcm9sbGJhciA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLiRib2R5LmNzcygncGFkZGluZy1yaWdodCcsIHRoaXMub3JpZ2luYWxCb2R5UGFkKVxuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLm1lYXN1cmVTY3JvbGxiYXIgPSBmdW5jdGlvbiAoKSB7IC8vIHRoeCB3YWxzaFxuICAgIHZhciBzY3JvbGxEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgIHNjcm9sbERpdi5jbGFzc05hbWUgPSAnbW9kYWwtc2Nyb2xsYmFyLW1lYXN1cmUnXG4gICAgdGhpcy4kYm9keS5hcHBlbmQoc2Nyb2xsRGl2KVxuICAgIHZhciBzY3JvbGxiYXJXaWR0aCA9IHNjcm9sbERpdi5vZmZzZXRXaWR0aCAtIHNjcm9sbERpdi5jbGllbnRXaWR0aFxuICAgIHRoaXMuJGJvZHlbMF0ucmVtb3ZlQ2hpbGQoc2Nyb2xsRGl2KVxuICAgIHJldHVybiBzY3JvbGxiYXJXaWR0aFxuICB9XG5cblxuICAvLyBNT0RBTCBQTFVHSU4gREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIGZ1bmN0aW9uIFBsdWdpbihvcHRpb24sIF9yZWxhdGVkVGFyZ2V0KSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHRoaXMgICA9ICQodGhpcylcbiAgICAgIHZhciBkYXRhICAgID0gJHRoaXMuZGF0YSgnYnMubW9kYWwnKVxuICAgICAgdmFyIG9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgTW9kYWwuREVGQVVMVFMsICR0aGlzLmRhdGEoKSwgdHlwZW9mIG9wdGlvbiA9PSAnb2JqZWN0JyAmJiBvcHRpb24pXG5cbiAgICAgIGlmICghZGF0YSkgJHRoaXMuZGF0YSgnYnMubW9kYWwnLCAoZGF0YSA9IG5ldyBNb2RhbCh0aGlzLCBvcHRpb25zKSkpXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJykgZGF0YVtvcHRpb25dKF9yZWxhdGVkVGFyZ2V0KVxuICAgICAgZWxzZSBpZiAob3B0aW9ucy5zaG93KSBkYXRhLnNob3coX3JlbGF0ZWRUYXJnZXQpXG4gICAgfSlcbiAgfVxuXG4gIHZhciBvbGQgPSAkLmZuLm1vZGFsXG5cbiAgJC5mbi5tb2RhbCAgICAgICAgICAgICA9IFBsdWdpblxuICAkLmZuLm1vZGFsLkNvbnN0cnVjdG9yID0gTW9kYWxcblxuXG4gIC8vIE1PREFMIE5PIENPTkZMSUNUXG4gIC8vID09PT09PT09PT09PT09PT09XG5cbiAgJC5mbi5tb2RhbC5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm4ubW9kYWwgPSBvbGRcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cblxuICAvLyBNT0RBTCBEQVRBLUFQSVxuICAvLyA9PT09PT09PT09PT09PVxuXG4gICQoZG9jdW1lbnQpLm9uKCdjbGljay5icy5tb2RhbC5kYXRhLWFwaScsICdbZGF0YS10b2dnbGU9XCJtb2RhbFwiXScsIGZ1bmN0aW9uIChlKSB7XG4gICAgdmFyICR0aGlzICAgPSAkKHRoaXMpXG4gICAgdmFyIGhyZWYgICAgPSAkdGhpcy5hdHRyKCdocmVmJylcbiAgICB2YXIgJHRhcmdldCA9ICQoJHRoaXMuYXR0cignZGF0YS10YXJnZXQnKSB8fCAoaHJlZiAmJiBocmVmLnJlcGxhY2UoLy4qKD89I1teXFxzXSskKS8sICcnKSkpIC8vIHN0cmlwIGZvciBpZTdcbiAgICB2YXIgb3B0aW9uICA9ICR0YXJnZXQuZGF0YSgnYnMubW9kYWwnKSA/ICd0b2dnbGUnIDogJC5leHRlbmQoeyByZW1vdGU6ICEvIy8udGVzdChocmVmKSAmJiBocmVmIH0sICR0YXJnZXQuZGF0YSgpLCAkdGhpcy5kYXRhKCkpXG5cbiAgICBpZiAoJHRoaXMuaXMoJ2EnKSkgZS5wcmV2ZW50RGVmYXVsdCgpXG5cbiAgICAkdGFyZ2V0Lm9uZSgnc2hvdy5icy5tb2RhbCcsIGZ1bmN0aW9uIChzaG93RXZlbnQpIHtcbiAgICAgIGlmIChzaG93RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHJldHVybiAvLyBvbmx5IHJlZ2lzdGVyIGZvY3VzIHJlc3RvcmVyIGlmIG1vZGFsIHdpbGwgYWN0dWFsbHkgZ2V0IHNob3duXG4gICAgICAkdGFyZ2V0Lm9uZSgnaGlkZGVuLmJzLm1vZGFsJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAkdGhpcy5pcygnOnZpc2libGUnKSAmJiAkdGhpcy50cmlnZ2VyKCdmb2N1cycpXG4gICAgICB9KVxuICAgIH0pXG4gICAgUGx1Z2luLmNhbGwoJHRhcmdldCwgb3B0aW9uLCB0aGlzKVxuICB9KVxuXG59KGpRdWVyeSk7XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQm9vdHN0cmFwOiB0b29sdGlwLmpzIHYzLjMuN1xuICogaHR0cDovL2dldGJvb3RzdHJhcC5jb20vamF2YXNjcmlwdC8jdG9vbHRpcFxuICogSW5zcGlyZWQgYnkgdGhlIG9yaWdpbmFsIGpRdWVyeS50aXBzeSBieSBKYXNvbiBGcmFtZVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb3B5cmlnaHQgMjAxMS0yMDE2IFR3aXR0ZXIsIEluYy5cbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuXG4rZnVuY3Rpb24gKCQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIFRPT0xUSVAgUFVCTElDIENMQVNTIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIHZhciBUb29sdGlwID0gZnVuY3Rpb24gKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnR5cGUgICAgICAgPSBudWxsXG4gICAgdGhpcy5vcHRpb25zICAgID0gbnVsbFxuICAgIHRoaXMuZW5hYmxlZCAgICA9IG51bGxcbiAgICB0aGlzLnRpbWVvdXQgICAgPSBudWxsXG4gICAgdGhpcy5ob3ZlclN0YXRlID0gbnVsbFxuICAgIHRoaXMuJGVsZW1lbnQgICA9IG51bGxcbiAgICB0aGlzLmluU3RhdGUgICAgPSBudWxsXG5cbiAgICB0aGlzLmluaXQoJ3Rvb2x0aXAnLCBlbGVtZW50LCBvcHRpb25zKVxuICB9XG5cbiAgVG9vbHRpcC5WRVJTSU9OICA9ICczLjMuNydcblxuICBUb29sdGlwLlRSQU5TSVRJT05fRFVSQVRJT04gPSAxNTBcblxuICBUb29sdGlwLkRFRkFVTFRTID0ge1xuICAgIGFuaW1hdGlvbjogdHJ1ZSxcbiAgICBwbGFjZW1lbnQ6ICd0b3AnLFxuICAgIHNlbGVjdG9yOiBmYWxzZSxcbiAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJ0b29sdGlwXCIgcm9sZT1cInRvb2x0aXBcIj48ZGl2IGNsYXNzPVwidG9vbHRpcC1hcnJvd1wiPjwvZGl2PjxkaXYgY2xhc3M9XCJ0b29sdGlwLWlubmVyXCI+PC9kaXY+PC9kaXY+JyxcbiAgICB0cmlnZ2VyOiAnaG92ZXIgZm9jdXMnLFxuICAgIHRpdGxlOiAnJyxcbiAgICBkZWxheTogMCxcbiAgICBodG1sOiBmYWxzZSxcbiAgICBjb250YWluZXI6IGZhbHNlLFxuICAgIHZpZXdwb3J0OiB7XG4gICAgICBzZWxlY3RvcjogJ2JvZHknLFxuICAgICAgcGFkZGluZzogMFxuICAgIH1cbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAodHlwZSwgZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMuZW5hYmxlZCAgID0gdHJ1ZVxuICAgIHRoaXMudHlwZSAgICAgID0gdHlwZVxuICAgIHRoaXMuJGVsZW1lbnQgID0gJChlbGVtZW50KVxuICAgIHRoaXMub3B0aW9ucyAgID0gdGhpcy5nZXRPcHRpb25zKG9wdGlvbnMpXG4gICAgdGhpcy4kdmlld3BvcnQgPSB0aGlzLm9wdGlvbnMudmlld3BvcnQgJiYgJCgkLmlzRnVuY3Rpb24odGhpcy5vcHRpb25zLnZpZXdwb3J0KSA/IHRoaXMub3B0aW9ucy52aWV3cG9ydC5jYWxsKHRoaXMsIHRoaXMuJGVsZW1lbnQpIDogKHRoaXMub3B0aW9ucy52aWV3cG9ydC5zZWxlY3RvciB8fCB0aGlzLm9wdGlvbnMudmlld3BvcnQpKVxuICAgIHRoaXMuaW5TdGF0ZSAgID0geyBjbGljazogZmFsc2UsIGhvdmVyOiBmYWxzZSwgZm9jdXM6IGZhbHNlIH1cblxuICAgIGlmICh0aGlzLiRlbGVtZW50WzBdIGluc3RhbmNlb2YgZG9jdW1lbnQuY29uc3RydWN0b3IgJiYgIXRoaXMub3B0aW9ucy5zZWxlY3Rvcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdgc2VsZWN0b3JgIG9wdGlvbiBtdXN0IGJlIHNwZWNpZmllZCB3aGVuIGluaXRpYWxpemluZyAnICsgdGhpcy50eXBlICsgJyBvbiB0aGUgd2luZG93LmRvY3VtZW50IG9iamVjdCEnKVxuICAgIH1cblxuICAgIHZhciB0cmlnZ2VycyA9IHRoaXMub3B0aW9ucy50cmlnZ2VyLnNwbGl0KCcgJylcblxuICAgIGZvciAodmFyIGkgPSB0cmlnZ2Vycy5sZW5ndGg7IGktLTspIHtcbiAgICAgIHZhciB0cmlnZ2VyID0gdHJpZ2dlcnNbaV1cblxuICAgICAgaWYgKHRyaWdnZXIgPT0gJ2NsaWNrJykge1xuICAgICAgICB0aGlzLiRlbGVtZW50Lm9uKCdjbGljay4nICsgdGhpcy50eXBlLCB0aGlzLm9wdGlvbnMuc2VsZWN0b3IsICQucHJveHkodGhpcy50b2dnbGUsIHRoaXMpKVxuICAgICAgfSBlbHNlIGlmICh0cmlnZ2VyICE9ICdtYW51YWwnKSB7XG4gICAgICAgIHZhciBldmVudEluICA9IHRyaWdnZXIgPT0gJ2hvdmVyJyA/ICdtb3VzZWVudGVyJyA6ICdmb2N1c2luJ1xuICAgICAgICB2YXIgZXZlbnRPdXQgPSB0cmlnZ2VyID09ICdob3ZlcicgPyAnbW91c2VsZWF2ZScgOiAnZm9jdXNvdXQnXG5cbiAgICAgICAgdGhpcy4kZWxlbWVudC5vbihldmVudEluICArICcuJyArIHRoaXMudHlwZSwgdGhpcy5vcHRpb25zLnNlbGVjdG9yLCAkLnByb3h5KHRoaXMuZW50ZXIsIHRoaXMpKVxuICAgICAgICB0aGlzLiRlbGVtZW50Lm9uKGV2ZW50T3V0ICsgJy4nICsgdGhpcy50eXBlLCB0aGlzLm9wdGlvbnMuc2VsZWN0b3IsICQucHJveHkodGhpcy5sZWF2ZSwgdGhpcykpXG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5vcHRpb25zLnNlbGVjdG9yID9cbiAgICAgICh0aGlzLl9vcHRpb25zID0gJC5leHRlbmQoe30sIHRoaXMub3B0aW9ucywgeyB0cmlnZ2VyOiAnbWFudWFsJywgc2VsZWN0b3I6ICcnIH0pKSA6XG4gICAgICB0aGlzLmZpeFRpdGxlKClcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmdldERlZmF1bHRzID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBUb29sdGlwLkRFRkFVTFRTXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5nZXRPcHRpb25zID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gJC5leHRlbmQoe30sIHRoaXMuZ2V0RGVmYXVsdHMoKSwgdGhpcy4kZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpXG5cbiAgICBpZiAob3B0aW9ucy5kZWxheSAmJiB0eXBlb2Ygb3B0aW9ucy5kZWxheSA9PSAnbnVtYmVyJykge1xuICAgICAgb3B0aW9ucy5kZWxheSA9IHtcbiAgICAgICAgc2hvdzogb3B0aW9ucy5kZWxheSxcbiAgICAgICAgaGlkZTogb3B0aW9ucy5kZWxheVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBvcHRpb25zXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5nZXREZWxlZ2F0ZU9wdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG9wdGlvbnMgID0ge31cbiAgICB2YXIgZGVmYXVsdHMgPSB0aGlzLmdldERlZmF1bHRzKClcblxuICAgIHRoaXMuX29wdGlvbnMgJiYgJC5lYWNoKHRoaXMuX29wdGlvbnMsIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICBpZiAoZGVmYXVsdHNba2V5XSAhPSB2YWx1ZSkgb3B0aW9uc1trZXldID0gdmFsdWVcbiAgICB9KVxuXG4gICAgcmV0dXJuIG9wdGlvbnNcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmVudGVyID0gZnVuY3Rpb24gKG9iaikge1xuICAgIHZhciBzZWxmID0gb2JqIGluc3RhbmNlb2YgdGhpcy5jb25zdHJ1Y3RvciA/XG4gICAgICBvYmogOiAkKG9iai5jdXJyZW50VGFyZ2V0KS5kYXRhKCdicy4nICsgdGhpcy50eXBlKVxuXG4gICAgaWYgKCFzZWxmKSB7XG4gICAgICBzZWxmID0gbmV3IHRoaXMuY29uc3RydWN0b3Iob2JqLmN1cnJlbnRUYXJnZXQsIHRoaXMuZ2V0RGVsZWdhdGVPcHRpb25zKCkpXG4gICAgICAkKG9iai5jdXJyZW50VGFyZ2V0KS5kYXRhKCdicy4nICsgdGhpcy50eXBlLCBzZWxmKVxuICAgIH1cblxuICAgIGlmIChvYmogaW5zdGFuY2VvZiAkLkV2ZW50KSB7XG4gICAgICBzZWxmLmluU3RhdGVbb2JqLnR5cGUgPT0gJ2ZvY3VzaW4nID8gJ2ZvY3VzJyA6ICdob3ZlciddID0gdHJ1ZVxuICAgIH1cblxuICAgIGlmIChzZWxmLnRpcCgpLmhhc0NsYXNzKCdpbicpIHx8IHNlbGYuaG92ZXJTdGF0ZSA9PSAnaW4nKSB7XG4gICAgICBzZWxmLmhvdmVyU3RhdGUgPSAnaW4nXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjbGVhclRpbWVvdXQoc2VsZi50aW1lb3V0KVxuXG4gICAgc2VsZi5ob3ZlclN0YXRlID0gJ2luJ1xuXG4gICAgaWYgKCFzZWxmLm9wdGlvbnMuZGVsYXkgfHwgIXNlbGYub3B0aW9ucy5kZWxheS5zaG93KSByZXR1cm4gc2VsZi5zaG93KClcblxuICAgIHNlbGYudGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHNlbGYuaG92ZXJTdGF0ZSA9PSAnaW4nKSBzZWxmLnNob3coKVxuICAgIH0sIHNlbGYub3B0aW9ucy5kZWxheS5zaG93KVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuaXNJblN0YXRlVHJ1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5pblN0YXRlKSB7XG4gICAgICBpZiAodGhpcy5pblN0YXRlW2tleV0pIHJldHVybiB0cnVlXG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5sZWF2ZSA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICB2YXIgc2VsZiA9IG9iaiBpbnN0YW5jZW9mIHRoaXMuY29uc3RydWN0b3IgP1xuICAgICAgb2JqIDogJChvYmouY3VycmVudFRhcmdldCkuZGF0YSgnYnMuJyArIHRoaXMudHlwZSlcblxuICAgIGlmICghc2VsZikge1xuICAgICAgc2VsZiA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKG9iai5jdXJyZW50VGFyZ2V0LCB0aGlzLmdldERlbGVnYXRlT3B0aW9ucygpKVxuICAgICAgJChvYmouY3VycmVudFRhcmdldCkuZGF0YSgnYnMuJyArIHRoaXMudHlwZSwgc2VsZilcbiAgICB9XG5cbiAgICBpZiAob2JqIGluc3RhbmNlb2YgJC5FdmVudCkge1xuICAgICAgc2VsZi5pblN0YXRlW29iai50eXBlID09ICdmb2N1c291dCcgPyAnZm9jdXMnIDogJ2hvdmVyJ10gPSBmYWxzZVxuICAgIH1cblxuICAgIGlmIChzZWxmLmlzSW5TdGF0ZVRydWUoKSkgcmV0dXJuXG5cbiAgICBjbGVhclRpbWVvdXQoc2VsZi50aW1lb3V0KVxuXG4gICAgc2VsZi5ob3ZlclN0YXRlID0gJ291dCdcblxuICAgIGlmICghc2VsZi5vcHRpb25zLmRlbGF5IHx8ICFzZWxmLm9wdGlvbnMuZGVsYXkuaGlkZSkgcmV0dXJuIHNlbGYuaGlkZSgpXG5cbiAgICBzZWxmLnRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChzZWxmLmhvdmVyU3RhdGUgPT0gJ291dCcpIHNlbGYuaGlkZSgpXG4gICAgfSwgc2VsZi5vcHRpb25zLmRlbGF5LmhpZGUpXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5zaG93ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBlID0gJC5FdmVudCgnc2hvdy5icy4nICsgdGhpcy50eXBlKVxuXG4gICAgaWYgKHRoaXMuaGFzQ29udGVudCgpICYmIHRoaXMuZW5hYmxlZCkge1xuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKGUpXG5cbiAgICAgIHZhciBpbkRvbSA9ICQuY29udGFpbnModGhpcy4kZWxlbWVudFswXS5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgdGhpcy4kZWxlbWVudFswXSlcbiAgICAgIGlmIChlLmlzRGVmYXVsdFByZXZlbnRlZCgpIHx8ICFpbkRvbSkgcmV0dXJuXG4gICAgICB2YXIgdGhhdCA9IHRoaXNcblxuICAgICAgdmFyICR0aXAgPSB0aGlzLnRpcCgpXG5cbiAgICAgIHZhciB0aXBJZCA9IHRoaXMuZ2V0VUlEKHRoaXMudHlwZSlcblxuICAgICAgdGhpcy5zZXRDb250ZW50KClcbiAgICAgICR0aXAuYXR0cignaWQnLCB0aXBJZClcbiAgICAgIHRoaXMuJGVsZW1lbnQuYXR0cignYXJpYS1kZXNjcmliZWRieScsIHRpcElkKVxuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmFuaW1hdGlvbikgJHRpcC5hZGRDbGFzcygnZmFkZScpXG5cbiAgICAgIHZhciBwbGFjZW1lbnQgPSB0eXBlb2YgdGhpcy5vcHRpb25zLnBsYWNlbWVudCA9PSAnZnVuY3Rpb24nID9cbiAgICAgICAgdGhpcy5vcHRpb25zLnBsYWNlbWVudC5jYWxsKHRoaXMsICR0aXBbMF0sIHRoaXMuJGVsZW1lbnRbMF0pIDpcbiAgICAgICAgdGhpcy5vcHRpb25zLnBsYWNlbWVudFxuXG4gICAgICB2YXIgYXV0b1Rva2VuID0gL1xccz9hdXRvP1xccz8vaVxuICAgICAgdmFyIGF1dG9QbGFjZSA9IGF1dG9Ub2tlbi50ZXN0KHBsYWNlbWVudClcbiAgICAgIGlmIChhdXRvUGxhY2UpIHBsYWNlbWVudCA9IHBsYWNlbWVudC5yZXBsYWNlKGF1dG9Ub2tlbiwgJycpIHx8ICd0b3AnXG5cbiAgICAgICR0aXBcbiAgICAgICAgLmRldGFjaCgpXG4gICAgICAgIC5jc3MoeyB0b3A6IDAsIGxlZnQ6IDAsIGRpc3BsYXk6ICdibG9jaycgfSlcbiAgICAgICAgLmFkZENsYXNzKHBsYWNlbWVudClcbiAgICAgICAgLmRhdGEoJ2JzLicgKyB0aGlzLnR5cGUsIHRoaXMpXG5cbiAgICAgIHRoaXMub3B0aW9ucy5jb250YWluZXIgPyAkdGlwLmFwcGVuZFRvKHRoaXMub3B0aW9ucy5jb250YWluZXIpIDogJHRpcC5pbnNlcnRBZnRlcih0aGlzLiRlbGVtZW50KVxuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdpbnNlcnRlZC5icy4nICsgdGhpcy50eXBlKVxuXG4gICAgICB2YXIgcG9zICAgICAgICAgID0gdGhpcy5nZXRQb3NpdGlvbigpXG4gICAgICB2YXIgYWN0dWFsV2lkdGggID0gJHRpcFswXS5vZmZzZXRXaWR0aFxuICAgICAgdmFyIGFjdHVhbEhlaWdodCA9ICR0aXBbMF0ub2Zmc2V0SGVpZ2h0XG5cbiAgICAgIGlmIChhdXRvUGxhY2UpIHtcbiAgICAgICAgdmFyIG9yZ1BsYWNlbWVudCA9IHBsYWNlbWVudFxuICAgICAgICB2YXIgdmlld3BvcnREaW0gPSB0aGlzLmdldFBvc2l0aW9uKHRoaXMuJHZpZXdwb3J0KVxuXG4gICAgICAgIHBsYWNlbWVudCA9IHBsYWNlbWVudCA9PSAnYm90dG9tJyAmJiBwb3MuYm90dG9tICsgYWN0dWFsSGVpZ2h0ID4gdmlld3BvcnREaW0uYm90dG9tID8gJ3RvcCcgICAgOlxuICAgICAgICAgICAgICAgICAgICBwbGFjZW1lbnQgPT0gJ3RvcCcgICAgJiYgcG9zLnRvcCAgICAtIGFjdHVhbEhlaWdodCA8IHZpZXdwb3J0RGltLnRvcCAgICA/ICdib3R0b20nIDpcbiAgICAgICAgICAgICAgICAgICAgcGxhY2VtZW50ID09ICdyaWdodCcgICYmIHBvcy5yaWdodCAgKyBhY3R1YWxXaWR0aCAgPiB2aWV3cG9ydERpbS53aWR0aCAgPyAnbGVmdCcgICA6XG4gICAgICAgICAgICAgICAgICAgIHBsYWNlbWVudCA9PSAnbGVmdCcgICAmJiBwb3MubGVmdCAgIC0gYWN0dWFsV2lkdGggIDwgdmlld3BvcnREaW0ubGVmdCAgID8gJ3JpZ2h0JyAgOlxuICAgICAgICAgICAgICAgICAgICBwbGFjZW1lbnRcblxuICAgICAgICAkdGlwXG4gICAgICAgICAgLnJlbW92ZUNsYXNzKG9yZ1BsYWNlbWVudClcbiAgICAgICAgICAuYWRkQ2xhc3MocGxhY2VtZW50KVxuICAgICAgfVxuXG4gICAgICB2YXIgY2FsY3VsYXRlZE9mZnNldCA9IHRoaXMuZ2V0Q2FsY3VsYXRlZE9mZnNldChwbGFjZW1lbnQsIHBvcywgYWN0dWFsV2lkdGgsIGFjdHVhbEhlaWdodClcblxuICAgICAgdGhpcy5hcHBseVBsYWNlbWVudChjYWxjdWxhdGVkT2Zmc2V0LCBwbGFjZW1lbnQpXG5cbiAgICAgIHZhciBjb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHByZXZIb3ZlclN0YXRlID0gdGhhdC5ob3ZlclN0YXRlXG4gICAgICAgIHRoYXQuJGVsZW1lbnQudHJpZ2dlcignc2hvd24uYnMuJyArIHRoYXQudHlwZSlcbiAgICAgICAgdGhhdC5ob3ZlclN0YXRlID0gbnVsbFxuXG4gICAgICAgIGlmIChwcmV2SG92ZXJTdGF0ZSA9PSAnb3V0JykgdGhhdC5sZWF2ZSh0aGF0KVxuICAgICAgfVxuXG4gICAgICAkLnN1cHBvcnQudHJhbnNpdGlvbiAmJiB0aGlzLiR0aXAuaGFzQ2xhc3MoJ2ZhZGUnKSA/XG4gICAgICAgICR0aXBcbiAgICAgICAgICAub25lKCdic1RyYW5zaXRpb25FbmQnLCBjb21wbGV0ZSlcbiAgICAgICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQoVG9vbHRpcC5UUkFOU0lUSU9OX0RVUkFUSU9OKSA6XG4gICAgICAgIGNvbXBsZXRlKClcbiAgICB9XG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5hcHBseVBsYWNlbWVudCA9IGZ1bmN0aW9uIChvZmZzZXQsIHBsYWNlbWVudCkge1xuICAgIHZhciAkdGlwICAgPSB0aGlzLnRpcCgpXG4gICAgdmFyIHdpZHRoICA9ICR0aXBbMF0ub2Zmc2V0V2lkdGhcbiAgICB2YXIgaGVpZ2h0ID0gJHRpcFswXS5vZmZzZXRIZWlnaHRcblxuICAgIC8vIG1hbnVhbGx5IHJlYWQgbWFyZ2lucyBiZWNhdXNlIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBpbmNsdWRlcyBkaWZmZXJlbmNlXG4gICAgdmFyIG1hcmdpblRvcCA9IHBhcnNlSW50KCR0aXAuY3NzKCdtYXJnaW4tdG9wJyksIDEwKVxuICAgIHZhciBtYXJnaW5MZWZ0ID0gcGFyc2VJbnQoJHRpcC5jc3MoJ21hcmdpbi1sZWZ0JyksIDEwKVxuXG4gICAgLy8gd2UgbXVzdCBjaGVjayBmb3IgTmFOIGZvciBpZSA4LzlcbiAgICBpZiAoaXNOYU4obWFyZ2luVG9wKSkgIG1hcmdpblRvcCAgPSAwXG4gICAgaWYgKGlzTmFOKG1hcmdpbkxlZnQpKSBtYXJnaW5MZWZ0ID0gMFxuXG4gICAgb2Zmc2V0LnRvcCAgKz0gbWFyZ2luVG9wXG4gICAgb2Zmc2V0LmxlZnQgKz0gbWFyZ2luTGVmdFxuXG4gICAgLy8gJC5mbi5vZmZzZXQgZG9lc24ndCByb3VuZCBwaXhlbCB2YWx1ZXNcbiAgICAvLyBzbyB3ZSB1c2Ugc2V0T2Zmc2V0IGRpcmVjdGx5IHdpdGggb3VyIG93biBmdW5jdGlvbiBCLTBcbiAgICAkLm9mZnNldC5zZXRPZmZzZXQoJHRpcFswXSwgJC5leHRlbmQoe1xuICAgICAgdXNpbmc6IGZ1bmN0aW9uIChwcm9wcykge1xuICAgICAgICAkdGlwLmNzcyh7XG4gICAgICAgICAgdG9wOiBNYXRoLnJvdW5kKHByb3BzLnRvcCksXG4gICAgICAgICAgbGVmdDogTWF0aC5yb3VuZChwcm9wcy5sZWZ0KVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0sIG9mZnNldCksIDApXG5cbiAgICAkdGlwLmFkZENsYXNzKCdpbicpXG5cbiAgICAvLyBjaGVjayB0byBzZWUgaWYgcGxhY2luZyB0aXAgaW4gbmV3IG9mZnNldCBjYXVzZWQgdGhlIHRpcCB0byByZXNpemUgaXRzZWxmXG4gICAgdmFyIGFjdHVhbFdpZHRoICA9ICR0aXBbMF0ub2Zmc2V0V2lkdGhcbiAgICB2YXIgYWN0dWFsSGVpZ2h0ID0gJHRpcFswXS5vZmZzZXRIZWlnaHRcblxuICAgIGlmIChwbGFjZW1lbnQgPT0gJ3RvcCcgJiYgYWN0dWFsSGVpZ2h0ICE9IGhlaWdodCkge1xuICAgICAgb2Zmc2V0LnRvcCA9IG9mZnNldC50b3AgKyBoZWlnaHQgLSBhY3R1YWxIZWlnaHRcbiAgICB9XG5cbiAgICB2YXIgZGVsdGEgPSB0aGlzLmdldFZpZXdwb3J0QWRqdXN0ZWREZWx0YShwbGFjZW1lbnQsIG9mZnNldCwgYWN0dWFsV2lkdGgsIGFjdHVhbEhlaWdodClcblxuICAgIGlmIChkZWx0YS5sZWZ0KSBvZmZzZXQubGVmdCArPSBkZWx0YS5sZWZ0XG4gICAgZWxzZSBvZmZzZXQudG9wICs9IGRlbHRhLnRvcFxuXG4gICAgdmFyIGlzVmVydGljYWwgICAgICAgICAgPSAvdG9wfGJvdHRvbS8udGVzdChwbGFjZW1lbnQpXG4gICAgdmFyIGFycm93RGVsdGEgICAgICAgICAgPSBpc1ZlcnRpY2FsID8gZGVsdGEubGVmdCAqIDIgLSB3aWR0aCArIGFjdHVhbFdpZHRoIDogZGVsdGEudG9wICogMiAtIGhlaWdodCArIGFjdHVhbEhlaWdodFxuICAgIHZhciBhcnJvd09mZnNldFBvc2l0aW9uID0gaXNWZXJ0aWNhbCA/ICdvZmZzZXRXaWR0aCcgOiAnb2Zmc2V0SGVpZ2h0J1xuXG4gICAgJHRpcC5vZmZzZXQob2Zmc2V0KVxuICAgIHRoaXMucmVwbGFjZUFycm93KGFycm93RGVsdGEsICR0aXBbMF1bYXJyb3dPZmZzZXRQb3NpdGlvbl0sIGlzVmVydGljYWwpXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5yZXBsYWNlQXJyb3cgPSBmdW5jdGlvbiAoZGVsdGEsIGRpbWVuc2lvbiwgaXNWZXJ0aWNhbCkge1xuICAgIHRoaXMuYXJyb3coKVxuICAgICAgLmNzcyhpc1ZlcnRpY2FsID8gJ2xlZnQnIDogJ3RvcCcsIDUwICogKDEgLSBkZWx0YSAvIGRpbWVuc2lvbikgKyAnJScpXG4gICAgICAuY3NzKGlzVmVydGljYWwgPyAndG9wJyA6ICdsZWZ0JywgJycpXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5zZXRDb250ZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciAkdGlwICA9IHRoaXMudGlwKClcbiAgICB2YXIgdGl0bGUgPSB0aGlzLmdldFRpdGxlKClcblxuICAgICR0aXAuZmluZCgnLnRvb2x0aXAtaW5uZXInKVt0aGlzLm9wdGlvbnMuaHRtbCA/ICdodG1sJyA6ICd0ZXh0J10odGl0bGUpXG4gICAgJHRpcC5yZW1vdmVDbGFzcygnZmFkZSBpbiB0b3AgYm90dG9tIGxlZnQgcmlnaHQnKVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuaGlkZSA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgIHZhciB0aGF0ID0gdGhpc1xuICAgIHZhciAkdGlwID0gJCh0aGlzLiR0aXApXG4gICAgdmFyIGUgICAgPSAkLkV2ZW50KCdoaWRlLmJzLicgKyB0aGlzLnR5cGUpXG5cbiAgICBmdW5jdGlvbiBjb21wbGV0ZSgpIHtcbiAgICAgIGlmICh0aGF0LmhvdmVyU3RhdGUgIT0gJ2luJykgJHRpcC5kZXRhY2goKVxuICAgICAgaWYgKHRoYXQuJGVsZW1lbnQpIHsgLy8gVE9ETzogQ2hlY2sgd2hldGhlciBndWFyZGluZyB0aGlzIGNvZGUgd2l0aCB0aGlzIGBpZmAgaXMgcmVhbGx5IG5lY2Vzc2FyeS5cbiAgICAgICAgdGhhdC4kZWxlbWVudFxuICAgICAgICAgIC5yZW1vdmVBdHRyKCdhcmlhLWRlc2NyaWJlZGJ5JylcbiAgICAgICAgICAudHJpZ2dlcignaGlkZGVuLmJzLicgKyB0aGF0LnR5cGUpXG4gICAgICB9XG4gICAgICBjYWxsYmFjayAmJiBjYWxsYmFjaygpXG4gICAgfVxuXG4gICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKGUpXG5cbiAgICBpZiAoZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgcmV0dXJuXG5cbiAgICAkdGlwLnJlbW92ZUNsYXNzKCdpbicpXG5cbiAgICAkLnN1cHBvcnQudHJhbnNpdGlvbiAmJiAkdGlwLmhhc0NsYXNzKCdmYWRlJykgP1xuICAgICAgJHRpcFxuICAgICAgICAub25lKCdic1RyYW5zaXRpb25FbmQnLCBjb21wbGV0ZSlcbiAgICAgICAgLmVtdWxhdGVUcmFuc2l0aW9uRW5kKFRvb2x0aXAuVFJBTlNJVElPTl9EVVJBVElPTikgOlxuICAgICAgY29tcGxldGUoKVxuXG4gICAgdGhpcy5ob3ZlclN0YXRlID0gbnVsbFxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmZpeFRpdGxlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciAkZSA9IHRoaXMuJGVsZW1lbnRcbiAgICBpZiAoJGUuYXR0cigndGl0bGUnKSB8fCB0eXBlb2YgJGUuYXR0cignZGF0YS1vcmlnaW5hbC10aXRsZScpICE9ICdzdHJpbmcnKSB7XG4gICAgICAkZS5hdHRyKCdkYXRhLW9yaWdpbmFsLXRpdGxlJywgJGUuYXR0cigndGl0bGUnKSB8fCAnJykuYXR0cigndGl0bGUnLCAnJylcbiAgICB9XG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5oYXNDb250ZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmdldFRpdGxlKClcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmdldFBvc2l0aW9uID0gZnVuY3Rpb24gKCRlbGVtZW50KSB7XG4gICAgJGVsZW1lbnQgICA9ICRlbGVtZW50IHx8IHRoaXMuJGVsZW1lbnRcblxuICAgIHZhciBlbCAgICAgPSAkZWxlbWVudFswXVxuICAgIHZhciBpc0JvZHkgPSBlbC50YWdOYW1lID09ICdCT0RZJ1xuXG4gICAgdmFyIGVsUmVjdCAgICA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gICAgaWYgKGVsUmVjdC53aWR0aCA9PSBudWxsKSB7XG4gICAgICAvLyB3aWR0aCBhbmQgaGVpZ2h0IGFyZSBtaXNzaW5nIGluIElFOCwgc28gY29tcHV0ZSB0aGVtIG1hbnVhbGx5OyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2lzc3Vlcy8xNDA5M1xuICAgICAgZWxSZWN0ID0gJC5leHRlbmQoe30sIGVsUmVjdCwgeyB3aWR0aDogZWxSZWN0LnJpZ2h0IC0gZWxSZWN0LmxlZnQsIGhlaWdodDogZWxSZWN0LmJvdHRvbSAtIGVsUmVjdC50b3AgfSlcbiAgICB9XG4gICAgdmFyIGlzU3ZnID0gd2luZG93LlNWR0VsZW1lbnQgJiYgZWwgaW5zdGFuY2VvZiB3aW5kb3cuU1ZHRWxlbWVudFxuICAgIC8vIEF2b2lkIHVzaW5nICQub2Zmc2V0KCkgb24gU1ZHcyBzaW5jZSBpdCBnaXZlcyBpbmNvcnJlY3QgcmVzdWx0cyBpbiBqUXVlcnkgMy5cbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2lzc3Vlcy8yMDI4MFxuICAgIHZhciBlbE9mZnNldCAgPSBpc0JvZHkgPyB7IHRvcDogMCwgbGVmdDogMCB9IDogKGlzU3ZnID8gbnVsbCA6ICRlbGVtZW50Lm9mZnNldCgpKVxuICAgIHZhciBzY3JvbGwgICAgPSB7IHNjcm9sbDogaXNCb2R5ID8gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCB8fCBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCA6ICRlbGVtZW50LnNjcm9sbFRvcCgpIH1cbiAgICB2YXIgb3V0ZXJEaW1zID0gaXNCb2R5ID8geyB3aWR0aDogJCh3aW5kb3cpLndpZHRoKCksIGhlaWdodDogJCh3aW5kb3cpLmhlaWdodCgpIH0gOiBudWxsXG5cbiAgICByZXR1cm4gJC5leHRlbmQoe30sIGVsUmVjdCwgc2Nyb2xsLCBvdXRlckRpbXMsIGVsT2Zmc2V0KVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuZ2V0Q2FsY3VsYXRlZE9mZnNldCA9IGZ1bmN0aW9uIChwbGFjZW1lbnQsIHBvcywgYWN0dWFsV2lkdGgsIGFjdHVhbEhlaWdodCkge1xuICAgIHJldHVybiBwbGFjZW1lbnQgPT0gJ2JvdHRvbScgPyB7IHRvcDogcG9zLnRvcCArIHBvcy5oZWlnaHQsICAgbGVmdDogcG9zLmxlZnQgKyBwb3Mud2lkdGggLyAyIC0gYWN0dWFsV2lkdGggLyAyIH0gOlxuICAgICAgICAgICBwbGFjZW1lbnQgPT0gJ3RvcCcgICAgPyB7IHRvcDogcG9zLnRvcCAtIGFjdHVhbEhlaWdodCwgbGVmdDogcG9zLmxlZnQgKyBwb3Mud2lkdGggLyAyIC0gYWN0dWFsV2lkdGggLyAyIH0gOlxuICAgICAgICAgICBwbGFjZW1lbnQgPT0gJ2xlZnQnICAgPyB7IHRvcDogcG9zLnRvcCArIHBvcy5oZWlnaHQgLyAyIC0gYWN0dWFsSGVpZ2h0IC8gMiwgbGVmdDogcG9zLmxlZnQgLSBhY3R1YWxXaWR0aCB9IDpcbiAgICAgICAgLyogcGxhY2VtZW50ID09ICdyaWdodCcgKi8geyB0b3A6IHBvcy50b3AgKyBwb3MuaGVpZ2h0IC8gMiAtIGFjdHVhbEhlaWdodCAvIDIsIGxlZnQ6IHBvcy5sZWZ0ICsgcG9zLndpZHRoIH1cblxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuZ2V0Vmlld3BvcnRBZGp1c3RlZERlbHRhID0gZnVuY3Rpb24gKHBsYWNlbWVudCwgcG9zLCBhY3R1YWxXaWR0aCwgYWN0dWFsSGVpZ2h0KSB7XG4gICAgdmFyIGRlbHRhID0geyB0b3A6IDAsIGxlZnQ6IDAgfVxuICAgIGlmICghdGhpcy4kdmlld3BvcnQpIHJldHVybiBkZWx0YVxuXG4gICAgdmFyIHZpZXdwb3J0UGFkZGluZyA9IHRoaXMub3B0aW9ucy52aWV3cG9ydCAmJiB0aGlzLm9wdGlvbnMudmlld3BvcnQucGFkZGluZyB8fCAwXG4gICAgdmFyIHZpZXdwb3J0RGltZW5zaW9ucyA9IHRoaXMuZ2V0UG9zaXRpb24odGhpcy4kdmlld3BvcnQpXG5cbiAgICBpZiAoL3JpZ2h0fGxlZnQvLnRlc3QocGxhY2VtZW50KSkge1xuICAgICAgdmFyIHRvcEVkZ2VPZmZzZXQgICAgPSBwb3MudG9wIC0gdmlld3BvcnRQYWRkaW5nIC0gdmlld3BvcnREaW1lbnNpb25zLnNjcm9sbFxuICAgICAgdmFyIGJvdHRvbUVkZ2VPZmZzZXQgPSBwb3MudG9wICsgdmlld3BvcnRQYWRkaW5nIC0gdmlld3BvcnREaW1lbnNpb25zLnNjcm9sbCArIGFjdHVhbEhlaWdodFxuICAgICAgaWYgKHRvcEVkZ2VPZmZzZXQgPCB2aWV3cG9ydERpbWVuc2lvbnMudG9wKSB7IC8vIHRvcCBvdmVyZmxvd1xuICAgICAgICBkZWx0YS50b3AgPSB2aWV3cG9ydERpbWVuc2lvbnMudG9wIC0gdG9wRWRnZU9mZnNldFxuICAgICAgfSBlbHNlIGlmIChib3R0b21FZGdlT2Zmc2V0ID4gdmlld3BvcnREaW1lbnNpb25zLnRvcCArIHZpZXdwb3J0RGltZW5zaW9ucy5oZWlnaHQpIHsgLy8gYm90dG9tIG92ZXJmbG93XG4gICAgICAgIGRlbHRhLnRvcCA9IHZpZXdwb3J0RGltZW5zaW9ucy50b3AgKyB2aWV3cG9ydERpbWVuc2lvbnMuaGVpZ2h0IC0gYm90dG9tRWRnZU9mZnNldFxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbGVmdEVkZ2VPZmZzZXQgID0gcG9zLmxlZnQgLSB2aWV3cG9ydFBhZGRpbmdcbiAgICAgIHZhciByaWdodEVkZ2VPZmZzZXQgPSBwb3MubGVmdCArIHZpZXdwb3J0UGFkZGluZyArIGFjdHVhbFdpZHRoXG4gICAgICBpZiAobGVmdEVkZ2VPZmZzZXQgPCB2aWV3cG9ydERpbWVuc2lvbnMubGVmdCkgeyAvLyBsZWZ0IG92ZXJmbG93XG4gICAgICAgIGRlbHRhLmxlZnQgPSB2aWV3cG9ydERpbWVuc2lvbnMubGVmdCAtIGxlZnRFZGdlT2Zmc2V0XG4gICAgICB9IGVsc2UgaWYgKHJpZ2h0RWRnZU9mZnNldCA+IHZpZXdwb3J0RGltZW5zaW9ucy5yaWdodCkgeyAvLyByaWdodCBvdmVyZmxvd1xuICAgICAgICBkZWx0YS5sZWZ0ID0gdmlld3BvcnREaW1lbnNpb25zLmxlZnQgKyB2aWV3cG9ydERpbWVuc2lvbnMud2lkdGggLSByaWdodEVkZ2VPZmZzZXRcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZGVsdGFcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmdldFRpdGxlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB0aXRsZVxuICAgIHZhciAkZSA9IHRoaXMuJGVsZW1lbnRcbiAgICB2YXIgbyAgPSB0aGlzLm9wdGlvbnNcblxuICAgIHRpdGxlID0gJGUuYXR0cignZGF0YS1vcmlnaW5hbC10aXRsZScpXG4gICAgICB8fCAodHlwZW9mIG8udGl0bGUgPT0gJ2Z1bmN0aW9uJyA/IG8udGl0bGUuY2FsbCgkZVswXSkgOiAgby50aXRsZSlcblxuICAgIHJldHVybiB0aXRsZVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuZ2V0VUlEID0gZnVuY3Rpb24gKHByZWZpeCkge1xuICAgIGRvIHByZWZpeCArPSB+fihNYXRoLnJhbmRvbSgpICogMTAwMDAwMClcbiAgICB3aGlsZSAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocHJlZml4KSlcbiAgICByZXR1cm4gcHJlZml4XG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS50aXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzLiR0aXApIHtcbiAgICAgIHRoaXMuJHRpcCA9ICQodGhpcy5vcHRpb25zLnRlbXBsYXRlKVxuICAgICAgaWYgKHRoaXMuJHRpcC5sZW5ndGggIT0gMSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IodGhpcy50eXBlICsgJyBgdGVtcGxhdGVgIG9wdGlvbiBtdXN0IGNvbnNpc3Qgb2YgZXhhY3RseSAxIHRvcC1sZXZlbCBlbGVtZW50IScpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLiR0aXBcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmFycm93ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAodGhpcy4kYXJyb3cgPSB0aGlzLiRhcnJvdyB8fCB0aGlzLnRpcCgpLmZpbmQoJy50b29sdGlwLWFycm93JykpXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5lbmFibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5lbmFibGVkID0gdHJ1ZVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuZGlzYWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmVuYWJsZWQgPSBmYWxzZVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUudG9nZ2xlRW5hYmxlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmVuYWJsZWQgPSAhdGhpcy5lbmFibGVkXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS50b2dnbGUgPSBmdW5jdGlvbiAoZSkge1xuICAgIHZhciBzZWxmID0gdGhpc1xuICAgIGlmIChlKSB7XG4gICAgICBzZWxmID0gJChlLmN1cnJlbnRUYXJnZXQpLmRhdGEoJ2JzLicgKyB0aGlzLnR5cGUpXG4gICAgICBpZiAoIXNlbGYpIHtcbiAgICAgICAgc2VsZiA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKGUuY3VycmVudFRhcmdldCwgdGhpcy5nZXREZWxlZ2F0ZU9wdGlvbnMoKSlcbiAgICAgICAgJChlLmN1cnJlbnRUYXJnZXQpLmRhdGEoJ2JzLicgKyB0aGlzLnR5cGUsIHNlbGYpXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGUpIHtcbiAgICAgIHNlbGYuaW5TdGF0ZS5jbGljayA9ICFzZWxmLmluU3RhdGUuY2xpY2tcbiAgICAgIGlmIChzZWxmLmlzSW5TdGF0ZVRydWUoKSkgc2VsZi5lbnRlcihzZWxmKVxuICAgICAgZWxzZSBzZWxmLmxlYXZlKHNlbGYpXG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbGYudGlwKCkuaGFzQ2xhc3MoJ2luJykgPyBzZWxmLmxlYXZlKHNlbGYpIDogc2VsZi5lbnRlcihzZWxmKVxuICAgIH1cbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRoYXQgPSB0aGlzXG4gICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dClcbiAgICB0aGlzLmhpZGUoZnVuY3Rpb24gKCkge1xuICAgICAgdGhhdC4kZWxlbWVudC5vZmYoJy4nICsgdGhhdC50eXBlKS5yZW1vdmVEYXRhKCdicy4nICsgdGhhdC50eXBlKVxuICAgICAgaWYgKHRoYXQuJHRpcCkge1xuICAgICAgICB0aGF0LiR0aXAuZGV0YWNoKClcbiAgICAgIH1cbiAgICAgIHRoYXQuJHRpcCA9IG51bGxcbiAgICAgIHRoYXQuJGFycm93ID0gbnVsbFxuICAgICAgdGhhdC4kdmlld3BvcnQgPSBudWxsXG4gICAgICB0aGF0LiRlbGVtZW50ID0gbnVsbFxuICAgIH0pXG4gIH1cblxuXG4gIC8vIFRPT0xUSVAgUExVR0lOIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIGZ1bmN0aW9uIFBsdWdpbihvcHRpb24pIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGhpcyAgID0gJCh0aGlzKVxuICAgICAgdmFyIGRhdGEgICAgPSAkdGhpcy5kYXRhKCdicy50b29sdGlwJylcbiAgICAgIHZhciBvcHRpb25zID0gdHlwZW9mIG9wdGlvbiA9PSAnb2JqZWN0JyAmJiBvcHRpb25cblxuICAgICAgaWYgKCFkYXRhICYmIC9kZXN0cm95fGhpZGUvLnRlc3Qob3B0aW9uKSkgcmV0dXJuXG4gICAgICBpZiAoIWRhdGEpICR0aGlzLmRhdGEoJ2JzLnRvb2x0aXAnLCAoZGF0YSA9IG5ldyBUb29sdGlwKHRoaXMsIG9wdGlvbnMpKSlcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9uID09ICdzdHJpbmcnKSBkYXRhW29wdGlvbl0oKVxuICAgIH0pXG4gIH1cblxuICB2YXIgb2xkID0gJC5mbi50b29sdGlwXG5cbiAgJC5mbi50b29sdGlwICAgICAgICAgICAgID0gUGx1Z2luXG4gICQuZm4udG9vbHRpcC5Db25zdHJ1Y3RvciA9IFRvb2x0aXBcblxuXG4gIC8vIFRPT0xUSVAgTk8gQ09ORkxJQ1RcbiAgLy8gPT09PT09PT09PT09PT09PT09PVxuXG4gICQuZm4udG9vbHRpcC5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm4udG9vbHRpcCA9IG9sZFxuICAgIHJldHVybiB0aGlzXG4gIH1cblxufShqUXVlcnkpO1xuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEJvb3RzdHJhcDogcG9wb3Zlci5qcyB2My4zLjdcbiAqIGh0dHA6Ly9nZXRib290c3RyYXAuY29tL2phdmFzY3JpcHQvI3BvcG92ZXJzXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvcHlyaWdodCAyMDExLTIwMTYgVHdpdHRlciwgSW5jLlxuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG5cbitmdW5jdGlvbiAoJCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gUE9QT1ZFUiBQVUJMSUMgQ0xBU1MgREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgdmFyIFBvcG92ZXIgPSBmdW5jdGlvbiAoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMuaW5pdCgncG9wb3ZlcicsIGVsZW1lbnQsIG9wdGlvbnMpXG4gIH1cblxuICBpZiAoISQuZm4udG9vbHRpcCkgdGhyb3cgbmV3IEVycm9yKCdQb3BvdmVyIHJlcXVpcmVzIHRvb2x0aXAuanMnKVxuXG4gIFBvcG92ZXIuVkVSU0lPTiAgPSAnMy4zLjcnXG5cbiAgUG9wb3Zlci5ERUZBVUxUUyA9ICQuZXh0ZW5kKHt9LCAkLmZuLnRvb2x0aXAuQ29uc3RydWN0b3IuREVGQVVMVFMsIHtcbiAgICBwbGFjZW1lbnQ6ICdyaWdodCcsXG4gICAgdHJpZ2dlcjogJ2NsaWNrJyxcbiAgICBjb250ZW50OiAnJyxcbiAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJwb3BvdmVyXCIgcm9sZT1cInRvb2x0aXBcIj48ZGl2IGNsYXNzPVwiYXJyb3dcIj48L2Rpdj48aDMgY2xhc3M9XCJwb3BvdmVyLXRpdGxlXCI+PC9oMz48ZGl2IGNsYXNzPVwicG9wb3Zlci1jb250ZW50XCI+PC9kaXY+PC9kaXY+J1xuICB9KVxuXG5cbiAgLy8gTk9URTogUE9QT1ZFUiBFWFRFTkRTIHRvb2x0aXAuanNcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICBQb3BvdmVyLnByb3RvdHlwZSA9ICQuZXh0ZW5kKHt9LCAkLmZuLnRvb2x0aXAuQ29uc3RydWN0b3IucHJvdG90eXBlKVxuXG4gIFBvcG92ZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUG9wb3ZlclxuXG4gIFBvcG92ZXIucHJvdG90eXBlLmdldERlZmF1bHRzID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBQb3BvdmVyLkRFRkFVTFRTXG4gIH1cblxuICBQb3BvdmVyLnByb3RvdHlwZS5zZXRDb250ZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciAkdGlwICAgID0gdGhpcy50aXAoKVxuICAgIHZhciB0aXRsZSAgID0gdGhpcy5nZXRUaXRsZSgpXG4gICAgdmFyIGNvbnRlbnQgPSB0aGlzLmdldENvbnRlbnQoKVxuXG4gICAgJHRpcC5maW5kKCcucG9wb3Zlci10aXRsZScpW3RoaXMub3B0aW9ucy5odG1sID8gJ2h0bWwnIDogJ3RleHQnXSh0aXRsZSlcbiAgICAkdGlwLmZpbmQoJy5wb3BvdmVyLWNvbnRlbnQnKS5jaGlsZHJlbigpLmRldGFjaCgpLmVuZCgpWyAvLyB3ZSB1c2UgYXBwZW5kIGZvciBodG1sIG9iamVjdHMgdG8gbWFpbnRhaW4ganMgZXZlbnRzXG4gICAgICB0aGlzLm9wdGlvbnMuaHRtbCA/ICh0eXBlb2YgY29udGVudCA9PSAnc3RyaW5nJyA/ICdodG1sJyA6ICdhcHBlbmQnKSA6ICd0ZXh0J1xuICAgIF0oY29udGVudClcblxuICAgICR0aXAucmVtb3ZlQ2xhc3MoJ2ZhZGUgdG9wIGJvdHRvbSBsZWZ0IHJpZ2h0IGluJylcblxuICAgIC8vIElFOCBkb2Vzbid0IGFjY2VwdCBoaWRpbmcgdmlhIHRoZSBgOmVtcHR5YCBwc2V1ZG8gc2VsZWN0b3IsIHdlIGhhdmUgdG8gZG9cbiAgICAvLyB0aGlzIG1hbnVhbGx5IGJ5IGNoZWNraW5nIHRoZSBjb250ZW50cy5cbiAgICBpZiAoISR0aXAuZmluZCgnLnBvcG92ZXItdGl0bGUnKS5odG1sKCkpICR0aXAuZmluZCgnLnBvcG92ZXItdGl0bGUnKS5oaWRlKClcbiAgfVxuXG4gIFBvcG92ZXIucHJvdG90eXBlLmhhc0NvbnRlbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0VGl0bGUoKSB8fCB0aGlzLmdldENvbnRlbnQoKVxuICB9XG5cbiAgUG9wb3Zlci5wcm90b3R5cGUuZ2V0Q29udGVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgJGUgPSB0aGlzLiRlbGVtZW50XG4gICAgdmFyIG8gID0gdGhpcy5vcHRpb25zXG5cbiAgICByZXR1cm4gJGUuYXR0cignZGF0YS1jb250ZW50JylcbiAgICAgIHx8ICh0eXBlb2Ygby5jb250ZW50ID09ICdmdW5jdGlvbicgP1xuICAgICAgICAgICAgby5jb250ZW50LmNhbGwoJGVbMF0pIDpcbiAgICAgICAgICAgIG8uY29udGVudClcbiAgfVxuXG4gIFBvcG92ZXIucHJvdG90eXBlLmFycm93ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAodGhpcy4kYXJyb3cgPSB0aGlzLiRhcnJvdyB8fCB0aGlzLnRpcCgpLmZpbmQoJy5hcnJvdycpKVxuICB9XG5cblxuICAvLyBQT1BPVkVSIFBMVUdJTiBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICBmdW5jdGlvbiBQbHVnaW4ob3B0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHRoaXMgICA9ICQodGhpcylcbiAgICAgIHZhciBkYXRhICAgID0gJHRoaXMuZGF0YSgnYnMucG9wb3ZlcicpXG4gICAgICB2YXIgb3B0aW9ucyA9IHR5cGVvZiBvcHRpb24gPT0gJ29iamVjdCcgJiYgb3B0aW9uXG5cbiAgICAgIGlmICghZGF0YSAmJiAvZGVzdHJveXxoaWRlLy50ZXN0KG9wdGlvbikpIHJldHVyblxuICAgICAgaWYgKCFkYXRhKSAkdGhpcy5kYXRhKCdicy5wb3BvdmVyJywgKGRhdGEgPSBuZXcgUG9wb3Zlcih0aGlzLCBvcHRpb25zKSkpXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJykgZGF0YVtvcHRpb25dKClcbiAgICB9KVxuICB9XG5cbiAgdmFyIG9sZCA9ICQuZm4ucG9wb3ZlclxuXG4gICQuZm4ucG9wb3ZlciAgICAgICAgICAgICA9IFBsdWdpblxuICAkLmZuLnBvcG92ZXIuQ29uc3RydWN0b3IgPSBQb3BvdmVyXG5cblxuICAvLyBQT1BPVkVSIE5PIENPTkZMSUNUXG4gIC8vID09PT09PT09PT09PT09PT09PT1cblxuICAkLmZuLnBvcG92ZXIubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuLnBvcG92ZXIgPSBvbGRcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbn0oalF1ZXJ5KTtcblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBCb290c3RyYXA6IHNjcm9sbHNweS5qcyB2My4zLjdcbiAqIGh0dHA6Ly9nZXRib290c3RyYXAuY29tL2phdmFzY3JpcHQvI3Njcm9sbHNweVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb3B5cmlnaHQgMjAxMS0yMDE2IFR3aXR0ZXIsIEluYy5cbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuXG4rZnVuY3Rpb24gKCQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIFNDUk9MTFNQWSBDTEFTUyBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgZnVuY3Rpb24gU2Nyb2xsU3B5KGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRib2R5ICAgICAgICAgID0gJChkb2N1bWVudC5ib2R5KVxuICAgIHRoaXMuJHNjcm9sbEVsZW1lbnQgPSAkKGVsZW1lbnQpLmlzKGRvY3VtZW50LmJvZHkpID8gJCh3aW5kb3cpIDogJChlbGVtZW50KVxuICAgIHRoaXMub3B0aW9ucyAgICAgICAgPSAkLmV4dGVuZCh7fSwgU2Nyb2xsU3B5LkRFRkFVTFRTLCBvcHRpb25zKVxuICAgIHRoaXMuc2VsZWN0b3IgICAgICAgPSAodGhpcy5vcHRpb25zLnRhcmdldCB8fCAnJykgKyAnIC5uYXYgbGkgPiBhJ1xuICAgIHRoaXMub2Zmc2V0cyAgICAgICAgPSBbXVxuICAgIHRoaXMudGFyZ2V0cyAgICAgICAgPSBbXVxuICAgIHRoaXMuYWN0aXZlVGFyZ2V0ICAgPSBudWxsXG4gICAgdGhpcy5zY3JvbGxIZWlnaHQgICA9IDBcblxuICAgIHRoaXMuJHNjcm9sbEVsZW1lbnQub24oJ3Njcm9sbC5icy5zY3JvbGxzcHknLCAkLnByb3h5KHRoaXMucHJvY2VzcywgdGhpcykpXG4gICAgdGhpcy5yZWZyZXNoKClcbiAgICB0aGlzLnByb2Nlc3MoKVxuICB9XG5cbiAgU2Nyb2xsU3B5LlZFUlNJT04gID0gJzMuMy43J1xuXG4gIFNjcm9sbFNweS5ERUZBVUxUUyA9IHtcbiAgICBvZmZzZXQ6IDEwXG4gIH1cblxuICBTY3JvbGxTcHkucHJvdG90eXBlLmdldFNjcm9sbEhlaWdodCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy4kc2Nyb2xsRWxlbWVudFswXS5zY3JvbGxIZWlnaHQgfHwgTWF0aC5tYXgodGhpcy4kYm9keVswXS5zY3JvbGxIZWlnaHQsIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxIZWlnaHQpXG4gIH1cblxuICBTY3JvbGxTcHkucHJvdG90eXBlLnJlZnJlc2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRoYXQgICAgICAgICAgPSB0aGlzXG4gICAgdmFyIG9mZnNldE1ldGhvZCAgPSAnb2Zmc2V0J1xuICAgIHZhciBvZmZzZXRCYXNlICAgID0gMFxuXG4gICAgdGhpcy5vZmZzZXRzICAgICAgPSBbXVxuICAgIHRoaXMudGFyZ2V0cyAgICAgID0gW11cbiAgICB0aGlzLnNjcm9sbEhlaWdodCA9IHRoaXMuZ2V0U2Nyb2xsSGVpZ2h0KClcblxuICAgIGlmICghJC5pc1dpbmRvdyh0aGlzLiRzY3JvbGxFbGVtZW50WzBdKSkge1xuICAgICAgb2Zmc2V0TWV0aG9kID0gJ3Bvc2l0aW9uJ1xuICAgICAgb2Zmc2V0QmFzZSAgID0gdGhpcy4kc2Nyb2xsRWxlbWVudC5zY3JvbGxUb3AoKVxuICAgIH1cblxuICAgIHRoaXMuJGJvZHlcbiAgICAgIC5maW5kKHRoaXMuc2VsZWN0b3IpXG4gICAgICAubWFwKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyICRlbCAgID0gJCh0aGlzKVxuICAgICAgICB2YXIgaHJlZiAgPSAkZWwuZGF0YSgndGFyZ2V0JykgfHwgJGVsLmF0dHIoJ2hyZWYnKVxuICAgICAgICB2YXIgJGhyZWYgPSAvXiMuLy50ZXN0KGhyZWYpICYmICQoaHJlZilcblxuICAgICAgICByZXR1cm4gKCRocmVmXG4gICAgICAgICAgJiYgJGhyZWYubGVuZ3RoXG4gICAgICAgICAgJiYgJGhyZWYuaXMoJzp2aXNpYmxlJylcbiAgICAgICAgICAmJiBbWyRocmVmW29mZnNldE1ldGhvZF0oKS50b3AgKyBvZmZzZXRCYXNlLCBocmVmXV0pIHx8IG51bGxcbiAgICAgIH0pXG4gICAgICAuc29ydChmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gYVswXSAtIGJbMF0gfSlcbiAgICAgIC5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhhdC5vZmZzZXRzLnB1c2godGhpc1swXSlcbiAgICAgICAgdGhhdC50YXJnZXRzLnB1c2godGhpc1sxXSlcbiAgICAgIH0pXG4gIH1cblxuICBTY3JvbGxTcHkucHJvdG90eXBlLnByb2Nlc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNjcm9sbFRvcCAgICA9IHRoaXMuJHNjcm9sbEVsZW1lbnQuc2Nyb2xsVG9wKCkgKyB0aGlzLm9wdGlvbnMub2Zmc2V0XG4gICAgdmFyIHNjcm9sbEhlaWdodCA9IHRoaXMuZ2V0U2Nyb2xsSGVpZ2h0KClcbiAgICB2YXIgbWF4U2Nyb2xsICAgID0gdGhpcy5vcHRpb25zLm9mZnNldCArIHNjcm9sbEhlaWdodCAtIHRoaXMuJHNjcm9sbEVsZW1lbnQuaGVpZ2h0KClcbiAgICB2YXIgb2Zmc2V0cyAgICAgID0gdGhpcy5vZmZzZXRzXG4gICAgdmFyIHRhcmdldHMgICAgICA9IHRoaXMudGFyZ2V0c1xuICAgIHZhciBhY3RpdmVUYXJnZXQgPSB0aGlzLmFjdGl2ZVRhcmdldFxuICAgIHZhciBpXG5cbiAgICBpZiAodGhpcy5zY3JvbGxIZWlnaHQgIT0gc2Nyb2xsSGVpZ2h0KSB7XG4gICAgICB0aGlzLnJlZnJlc2goKVxuICAgIH1cblxuICAgIGlmIChzY3JvbGxUb3AgPj0gbWF4U2Nyb2xsKSB7XG4gICAgICByZXR1cm4gYWN0aXZlVGFyZ2V0ICE9IChpID0gdGFyZ2V0c1t0YXJnZXRzLmxlbmd0aCAtIDFdKSAmJiB0aGlzLmFjdGl2YXRlKGkpXG4gICAgfVxuXG4gICAgaWYgKGFjdGl2ZVRhcmdldCAmJiBzY3JvbGxUb3AgPCBvZmZzZXRzWzBdKSB7XG4gICAgICB0aGlzLmFjdGl2ZVRhcmdldCA9IG51bGxcbiAgICAgIHJldHVybiB0aGlzLmNsZWFyKClcbiAgICB9XG5cbiAgICBmb3IgKGkgPSBvZmZzZXRzLmxlbmd0aDsgaS0tOykge1xuICAgICAgYWN0aXZlVGFyZ2V0ICE9IHRhcmdldHNbaV1cbiAgICAgICAgJiYgc2Nyb2xsVG9wID49IG9mZnNldHNbaV1cbiAgICAgICAgJiYgKG9mZnNldHNbaSArIDFdID09PSB1bmRlZmluZWQgfHwgc2Nyb2xsVG9wIDwgb2Zmc2V0c1tpICsgMV0pXG4gICAgICAgICYmIHRoaXMuYWN0aXZhdGUodGFyZ2V0c1tpXSlcbiAgICB9XG4gIH1cblxuICBTY3JvbGxTcHkucHJvdG90eXBlLmFjdGl2YXRlID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIHRoaXMuYWN0aXZlVGFyZ2V0ID0gdGFyZ2V0XG5cbiAgICB0aGlzLmNsZWFyKClcblxuICAgIHZhciBzZWxlY3RvciA9IHRoaXMuc2VsZWN0b3IgK1xuICAgICAgJ1tkYXRhLXRhcmdldD1cIicgKyB0YXJnZXQgKyAnXCJdLCcgK1xuICAgICAgdGhpcy5zZWxlY3RvciArICdbaHJlZj1cIicgKyB0YXJnZXQgKyAnXCJdJ1xuXG4gICAgdmFyIGFjdGl2ZSA9ICQoc2VsZWN0b3IpXG4gICAgICAucGFyZW50cygnbGknKVxuICAgICAgLmFkZENsYXNzKCdhY3RpdmUnKVxuXG4gICAgaWYgKGFjdGl2ZS5wYXJlbnQoJy5kcm9wZG93bi1tZW51JykubGVuZ3RoKSB7XG4gICAgICBhY3RpdmUgPSBhY3RpdmVcbiAgICAgICAgLmNsb3Nlc3QoJ2xpLmRyb3Bkb3duJylcbiAgICAgICAgLmFkZENsYXNzKCdhY3RpdmUnKVxuICAgIH1cblxuICAgIGFjdGl2ZS50cmlnZ2VyKCdhY3RpdmF0ZS5icy5zY3JvbGxzcHknKVxuICB9XG5cbiAgU2Nyb2xsU3B5LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgICAkKHRoaXMuc2VsZWN0b3IpXG4gICAgICAucGFyZW50c1VudGlsKHRoaXMub3B0aW9ucy50YXJnZXQsICcuYWN0aXZlJylcbiAgICAgIC5yZW1vdmVDbGFzcygnYWN0aXZlJylcbiAgfVxuXG5cbiAgLy8gU0NST0xMU1BZIFBMVUdJTiBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIGZ1bmN0aW9uIFBsdWdpbihvcHRpb24pIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGhpcyAgID0gJCh0aGlzKVxuICAgICAgdmFyIGRhdGEgICAgPSAkdGhpcy5kYXRhKCdicy5zY3JvbGxzcHknKVxuICAgICAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9uID09ICdvYmplY3QnICYmIG9wdGlvblxuXG4gICAgICBpZiAoIWRhdGEpICR0aGlzLmRhdGEoJ2JzLnNjcm9sbHNweScsIChkYXRhID0gbmV3IFNjcm9sbFNweSh0aGlzLCBvcHRpb25zKSkpXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJykgZGF0YVtvcHRpb25dKClcbiAgICB9KVxuICB9XG5cbiAgdmFyIG9sZCA9ICQuZm4uc2Nyb2xsc3B5XG5cbiAgJC5mbi5zY3JvbGxzcHkgICAgICAgICAgICAgPSBQbHVnaW5cbiAgJC5mbi5zY3JvbGxzcHkuQ29uc3RydWN0b3IgPSBTY3JvbGxTcHlcblxuXG4gIC8vIFNDUk9MTFNQWSBOTyBDT05GTElDVFxuICAvLyA9PT09PT09PT09PT09PT09PT09PT1cblxuICAkLmZuLnNjcm9sbHNweS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm4uc2Nyb2xsc3B5ID0gb2xkXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG5cbiAgLy8gU0NST0xMU1BZIERBVEEtQVBJXG4gIC8vID09PT09PT09PT09PT09PT09PVxuXG4gICQod2luZG93KS5vbignbG9hZC5icy5zY3JvbGxzcHkuZGF0YS1hcGknLCBmdW5jdGlvbiAoKSB7XG4gICAgJCgnW2RhdGEtc3B5PVwic2Nyb2xsXCJdJykuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHNweSA9ICQodGhpcylcbiAgICAgIFBsdWdpbi5jYWxsKCRzcHksICRzcHkuZGF0YSgpKVxuICAgIH0pXG4gIH0pXG5cbn0oalF1ZXJ5KTtcblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBCb290c3RyYXA6IHRhYi5qcyB2My4zLjdcbiAqIGh0dHA6Ly9nZXRib290c3RyYXAuY29tL2phdmFzY3JpcHQvI3RhYnNcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29weXJpZ2h0IDIwMTEtMjAxNiBUd2l0dGVyLCBJbmMuXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cblxuK2Z1bmN0aW9uICgkKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBUQUIgQ0xBU1MgREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PVxuXG4gIHZhciBUYWIgPSBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgIC8vIGpzY3M6ZGlzYWJsZSByZXF1aXJlRG9sbGFyQmVmb3JlalF1ZXJ5QXNzaWdubWVudFxuICAgIHRoaXMuZWxlbWVudCA9ICQoZWxlbWVudClcbiAgICAvLyBqc2NzOmVuYWJsZSByZXF1aXJlRG9sbGFyQmVmb3JlalF1ZXJ5QXNzaWdubWVudFxuICB9XG5cbiAgVGFiLlZFUlNJT04gPSAnMy4zLjcnXG5cbiAgVGFiLlRSQU5TSVRJT05fRFVSQVRJT04gPSAxNTBcblxuICBUYWIucHJvdG90eXBlLnNob3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyICR0aGlzICAgID0gdGhpcy5lbGVtZW50XG4gICAgdmFyICR1bCAgICAgID0gJHRoaXMuY2xvc2VzdCgndWw6bm90KC5kcm9wZG93bi1tZW51KScpXG4gICAgdmFyIHNlbGVjdG9yID0gJHRoaXMuZGF0YSgndGFyZ2V0JylcblxuICAgIGlmICghc2VsZWN0b3IpIHtcbiAgICAgIHNlbGVjdG9yID0gJHRoaXMuYXR0cignaHJlZicpXG4gICAgICBzZWxlY3RvciA9IHNlbGVjdG9yICYmIHNlbGVjdG9yLnJlcGxhY2UoLy4qKD89I1teXFxzXSokKS8sICcnKSAvLyBzdHJpcCBmb3IgaWU3XG4gICAgfVxuXG4gICAgaWYgKCR0aGlzLnBhcmVudCgnbGknKS5oYXNDbGFzcygnYWN0aXZlJykpIHJldHVyblxuXG4gICAgdmFyICRwcmV2aW91cyA9ICR1bC5maW5kKCcuYWN0aXZlOmxhc3QgYScpXG4gICAgdmFyIGhpZGVFdmVudCA9ICQuRXZlbnQoJ2hpZGUuYnMudGFiJywge1xuICAgICAgcmVsYXRlZFRhcmdldDogJHRoaXNbMF1cbiAgICB9KVxuICAgIHZhciBzaG93RXZlbnQgPSAkLkV2ZW50KCdzaG93LmJzLnRhYicsIHtcbiAgICAgIHJlbGF0ZWRUYXJnZXQ6ICRwcmV2aW91c1swXVxuICAgIH0pXG5cbiAgICAkcHJldmlvdXMudHJpZ2dlcihoaWRlRXZlbnQpXG4gICAgJHRoaXMudHJpZ2dlcihzaG93RXZlbnQpXG5cbiAgICBpZiAoc2hvd0V2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpIHx8IGhpZGVFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgcmV0dXJuXG5cbiAgICB2YXIgJHRhcmdldCA9ICQoc2VsZWN0b3IpXG5cbiAgICB0aGlzLmFjdGl2YXRlKCR0aGlzLmNsb3Nlc3QoJ2xpJyksICR1bClcbiAgICB0aGlzLmFjdGl2YXRlKCR0YXJnZXQsICR0YXJnZXQucGFyZW50KCksIGZ1bmN0aW9uICgpIHtcbiAgICAgICRwcmV2aW91cy50cmlnZ2VyKHtcbiAgICAgICAgdHlwZTogJ2hpZGRlbi5icy50YWInLFxuICAgICAgICByZWxhdGVkVGFyZ2V0OiAkdGhpc1swXVxuICAgICAgfSlcbiAgICAgICR0aGlzLnRyaWdnZXIoe1xuICAgICAgICB0eXBlOiAnc2hvd24uYnMudGFiJyxcbiAgICAgICAgcmVsYXRlZFRhcmdldDogJHByZXZpb3VzWzBdXG4gICAgICB9KVxuICAgIH0pXG4gIH1cblxuICBUYWIucHJvdG90eXBlLmFjdGl2YXRlID0gZnVuY3Rpb24gKGVsZW1lbnQsIGNvbnRhaW5lciwgY2FsbGJhY2spIHtcbiAgICB2YXIgJGFjdGl2ZSAgICA9IGNvbnRhaW5lci5maW5kKCc+IC5hY3RpdmUnKVxuICAgIHZhciB0cmFuc2l0aW9uID0gY2FsbGJhY2tcbiAgICAgICYmICQuc3VwcG9ydC50cmFuc2l0aW9uXG4gICAgICAmJiAoJGFjdGl2ZS5sZW5ndGggJiYgJGFjdGl2ZS5oYXNDbGFzcygnZmFkZScpIHx8ICEhY29udGFpbmVyLmZpbmQoJz4gLmZhZGUnKS5sZW5ndGgpXG5cbiAgICBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgJGFjdGl2ZVxuICAgICAgICAucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpXG4gICAgICAgIC5maW5kKCc+IC5kcm9wZG93bi1tZW51ID4gLmFjdGl2ZScpXG4gICAgICAgICAgLnJlbW92ZUNsYXNzKCdhY3RpdmUnKVxuICAgICAgICAuZW5kKClcbiAgICAgICAgLmZpbmQoJ1tkYXRhLXRvZ2dsZT1cInRhYlwiXScpXG4gICAgICAgICAgLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCBmYWxzZSlcblxuICAgICAgZWxlbWVudFxuICAgICAgICAuYWRkQ2xhc3MoJ2FjdGl2ZScpXG4gICAgICAgIC5maW5kKCdbZGF0YS10b2dnbGU9XCJ0YWJcIl0nKVxuICAgICAgICAgIC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgdHJ1ZSlcblxuICAgICAgaWYgKHRyYW5zaXRpb24pIHtcbiAgICAgICAgZWxlbWVudFswXS5vZmZzZXRXaWR0aCAvLyByZWZsb3cgZm9yIHRyYW5zaXRpb25cbiAgICAgICAgZWxlbWVudC5hZGRDbGFzcygnaW4nKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWxlbWVudC5yZW1vdmVDbGFzcygnZmFkZScpXG4gICAgICB9XG5cbiAgICAgIGlmIChlbGVtZW50LnBhcmVudCgnLmRyb3Bkb3duLW1lbnUnKS5sZW5ndGgpIHtcbiAgICAgICAgZWxlbWVudFxuICAgICAgICAgIC5jbG9zZXN0KCdsaS5kcm9wZG93bicpXG4gICAgICAgICAgICAuYWRkQ2xhc3MoJ2FjdGl2ZScpXG4gICAgICAgICAgLmVuZCgpXG4gICAgICAgICAgLmZpbmQoJ1tkYXRhLXRvZ2dsZT1cInRhYlwiXScpXG4gICAgICAgICAgICAuYXR0cignYXJpYS1leHBhbmRlZCcsIHRydWUpXG4gICAgICB9XG5cbiAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKClcbiAgICB9XG5cbiAgICAkYWN0aXZlLmxlbmd0aCAmJiB0cmFuc2l0aW9uID9cbiAgICAgICRhY3RpdmVcbiAgICAgICAgLm9uZSgnYnNUcmFuc2l0aW9uRW5kJywgbmV4dClcbiAgICAgICAgLmVtdWxhdGVUcmFuc2l0aW9uRW5kKFRhYi5UUkFOU0lUSU9OX0RVUkFUSU9OKSA6XG4gICAgICBuZXh0KClcblxuICAgICRhY3RpdmUucmVtb3ZlQ2xhc3MoJ2luJylcbiAgfVxuXG5cbiAgLy8gVEFCIFBMVUdJTiBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PVxuXG4gIGZ1bmN0aW9uIFBsdWdpbihvcHRpb24pIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGhpcyA9ICQodGhpcylcbiAgICAgIHZhciBkYXRhICA9ICR0aGlzLmRhdGEoJ2JzLnRhYicpXG5cbiAgICAgIGlmICghZGF0YSkgJHRoaXMuZGF0YSgnYnMudGFiJywgKGRhdGEgPSBuZXcgVGFiKHRoaXMpKSlcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9uID09ICdzdHJpbmcnKSBkYXRhW29wdGlvbl0oKVxuICAgIH0pXG4gIH1cblxuICB2YXIgb2xkID0gJC5mbi50YWJcblxuICAkLmZuLnRhYiAgICAgICAgICAgICA9IFBsdWdpblxuICAkLmZuLnRhYi5Db25zdHJ1Y3RvciA9IFRhYlxuXG5cbiAgLy8gVEFCIE5PIENPTkZMSUNUXG4gIC8vID09PT09PT09PT09PT09PVxuXG4gICQuZm4udGFiLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJC5mbi50YWIgPSBvbGRcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cblxuICAvLyBUQUIgREFUQS1BUElcbiAgLy8gPT09PT09PT09PT09XG5cbiAgdmFyIGNsaWNrSGFuZGxlciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgUGx1Z2luLmNhbGwoJCh0aGlzKSwgJ3Nob3cnKVxuICB9XG5cbiAgJChkb2N1bWVudClcbiAgICAub24oJ2NsaWNrLmJzLnRhYi5kYXRhLWFwaScsICdbZGF0YS10b2dnbGU9XCJ0YWJcIl0nLCBjbGlja0hhbmRsZXIpXG4gICAgLm9uKCdjbGljay5icy50YWIuZGF0YS1hcGknLCAnW2RhdGEtdG9nZ2xlPVwicGlsbFwiXScsIGNsaWNrSGFuZGxlcilcblxufShqUXVlcnkpO1xuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEJvb3RzdHJhcDogYWZmaXguanMgdjMuMy43XG4gKiBodHRwOi8vZ2V0Ym9vdHN0cmFwLmNvbS9qYXZhc2NyaXB0LyNhZmZpeFxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb3B5cmlnaHQgMjAxMS0yMDE2IFR3aXR0ZXIsIEluYy5cbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuXG4rZnVuY3Rpb24gKCQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIEFGRklYIENMQVNTIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PVxuXG4gIHZhciBBZmZpeCA9IGZ1bmN0aW9uIChlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQoe30sIEFmZml4LkRFRkFVTFRTLCBvcHRpb25zKVxuXG4gICAgdGhpcy4kdGFyZ2V0ID0gJCh0aGlzLm9wdGlvbnMudGFyZ2V0KVxuICAgICAgLm9uKCdzY3JvbGwuYnMuYWZmaXguZGF0YS1hcGknLCAkLnByb3h5KHRoaXMuY2hlY2tQb3NpdGlvbiwgdGhpcykpXG4gICAgICAub24oJ2NsaWNrLmJzLmFmZml4LmRhdGEtYXBpJywgICQucHJveHkodGhpcy5jaGVja1Bvc2l0aW9uV2l0aEV2ZW50TG9vcCwgdGhpcykpXG5cbiAgICB0aGlzLiRlbGVtZW50ICAgICA9ICQoZWxlbWVudClcbiAgICB0aGlzLmFmZml4ZWQgICAgICA9IG51bGxcbiAgICB0aGlzLnVucGluICAgICAgICA9IG51bGxcbiAgICB0aGlzLnBpbm5lZE9mZnNldCA9IG51bGxcblxuICAgIHRoaXMuY2hlY2tQb3NpdGlvbigpXG4gIH1cblxuICBBZmZpeC5WRVJTSU9OICA9ICczLjMuNydcblxuICBBZmZpeC5SRVNFVCAgICA9ICdhZmZpeCBhZmZpeC10b3AgYWZmaXgtYm90dG9tJ1xuXG4gIEFmZml4LkRFRkFVTFRTID0ge1xuICAgIG9mZnNldDogMCxcbiAgICB0YXJnZXQ6IHdpbmRvd1xuICB9XG5cbiAgQWZmaXgucHJvdG90eXBlLmdldFN0YXRlID0gZnVuY3Rpb24gKHNjcm9sbEhlaWdodCwgaGVpZ2h0LCBvZmZzZXRUb3AsIG9mZnNldEJvdHRvbSkge1xuICAgIHZhciBzY3JvbGxUb3AgICAgPSB0aGlzLiR0YXJnZXQuc2Nyb2xsVG9wKClcbiAgICB2YXIgcG9zaXRpb24gICAgID0gdGhpcy4kZWxlbWVudC5vZmZzZXQoKVxuICAgIHZhciB0YXJnZXRIZWlnaHQgPSB0aGlzLiR0YXJnZXQuaGVpZ2h0KClcblxuICAgIGlmIChvZmZzZXRUb3AgIT0gbnVsbCAmJiB0aGlzLmFmZml4ZWQgPT0gJ3RvcCcpIHJldHVybiBzY3JvbGxUb3AgPCBvZmZzZXRUb3AgPyAndG9wJyA6IGZhbHNlXG5cbiAgICBpZiAodGhpcy5hZmZpeGVkID09ICdib3R0b20nKSB7XG4gICAgICBpZiAob2Zmc2V0VG9wICE9IG51bGwpIHJldHVybiAoc2Nyb2xsVG9wICsgdGhpcy51bnBpbiA8PSBwb3NpdGlvbi50b3ApID8gZmFsc2UgOiAnYm90dG9tJ1xuICAgICAgcmV0dXJuIChzY3JvbGxUb3AgKyB0YXJnZXRIZWlnaHQgPD0gc2Nyb2xsSGVpZ2h0IC0gb2Zmc2V0Qm90dG9tKSA/IGZhbHNlIDogJ2JvdHRvbSdcbiAgICB9XG5cbiAgICB2YXIgaW5pdGlhbGl6aW5nICAgPSB0aGlzLmFmZml4ZWQgPT0gbnVsbFxuICAgIHZhciBjb2xsaWRlclRvcCAgICA9IGluaXRpYWxpemluZyA/IHNjcm9sbFRvcCA6IHBvc2l0aW9uLnRvcFxuICAgIHZhciBjb2xsaWRlckhlaWdodCA9IGluaXRpYWxpemluZyA/IHRhcmdldEhlaWdodCA6IGhlaWdodFxuXG4gICAgaWYgKG9mZnNldFRvcCAhPSBudWxsICYmIHNjcm9sbFRvcCA8PSBvZmZzZXRUb3ApIHJldHVybiAndG9wJ1xuICAgIGlmIChvZmZzZXRCb3R0b20gIT0gbnVsbCAmJiAoY29sbGlkZXJUb3AgKyBjb2xsaWRlckhlaWdodCA+PSBzY3JvbGxIZWlnaHQgLSBvZmZzZXRCb3R0b20pKSByZXR1cm4gJ2JvdHRvbSdcblxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgQWZmaXgucHJvdG90eXBlLmdldFBpbm5lZE9mZnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5waW5uZWRPZmZzZXQpIHJldHVybiB0aGlzLnBpbm5lZE9mZnNldFxuICAgIHRoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3MoQWZmaXguUkVTRVQpLmFkZENsYXNzKCdhZmZpeCcpXG4gICAgdmFyIHNjcm9sbFRvcCA9IHRoaXMuJHRhcmdldC5zY3JvbGxUb3AoKVxuICAgIHZhciBwb3NpdGlvbiAgPSB0aGlzLiRlbGVtZW50Lm9mZnNldCgpXG4gICAgcmV0dXJuICh0aGlzLnBpbm5lZE9mZnNldCA9IHBvc2l0aW9uLnRvcCAtIHNjcm9sbFRvcClcbiAgfVxuXG4gIEFmZml4LnByb3RvdHlwZS5jaGVja1Bvc2l0aW9uV2l0aEV2ZW50TG9vcCA9IGZ1bmN0aW9uICgpIHtcbiAgICBzZXRUaW1lb3V0KCQucHJveHkodGhpcy5jaGVja1Bvc2l0aW9uLCB0aGlzKSwgMSlcbiAgfVxuXG4gIEFmZml4LnByb3RvdHlwZS5jaGVja1Bvc2l0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghdGhpcy4kZWxlbWVudC5pcygnOnZpc2libGUnKSkgcmV0dXJuXG5cbiAgICB2YXIgaGVpZ2h0ICAgICAgID0gdGhpcy4kZWxlbWVudC5oZWlnaHQoKVxuICAgIHZhciBvZmZzZXQgICAgICAgPSB0aGlzLm9wdGlvbnMub2Zmc2V0XG4gICAgdmFyIG9mZnNldFRvcCAgICA9IG9mZnNldC50b3BcbiAgICB2YXIgb2Zmc2V0Qm90dG9tID0gb2Zmc2V0LmJvdHRvbVxuICAgIHZhciBzY3JvbGxIZWlnaHQgPSBNYXRoLm1heCgkKGRvY3VtZW50KS5oZWlnaHQoKSwgJChkb2N1bWVudC5ib2R5KS5oZWlnaHQoKSlcblxuICAgIGlmICh0eXBlb2Ygb2Zmc2V0ICE9ICdvYmplY3QnKSAgICAgICAgIG9mZnNldEJvdHRvbSA9IG9mZnNldFRvcCA9IG9mZnNldFxuICAgIGlmICh0eXBlb2Ygb2Zmc2V0VG9wID09ICdmdW5jdGlvbicpICAgIG9mZnNldFRvcCAgICA9IG9mZnNldC50b3AodGhpcy4kZWxlbWVudClcbiAgICBpZiAodHlwZW9mIG9mZnNldEJvdHRvbSA9PSAnZnVuY3Rpb24nKSBvZmZzZXRCb3R0b20gPSBvZmZzZXQuYm90dG9tKHRoaXMuJGVsZW1lbnQpXG5cbiAgICB2YXIgYWZmaXggPSB0aGlzLmdldFN0YXRlKHNjcm9sbEhlaWdodCwgaGVpZ2h0LCBvZmZzZXRUb3AsIG9mZnNldEJvdHRvbSlcblxuICAgIGlmICh0aGlzLmFmZml4ZWQgIT0gYWZmaXgpIHtcbiAgICAgIGlmICh0aGlzLnVucGluICE9IG51bGwpIHRoaXMuJGVsZW1lbnQuY3NzKCd0b3AnLCAnJylcblxuICAgICAgdmFyIGFmZml4VHlwZSA9ICdhZmZpeCcgKyAoYWZmaXggPyAnLScgKyBhZmZpeCA6ICcnKVxuICAgICAgdmFyIGUgICAgICAgICA9ICQuRXZlbnQoYWZmaXhUeXBlICsgJy5icy5hZmZpeCcpXG5cbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcihlKVxuXG4gICAgICBpZiAoZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgcmV0dXJuXG5cbiAgICAgIHRoaXMuYWZmaXhlZCA9IGFmZml4XG4gICAgICB0aGlzLnVucGluID0gYWZmaXggPT0gJ2JvdHRvbScgPyB0aGlzLmdldFBpbm5lZE9mZnNldCgpIDogbnVsbFxuXG4gICAgICB0aGlzLiRlbGVtZW50XG4gICAgICAgIC5yZW1vdmVDbGFzcyhBZmZpeC5SRVNFVClcbiAgICAgICAgLmFkZENsYXNzKGFmZml4VHlwZSlcbiAgICAgICAgLnRyaWdnZXIoYWZmaXhUeXBlLnJlcGxhY2UoJ2FmZml4JywgJ2FmZml4ZWQnKSArICcuYnMuYWZmaXgnKVxuICAgIH1cblxuICAgIGlmIChhZmZpeCA9PSAnYm90dG9tJykge1xuICAgICAgdGhpcy4kZWxlbWVudC5vZmZzZXQoe1xuICAgICAgICB0b3A6IHNjcm9sbEhlaWdodCAtIGhlaWdodCAtIG9mZnNldEJvdHRvbVxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuXG4gIC8vIEFGRklYIFBMVUdJTiBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgZnVuY3Rpb24gUGx1Z2luKG9wdGlvbikge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICR0aGlzICAgPSAkKHRoaXMpXG4gICAgICB2YXIgZGF0YSAgICA9ICR0aGlzLmRhdGEoJ2JzLmFmZml4JylcbiAgICAgIHZhciBvcHRpb25zID0gdHlwZW9mIG9wdGlvbiA9PSAnb2JqZWN0JyAmJiBvcHRpb25cblxuICAgICAgaWYgKCFkYXRhKSAkdGhpcy5kYXRhKCdicy5hZmZpeCcsIChkYXRhID0gbmV3IEFmZml4KHRoaXMsIG9wdGlvbnMpKSlcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9uID09ICdzdHJpbmcnKSBkYXRhW29wdGlvbl0oKVxuICAgIH0pXG4gIH1cblxuICB2YXIgb2xkID0gJC5mbi5hZmZpeFxuXG4gICQuZm4uYWZmaXggICAgICAgICAgICAgPSBQbHVnaW5cbiAgJC5mbi5hZmZpeC5Db25zdHJ1Y3RvciA9IEFmZml4XG5cblxuICAvLyBBRkZJWCBOTyBDT05GTElDVFxuICAvLyA9PT09PT09PT09PT09PT09PVxuXG4gICQuZm4uYWZmaXgubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuLmFmZml4ID0gb2xkXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG5cbiAgLy8gQUZGSVggREFUQS1BUElcbiAgLy8gPT09PT09PT09PT09PT1cblxuICAkKHdpbmRvdykub24oJ2xvYWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgJCgnW2RhdGEtc3B5PVwiYWZmaXhcIl0nKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkc3B5ID0gJCh0aGlzKVxuICAgICAgdmFyIGRhdGEgPSAkc3B5LmRhdGEoKVxuXG4gICAgICBkYXRhLm9mZnNldCA9IGRhdGEub2Zmc2V0IHx8IHt9XG5cbiAgICAgIGlmIChkYXRhLm9mZnNldEJvdHRvbSAhPSBudWxsKSBkYXRhLm9mZnNldC5ib3R0b20gPSBkYXRhLm9mZnNldEJvdHRvbVxuICAgICAgaWYgKGRhdGEub2Zmc2V0VG9wICAgICE9IG51bGwpIGRhdGEub2Zmc2V0LnRvcCAgICA9IGRhdGEub2Zmc2V0VG9wXG5cbiAgICAgIFBsdWdpbi5jYWxsKCRzcHksIGRhdGEpXG4gICAgfSlcbiAgfSlcblxufShqUXVlcnkpO1xuIiwiLyoqXG4gKiBqcXVlcnkubWFzay5qc1xuICogQHZlcnNpb246IHYxLjE0LjExXG4gKiBAYXV0aG9yOiBJZ29yIEVzY29iYXJcbiAqXG4gKiBDcmVhdGVkIGJ5IElnb3IgRXNjb2JhciBvbiAyMDEyLTAzLTEwLiBQbGVhc2UgcmVwb3J0IGFueSBidWcgYXQgaHR0cDovL2Jsb2cuaWdvcmVzY29iYXIuY29tXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEyIElnb3IgRXNjb2JhciBodHRwOi8vYmxvZy5pZ29yZXNjb2Jhci5jb21cbiAqXG4gKiBUaGUgTUlUIExpY2Vuc2UgKGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwKVxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uXG4gKiBvYnRhaW5pbmcgYSBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvblxuICogZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0XG4gKiByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSxcbiAqIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGVcbiAqIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nXG4gKiBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlXG4gKiBpbmNsdWRlZCBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELFxuICogRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTXG4gKiBPRiBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORFxuICogTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFRcbiAqIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLFxuICogV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HXG4gKiBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SXG4gKiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG4gKi9cblxuLyoganNoaW50IGxheGJyZWFrOiB0cnVlICovXG4vKiBqc2hpbnQgbWF4Y29tcGxleGl0eToxNyAqL1xuLyogZ2xvYmFsIGRlZmluZSAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8vIFVNRCAoVW5pdmVyc2FsIE1vZHVsZSBEZWZpbml0aW9uKSBwYXR0ZXJucyBmb3IgSmF2YVNjcmlwdCBtb2R1bGVzIHRoYXQgd29yayBldmVyeXdoZXJlLlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3VtZGpzL3VtZC9ibG9iL21hc3Rlci9qcXVlcnlQbHVnaW5Db21tb25qcy5qc1xuKGZ1bmN0aW9uIChmYWN0b3J5LCBqUXVlcnksIFplcHRvKSB7XG5cbiAgICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgICAgIGRlZmluZShbJ2pxdWVyeSddLCBmYWN0b3J5KTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jykge1xuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZSgnanF1ZXJ5JykpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGZhY3RvcnkoalF1ZXJ5IHx8IFplcHRvKTtcbiAgICB9XG5cbn0oZnVuY3Rpb24gKCQpIHtcblxuICAgIHZhciBNYXNrID0gZnVuY3Rpb24gKGVsLCBtYXNrLCBvcHRpb25zKSB7XG5cbiAgICAgICAgdmFyIHAgPSB7XG4gICAgICAgICAgICBpbnZhbGlkOiBbXSxcbiAgICAgICAgICAgIGdldENhcmV0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNlbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcyA9IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBjdHJsID0gZWwuZ2V0KDApLFxuICAgICAgICAgICAgICAgICAgICAgICAgZFNlbCA9IGRvY3VtZW50LnNlbGVjdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNTZWxTdGFydCA9IGN0cmwuc2VsZWN0aW9uU3RhcnQ7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gSUUgU3VwcG9ydFxuICAgICAgICAgICAgICAgICAgICBpZiAoZFNlbCAmJiBuYXZpZ2F0b3IuYXBwVmVyc2lvbi5pbmRleE9mKCdNU0lFIDEwJykgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWwgPSBkU2VsLmNyZWF0ZVJhbmdlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWwubW92ZVN0YXJ0KCdjaGFyYWN0ZXInLCAtcC52YWwoKS5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9zID0gc2VsLnRleHQubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIEZpcmVmb3ggc3VwcG9ydFxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChjU2VsU3RhcnQgfHwgY1NlbFN0YXJ0ID09PSAnMCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcyA9IGNTZWxTdGFydDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwb3M7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXRDYXJldDogZnVuY3Rpb24ocG9zKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVsLmlzKCc6Zm9jdXMnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJhbmdlLCBjdHJsID0gZWwuZ2V0KDApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBGaXJlZm94LCBXZWJLaXQsIGV0Yy4uXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3RybC5zZXRTZWxlY3Rpb25SYW5nZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0cmwuc2V0U2VsZWN0aW9uUmFuZ2UocG9zLCBwb3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsgLy8gSUVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5nZSA9IGN0cmwuY3JlYXRlVGV4dFJhbmdlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2UuY29sbGFwc2UodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2UubW92ZUVuZCgnY2hhcmFjdGVyJywgcG9zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5nZS5tb3ZlU3RhcnQoJ2NoYXJhY3RlcicsIHBvcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2Uuc2VsZWN0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGV2ZW50czogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgZWxcbiAgICAgICAgICAgICAgICAub24oJ2tleWRvd24ubWFzaycsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZWwuZGF0YSgnbWFzay1rZXljb2RlJywgZS5rZXlDb2RlIHx8IGUud2hpY2gpO1xuICAgICAgICAgICAgICAgICAgICBlbC5kYXRhKCdtYXNrLXByZXZpdXMtdmFsdWUnLCBlbC52YWwoKSk7XG4gICAgICAgICAgICAgICAgICAgIGVsLmRhdGEoJ21hc2stcHJldml1cy1jYXJldC1wb3MnLCBwLmdldENhcmV0KCkpO1xuICAgICAgICAgICAgICAgICAgICBwLm1hc2tEaWdpdFBvc01hcE9sZCA9IHAubWFza0RpZ2l0UG9zTWFwO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLm9uKCQuak1hc2tHbG9iYWxzLnVzZUlucHV0ID8gJ2lucHV0Lm1hc2snIDogJ2tleXVwLm1hc2snLCBwLmJlaGF2aW91cilcbiAgICAgICAgICAgICAgICAub24oJ3Bhc3RlLm1hc2sgZHJvcC5tYXNrJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbC5rZXlkb3duKCkua2V5dXAoKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgMTAwKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5vbignY2hhbmdlLm1hc2snLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICBlbC5kYXRhKCdjaGFuZ2VkJywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAub24oJ2JsdXIubWFzaycsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvbGRWYWx1ZSAhPT0gcC52YWwoKSAmJiAhZWwuZGF0YSgnY2hhbmdlZCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbC50cmlnZ2VyKCdjaGFuZ2UnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbC5kYXRhKCdjaGFuZ2VkJywgZmFsc2UpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLy8gaXQncyB2ZXJ5IGltcG9ydGFudCB0aGF0IHRoaXMgY2FsbGJhY2sgcmVtYWlucyBpbiB0aGlzIHBvc2l0aW9uXG4gICAgICAgICAgICAgICAgLy8gb3RoZXJ3aGlzZSBvbGRWYWx1ZSBpdCdzIGdvaW5nIHRvIHdvcmsgYnVnZ3lcbiAgICAgICAgICAgICAgICAub24oJ2JsdXIubWFzaycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBvbGRWYWx1ZSA9IHAudmFsKCk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAvLyBzZWxlY3QgYWxsIHRleHQgb24gZm9jdXNcbiAgICAgICAgICAgICAgICAub24oJ2ZvY3VzLm1hc2snLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5zZWxlY3RPbkZvY3VzID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKGUudGFyZ2V0KS5zZWxlY3QoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLy8gY2xlYXIgdGhlIHZhbHVlIGlmIGl0IG5vdCBjb21wbGV0ZSB0aGUgbWFza1xuICAgICAgICAgICAgICAgIC5vbignZm9jdXNvdXQubWFzaycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5jbGVhcklmTm90TWF0Y2ggJiYgIXJlZ2V4TWFzay50ZXN0KHAudmFsKCkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgIHAudmFsKCcnKTtcbiAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0UmVnZXhNYXNrOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgbWFza0NodW5rcyA9IFtdLCB0cmFuc2xhdGlvbiwgcGF0dGVybiwgb3B0aW9uYWwsIHJlY3Vyc2l2ZSwgb1JlY3Vyc2l2ZSwgcjtcblxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWFzay5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGlvbiA9IGpNYXNrLnRyYW5zbGF0aW9uW21hc2suY2hhckF0KGkpXTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAodHJhbnNsYXRpb24pIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcGF0dGVybiA9IHRyYW5zbGF0aW9uLnBhdHRlcm4udG9TdHJpbmcoKS5yZXBsYWNlKC8uezF9JHxeLnsxfS9nLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25hbCA9IHRyYW5zbGF0aW9uLm9wdGlvbmFsO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVjdXJzaXZlID0gdHJhbnNsYXRpb24ucmVjdXJzaXZlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVjdXJzaXZlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFza0NodW5rcy5wdXNoKG1hc2suY2hhckF0KGkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvUmVjdXJzaXZlID0ge2RpZ2l0OiBtYXNrLmNoYXJBdChpKSwgcGF0dGVybjogcGF0dGVybn07XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tDaHVua3MucHVzaCghb3B0aW9uYWwgJiYgIXJlY3Vyc2l2ZSA/IHBhdHRlcm4gOiAocGF0dGVybiArICc/JykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXNrQ2h1bmtzLnB1c2gobWFzay5jaGFyQXQoaSkucmVwbGFjZSgvWy1cXC9cXFxcXiQqKz8uKCl8W1xcXXt9XS9nLCAnXFxcXCQmJykpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgciA9IG1hc2tDaHVua3Muam9pbignJyk7XG5cbiAgICAgICAgICAgICAgICBpZiAob1JlY3Vyc2l2ZSkge1xuICAgICAgICAgICAgICAgICAgICByID0gci5yZXBsYWNlKG5ldyBSZWdFeHAoJygnICsgb1JlY3Vyc2l2ZS5kaWdpdCArICcoLionICsgb1JlY3Vyc2l2ZS5kaWdpdCArICcpPyknKSwgJygkMSk/JylcbiAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZShuZXcgUmVnRXhwKG9SZWN1cnNpdmUuZGlnaXQsICdnJyksIG9SZWN1cnNpdmUucGF0dGVybik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAocik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGVzdHJveUV2ZW50czogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgZWwub2ZmKFsnaW5wdXQnLCAna2V5ZG93bicsICdrZXl1cCcsICdwYXN0ZScsICdkcm9wJywgJ2JsdXInLCAnZm9jdXNvdXQnLCAnJ10uam9pbignLm1hc2sgJykpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHZhbDogZnVuY3Rpb24odikge1xuICAgICAgICAgICAgICAgIHZhciBpc0lucHV0ID0gZWwuaXMoJ2lucHV0JyksXG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZCA9IGlzSW5wdXQgPyAndmFsJyA6ICd0ZXh0JyxcbiAgICAgICAgICAgICAgICAgICAgcjtcblxuICAgICAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZWxbbWV0aG9kXSgpICE9PSB2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbFttZXRob2RdKHYpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHIgPSBlbDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByID0gZWxbbWV0aG9kXSgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiByO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNhbGN1bGF0ZUNhcmV0UG9zaXRpb246IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciBvbGRWYWwgPSBlbC5kYXRhKCdtYXNrLXByZXZpdXMtdmFsdWUnKSB8fCAnJyxcbiAgICAgICAgICAgICAgICAgICAgbmV3VmFsID0gcC5nZXRNYXNrZWQoKSxcbiAgICAgICAgICAgICAgICAgICAgY2FyZXRQb3NOZXcgPSBwLmdldENhcmV0KCk7XG4gICAgICAgICAgICAgICAgaWYgKG9sZFZhbCAhPT0gbmV3VmFsKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjYXJldFBvc09sZCA9IGVsLmRhdGEoJ21hc2stcHJldml1cy1jYXJldC1wb3MnKSB8fCAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3VmFsTCA9IG5ld1ZhbC5sZW5ndGgsXG4gICAgICAgICAgICAgICAgICAgICAgICBvbGRWYWxMID0gb2xkVmFsLmxlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tEaWdpdHNCZWZvcmVDYXJldCA9IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXNrRGlnaXRzQWZ0ZXJDYXJldCA9IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXNrRGlnaXRzQmVmb3JlQ2FyZXRBbGwgPSAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWFza0RpZ2l0c0JlZm9yZUNhcmV0QWxsT2xkID0gMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGkgPSAwO1xuXG4gICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IGNhcmV0UG9zTmV3OyBpIDwgbmV3VmFsTDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXAubWFza0RpZ2l0UG9zTWFwW2ldKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXNrRGlnaXRzQWZ0ZXJDYXJldCsrO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gY2FyZXRQb3NOZXcgLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFwLm1hc2tEaWdpdFBvc01hcFtpXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbWFza0RpZ2l0c0JlZm9yZUNhcmV0Kys7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSBjYXJldFBvc05ldyAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocC5tYXNrRGlnaXRQb3NNYXBbaV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXNrRGlnaXRzQmVmb3JlQ2FyZXRBbGwrKztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IGNhcmV0UG9zT2xkIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwLm1hc2tEaWdpdFBvc01hcE9sZFtpXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tEaWdpdHNCZWZvcmVDYXJldEFsbE9sZCsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNhcmV0UG9zTmV3ID4gb2xkVmFsTCkge1xuICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBjdXJzb3IgaXMgYXQgdGhlIGVuZCBrZWVwIGl0IHRoZXJlXG4gICAgICAgICAgICAgICAgICAgICAgY2FyZXRQb3NOZXcgPSBuZXdWYWxMO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGNhcmV0UG9zT2xkID49IGNhcmV0UG9zTmV3ICYmIGNhcmV0UG9zT2xkICE9PSBvbGRWYWxMKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXAubWFza0RpZ2l0UG9zTWFwT2xkW2NhcmV0UG9zTmV3XSkgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNhcmV0UG9zID0gY2FyZXRQb3NOZXc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0UG9zTmV3IC09IG1hc2tEaWdpdHNCZWZvcmVDYXJldEFsbE9sZCAtIG1hc2tEaWdpdHNCZWZvcmVDYXJldEFsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXRQb3NOZXcgLT0gbWFza0RpZ2l0c0JlZm9yZUNhcmV0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocC5tYXNrRGlnaXRQb3NNYXBbY2FyZXRQb3NOZXddKSAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0UG9zTmV3ID0gY2FyZXRQb3M7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChjYXJldFBvc05ldyA+IGNhcmV0UG9zT2xkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXJldFBvc05ldyArPSBtYXNrRGlnaXRzQmVmb3JlQ2FyZXRBbGwgLSBtYXNrRGlnaXRzQmVmb3JlQ2FyZXRBbGxPbGQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXJldFBvc05ldyArPSBtYXNrRGlnaXRzQWZ0ZXJDYXJldDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gY2FyZXRQb3NOZXc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYmVoYXZpb3VyOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgZSA9IGUgfHwgd2luZG93LmV2ZW50O1xuICAgICAgICAgICAgICAgIHAuaW52YWxpZCA9IFtdO1xuXG4gICAgICAgICAgICAgICAgdmFyIGtleUNvZGUgPSBlbC5kYXRhKCdtYXNrLWtleWNvZGUnKTtcblxuICAgICAgICAgICAgICAgIGlmICgkLmluQXJyYXkoa2V5Q29kZSwgak1hc2suYnlQYXNzS2V5cykgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXdWYWwgICA9IHAuZ2V0TWFza2VkKCksXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXJldFBvcyA9IHAuZ2V0Q2FyZXQoKTtcblxuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgIHAuc2V0Q2FyZXQocC5jYWxjdWxhdGVDYXJldFBvc2l0aW9uKCkpO1xuICAgICAgICAgICAgICAgICAgICB9LCAxMCk7XG5cbiAgICAgICAgICAgICAgICAgICAgcC52YWwobmV3VmFsKTtcbiAgICAgICAgICAgICAgICAgICAgcC5zZXRDYXJldChjYXJldFBvcyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwLmNhbGxiYWNrcyhlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0TWFza2VkOiBmdW5jdGlvbihza2lwTWFza0NoYXJzLCB2YWwpIHtcbiAgICAgICAgICAgICAgICB2YXIgYnVmID0gW10sXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsID09PSB1bmRlZmluZWQgPyBwLnZhbCgpIDogdmFsICsgJycsXG4gICAgICAgICAgICAgICAgICAgIG0gPSAwLCBtYXNrTGVuID0gbWFzay5sZW5ndGgsXG4gICAgICAgICAgICAgICAgICAgIHYgPSAwLCB2YWxMZW4gPSB2YWx1ZS5sZW5ndGgsXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IDEsIGFkZE1ldGhvZCA9ICdwdXNoJyxcbiAgICAgICAgICAgICAgICAgICAgcmVzZXRQb3MgPSAtMSxcbiAgICAgICAgICAgICAgICAgICAgbWFza0RpZ2l0Q291bnQgPSAwLFxuICAgICAgICAgICAgICAgICAgICBtYXNrRGlnaXRQb3NBcnIgPSBbXSxcbiAgICAgICAgICAgICAgICAgICAgbGFzdE1hc2tDaGFyLFxuICAgICAgICAgICAgICAgICAgICBjaGVjaztcblxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnJldmVyc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgYWRkTWV0aG9kID0gJ3Vuc2hpZnQnO1xuICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSAtMTtcbiAgICAgICAgICAgICAgICAgICAgbGFzdE1hc2tDaGFyID0gMDtcbiAgICAgICAgICAgICAgICAgICAgbSA9IG1hc2tMZW4gLSAxO1xuICAgICAgICAgICAgICAgICAgICB2ID0gdmFsTGVuIC0gMTtcbiAgICAgICAgICAgICAgICAgICAgY2hlY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbSA+IC0xICYmIHYgPiAtMTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBsYXN0TWFza0NoYXIgPSBtYXNrTGVuIC0gMTtcbiAgICAgICAgICAgICAgICAgICAgY2hlY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbSA8IG1hc2tMZW4gJiYgdiA8IHZhbExlbjtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgbGFzdFVudHJhbnNsYXRlZE1hc2tDaGFyO1xuICAgICAgICAgICAgICAgIHdoaWxlIChjaGVjaygpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXNrRGlnaXQgPSBtYXNrLmNoYXJBdChtKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbERpZ2l0ID0gdmFsdWUuY2hhckF0KHYpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRpb24gPSBqTWFzay50cmFuc2xhdGlvblttYXNrRGlnaXRdO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0cmFuc2xhdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbERpZ2l0Lm1hdGNoKHRyYW5zbGF0aW9uLnBhdHRlcm4pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVmW2FkZE1ldGhvZF0odmFsRGlnaXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHJhbnNsYXRpb24ucmVjdXJzaXZlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNldFBvcyA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc2V0UG9zID0gbTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtID09PSBsYXN0TWFza0NoYXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0gPSByZXNldFBvcyAtIG9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXN0TWFza0NoYXIgPT09IHJlc2V0UG9zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtIC09IG9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtICs9IG9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodmFsRGlnaXQgPT09IGxhc3RVbnRyYW5zbGF0ZWRNYXNrQ2hhcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG1hdGNoZWQgdGhlIGxhc3QgdW50cmFuc2xhdGVkIChyYXcpIG1hc2sgY2hhcmFjdGVyIHRoYXQgd2UgZW5jb3VudGVyZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBsaWtlbHkgYW4gaW5zZXJ0IG9mZnNldCB0aGUgbWFzayBjaGFyYWN0ZXIgZnJvbSB0aGUgbGFzdCBlbnRyeTsgZmFsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRocm91Z2ggYW5kIG9ubHkgaW5jcmVtZW50IHZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXNrRGlnaXRDb3VudC0tO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RVbnRyYW5zbGF0ZWRNYXNrQ2hhciA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHJhbnNsYXRpb24ub3B0aW9uYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtICs9IG9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2IC09IG9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHJhbnNsYXRpb24uZmFsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWZbYWRkTWV0aG9kXSh0cmFuc2xhdGlvbi5mYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSArPSBvZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdiAtPSBvZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBwLmludmFsaWQucHVzaCh7cDogdiwgdjogdmFsRGlnaXQsIGU6IHRyYW5zbGF0aW9uLnBhdHRlcm59KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHYgKz0gb2Zmc2V0O1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFza2lwTWFza0NoYXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVmW2FkZE1ldGhvZF0obWFza0RpZ2l0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbERpZ2l0ID09PSBtYXNrRGlnaXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXNrRGlnaXRQb3NBcnIucHVzaCh2KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ICs9IG9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdFVudHJhbnNsYXRlZE1hc2tDaGFyID0gbWFza0RpZ2l0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tEaWdpdFBvc0Fyci5wdXNoKHYgKyBtYXNrRGlnaXRDb3VudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFza0RpZ2l0Q291bnQrKztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgbSArPSBvZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgbGFzdE1hc2tDaGFyRGlnaXQgPSBtYXNrLmNoYXJBdChsYXN0TWFza0NoYXIpO1xuICAgICAgICAgICAgICAgIGlmIChtYXNrTGVuID09PSB2YWxMZW4gKyAxICYmICFqTWFzay50cmFuc2xhdGlvbltsYXN0TWFza0NoYXJEaWdpdF0pIHtcbiAgICAgICAgICAgICAgICAgICAgYnVmLnB1c2gobGFzdE1hc2tDaGFyRGlnaXQpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBuZXdWYWwgPSBidWYuam9pbignJyk7XG4gICAgICAgICAgICAgICAgcC5tYXBNYXNrZGlnaXRQb3NpdGlvbnMobmV3VmFsLCBtYXNrRGlnaXRQb3NBcnIsIHZhbExlbik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ld1ZhbDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBtYXBNYXNrZGlnaXRQb3NpdGlvbnM6IGZ1bmN0aW9uKG5ld1ZhbCwgbWFza0RpZ2l0UG9zQXJyLCB2YWxMZW4pIHtcbiAgICAgICAgICAgICAgdmFyIG1hc2tEaWZmID0gb3B0aW9ucy5yZXZlcnNlID8gbmV3VmFsLmxlbmd0aCAtIHZhbExlbiA6IDA7XG4gICAgICAgICAgICAgIHAubWFza0RpZ2l0UG9zTWFwID0ge307XG4gICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWFza0RpZ2l0UG9zQXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgcC5tYXNrRGlnaXRQb3NNYXBbbWFza0RpZ2l0UG9zQXJyW2ldICsgbWFza0RpZmZdID0gMTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNhbGxiYWNrczogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdmFsID0gcC52YWwoKSxcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlZCA9IHZhbCAhPT0gb2xkVmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHRBcmdzID0gW3ZhbCwgZSwgZWwsIG9wdGlvbnNdLFxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayA9IGZ1bmN0aW9uKG5hbWUsIGNyaXRlcmlhLCBhcmdzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnNbbmFtZV0gPT09ICdmdW5jdGlvbicgJiYgY3JpdGVyaWEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zW25hbWVdLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgY2FsbGJhY2soJ29uQ2hhbmdlJywgY2hhbmdlZCA9PT0gdHJ1ZSwgZGVmYXVsdEFyZ3MpO1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCdvbktleVByZXNzJywgY2hhbmdlZCA9PT0gdHJ1ZSwgZGVmYXVsdEFyZ3MpO1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCdvbkNvbXBsZXRlJywgdmFsLmxlbmd0aCA9PT0gbWFzay5sZW5ndGgsIGRlZmF1bHRBcmdzKTtcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygnb25JbnZhbGlkJywgcC5pbnZhbGlkLmxlbmd0aCA+IDAsIFt2YWwsIGUsIGVsLCBwLmludmFsaWQsIG9wdGlvbnNdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBlbCA9ICQoZWwpO1xuICAgICAgICB2YXIgak1hc2sgPSB0aGlzLCBvbGRWYWx1ZSA9IHAudmFsKCksIHJlZ2V4TWFzaztcblxuICAgICAgICBtYXNrID0gdHlwZW9mIG1hc2sgPT09ICdmdW5jdGlvbicgPyBtYXNrKHAudmFsKCksIHVuZGVmaW5lZCwgZWwsICBvcHRpb25zKSA6IG1hc2s7XG5cbiAgICAgICAgLy8gcHVibGljIG1ldGhvZHNcbiAgICAgICAgak1hc2subWFzayA9IG1hc2s7XG4gICAgICAgIGpNYXNrLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICBqTWFzay5yZW1vdmUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBjYXJldCA9IHAuZ2V0Q2FyZXQoKTtcbiAgICAgICAgICAgIHAuZGVzdHJveUV2ZW50cygpO1xuICAgICAgICAgICAgcC52YWwoak1hc2suZ2V0Q2xlYW5WYWwoKSk7XG4gICAgICAgICAgICBwLnNldENhcmV0KGNhcmV0KTtcbiAgICAgICAgICAgIHJldHVybiBlbDtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBnZXQgdmFsdWUgd2l0aG91dCBtYXNrXG4gICAgICAgIGpNYXNrLmdldENsZWFuVmFsID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgIHJldHVybiBwLmdldE1hc2tlZCh0cnVlKTtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBnZXQgbWFza2VkIHZhbHVlIHdpdGhvdXQgdGhlIHZhbHVlIGJlaW5nIGluIHRoZSBpbnB1dCBvciBlbGVtZW50XG4gICAgICAgIGpNYXNrLmdldE1hc2tlZFZhbCA9IGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICAgICByZXR1cm4gcC5nZXRNYXNrZWQoZmFsc2UsIHZhbCk7XG4gICAgICAgIH07XG5cbiAgICAgICBqTWFzay5pbml0ID0gZnVuY3Rpb24ob25seU1hc2spIHtcbiAgICAgICAgICAgIG9ubHlNYXNrID0gb25seU1hc2sgfHwgZmFsc2U7XG4gICAgICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgICAgICAgICAgak1hc2suY2xlYXJJZk5vdE1hdGNoICA9ICQuak1hc2tHbG9iYWxzLmNsZWFySWZOb3RNYXRjaDtcbiAgICAgICAgICAgIGpNYXNrLmJ5UGFzc0tleXMgICAgICAgPSAkLmpNYXNrR2xvYmFscy5ieVBhc3NLZXlzO1xuICAgICAgICAgICAgak1hc2sudHJhbnNsYXRpb24gICAgICA9ICQuZXh0ZW5kKHt9LCAkLmpNYXNrR2xvYmFscy50cmFuc2xhdGlvbiwgb3B0aW9ucy50cmFuc2xhdGlvbik7XG5cbiAgICAgICAgICAgIGpNYXNrID0gJC5leHRlbmQodHJ1ZSwge30sIGpNYXNrLCBvcHRpb25zKTtcblxuICAgICAgICAgICAgcmVnZXhNYXNrID0gcC5nZXRSZWdleE1hc2soKTtcblxuICAgICAgICAgICAgaWYgKG9ubHlNYXNrKSB7XG4gICAgICAgICAgICAgICAgcC5ldmVudHMoKTtcbiAgICAgICAgICAgICAgICBwLnZhbChwLmdldE1hc2tlZCgpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMucGxhY2Vob2xkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgZWwuYXR0cigncGxhY2Vob2xkZXInICwgb3B0aW9ucy5wbGFjZWhvbGRlcik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gdGhpcyBpcyBuZWNlc3NhcnksIG90aGVyd2lzZSBpZiB0aGUgdXNlciBzdWJtaXQgdGhlIGZvcm1cbiAgICAgICAgICAgICAgICAvLyBhbmQgdGhlbiBwcmVzcyB0aGUgXCJiYWNrXCIgYnV0dG9uLCB0aGUgYXV0b2NvbXBsZXRlIHdpbGwgZXJhc2VcbiAgICAgICAgICAgICAgICAvLyB0aGUgZGF0YS4gV29ya3MgZmluZSBvbiBJRTkrLCBGRiwgT3BlcmEsIFNhZmFyaS5cbiAgICAgICAgICAgICAgICBpZiAoZWwuZGF0YSgnbWFzaycpKSB7XG4gICAgICAgICAgICAgICAgICBlbC5hdHRyKCdhdXRvY29tcGxldGUnLCAnb2ZmJyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gZGV0ZWN0IGlmIGlzIG5lY2Vzc2FyeSBsZXQgdGhlIHVzZXIgdHlwZSBmcmVlbHkuXG4gICAgICAgICAgICAgICAgLy8gZm9yIGlzIGEgbG90IGZhc3RlciB0aGFuIGZvckVhY2guXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIG1heGxlbmd0aCA9IHRydWU7IGkgPCBtYXNrLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0cmFuc2xhdGlvbiA9IGpNYXNrLnRyYW5zbGF0aW9uW21hc2suY2hhckF0KGkpXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRyYW5zbGF0aW9uICYmIHRyYW5zbGF0aW9uLnJlY3Vyc2l2ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWF4bGVuZ3RoID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChtYXhsZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgZWwuYXR0cignbWF4bGVuZ3RoJywgbWFzay5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHAuZGVzdHJveUV2ZW50cygpO1xuICAgICAgICAgICAgICAgIHAuZXZlbnRzKCk7XG5cbiAgICAgICAgICAgICAgICB2YXIgY2FyZXQgPSBwLmdldENhcmV0KCk7XG4gICAgICAgICAgICAgICAgcC52YWwocC5nZXRNYXNrZWQoKSk7XG4gICAgICAgICAgICAgICAgcC5zZXRDYXJldChjYXJldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgak1hc2suaW5pdCghZWwuaXMoJ2lucHV0JykpO1xuICAgIH07XG5cbiAgICAkLm1hc2tXYXRjaGVycyA9IHt9O1xuICAgIHZhciBIVE1MQXR0cmlidXRlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGlucHV0ID0gJCh0aGlzKSxcbiAgICAgICAgICAgIG9wdGlvbnMgPSB7fSxcbiAgICAgICAgICAgIHByZWZpeCA9ICdkYXRhLW1hc2stJyxcbiAgICAgICAgICAgIG1hc2sgPSBpbnB1dC5hdHRyKCdkYXRhLW1hc2snKTtcblxuICAgICAgICBpZiAoaW5wdXQuYXR0cihwcmVmaXggKyAncmV2ZXJzZScpKSB7XG4gICAgICAgICAgICBvcHRpb25zLnJldmVyc2UgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlucHV0LmF0dHIocHJlZml4ICsgJ2NsZWFyaWZub3RtYXRjaCcpKSB7XG4gICAgICAgICAgICBvcHRpb25zLmNsZWFySWZOb3RNYXRjaCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaW5wdXQuYXR0cihwcmVmaXggKyAnc2VsZWN0b25mb2N1cycpID09PSAndHJ1ZScpIHtcbiAgICAgICAgICAgb3B0aW9ucy5zZWxlY3RPbkZvY3VzID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChub3RTYW1lTWFza09iamVjdChpbnB1dCwgbWFzaywgb3B0aW9ucykpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dC5kYXRhKCdtYXNrJywgbmV3IE1hc2sodGhpcywgbWFzaywgb3B0aW9ucykpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBub3RTYW1lTWFza09iamVjdCA9IGZ1bmN0aW9uKGZpZWxkLCBtYXNrLCBvcHRpb25zKSB7XG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgICB2YXIgbWFza09iamVjdCA9ICQoZmllbGQpLmRhdGEoJ21hc2snKSxcbiAgICAgICAgICAgIHN0cmluZ2lmeSA9IEpTT04uc3RyaW5naWZ5LFxuICAgICAgICAgICAgdmFsdWUgPSAkKGZpZWxkKS52YWwoKSB8fCAkKGZpZWxkKS50ZXh0KCk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG1hc2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICBtYXNrID0gbWFzayh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHlwZW9mIG1hc2tPYmplY3QgIT09ICdvYmplY3QnIHx8IHN0cmluZ2lmeShtYXNrT2JqZWN0Lm9wdGlvbnMpICE9PSBzdHJpbmdpZnkob3B0aW9ucykgfHwgbWFza09iamVjdC5tYXNrICE9PSBtYXNrO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgIH0sXG4gICAgZXZlbnRTdXBwb3J0ZWQgPSBmdW5jdGlvbihldmVudE5hbWUpIHtcbiAgICAgICAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JyksIGlzU3VwcG9ydGVkO1xuXG4gICAgICAgIGV2ZW50TmFtZSA9ICdvbicgKyBldmVudE5hbWU7XG4gICAgICAgIGlzU3VwcG9ydGVkID0gKGV2ZW50TmFtZSBpbiBlbCk7XG5cbiAgICAgICAgaWYgKCAhaXNTdXBwb3J0ZWQgKSB7XG4gICAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoZXZlbnROYW1lLCAncmV0dXJuOycpO1xuICAgICAgICAgICAgaXNTdXBwb3J0ZWQgPSB0eXBlb2YgZWxbZXZlbnROYW1lXSA9PT0gJ2Z1bmN0aW9uJztcbiAgICAgICAgfVxuICAgICAgICBlbCA9IG51bGw7XG5cbiAgICAgICAgcmV0dXJuIGlzU3VwcG9ydGVkO1xuICAgIH07XG5cbiAgICAkLmZuLm1hc2sgPSBmdW5jdGlvbihtYXNrLCBvcHRpb25zKSB7XG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgICB2YXIgc2VsZWN0b3IgPSB0aGlzLnNlbGVjdG9yLFxuICAgICAgICAgICAgZ2xvYmFscyA9ICQuak1hc2tHbG9iYWxzLFxuICAgICAgICAgICAgaW50ZXJ2YWwgPSBnbG9iYWxzLndhdGNoSW50ZXJ2YWwsXG4gICAgICAgICAgICB3YXRjaElucHV0cyA9IG9wdGlvbnMud2F0Y2hJbnB1dHMgfHwgZ2xvYmFscy53YXRjaElucHV0cyxcbiAgICAgICAgICAgIG1hc2tGdW5jdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGlmIChub3RTYW1lTWFza09iamVjdCh0aGlzLCBtYXNrLCBvcHRpb25zKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJCh0aGlzKS5kYXRhKCdtYXNrJywgbmV3IE1hc2sodGhpcywgbWFzaywgb3B0aW9ucykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgJCh0aGlzKS5lYWNoKG1hc2tGdW5jdGlvbik7XG5cbiAgICAgICAgaWYgKHNlbGVjdG9yICYmIHNlbGVjdG9yICE9PSAnJyAmJiB3YXRjaElucHV0cykge1xuICAgICAgICAgICAgY2xlYXJJbnRlcnZhbCgkLm1hc2tXYXRjaGVyc1tzZWxlY3Rvcl0pO1xuICAgICAgICAgICAgJC5tYXNrV2F0Y2hlcnNbc2VsZWN0b3JdID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAkKGRvY3VtZW50KS5maW5kKHNlbGVjdG9yKS5lYWNoKG1hc2tGdW5jdGlvbik7XG4gICAgICAgICAgICB9LCBpbnRlcnZhbCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgICQuZm4ubWFza2VkID0gZnVuY3Rpb24odmFsKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGEoJ21hc2snKS5nZXRNYXNrZWRWYWwodmFsKTtcbiAgICB9O1xuXG4gICAgJC5mbi51bm1hc2sgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgY2xlYXJJbnRlcnZhbCgkLm1hc2tXYXRjaGVyc1t0aGlzLnNlbGVjdG9yXSk7XG4gICAgICAgIGRlbGV0ZSAkLm1hc2tXYXRjaGVyc1t0aGlzLnNlbGVjdG9yXTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBkYXRhTWFzayA9ICQodGhpcykuZGF0YSgnbWFzaycpO1xuICAgICAgICAgICAgaWYgKGRhdGFNYXNrKSB7XG4gICAgICAgICAgICAgICAgZGF0YU1hc2sucmVtb3ZlKCkucmVtb3ZlRGF0YSgnbWFzaycpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgJC5mbi5jbGVhblZhbCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhKCdtYXNrJykuZ2V0Q2xlYW5WYWwoKTtcbiAgICB9O1xuXG4gICAgJC5hcHBseURhdGFNYXNrID0gZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgICAgICAgc2VsZWN0b3IgPSBzZWxlY3RvciB8fCAkLmpNYXNrR2xvYmFscy5tYXNrRWxlbWVudHM7XG4gICAgICAgIHZhciAkc2VsZWN0b3IgPSAoc2VsZWN0b3IgaW5zdGFuY2VvZiAkKSA/IHNlbGVjdG9yIDogJChzZWxlY3Rvcik7XG4gICAgICAgICRzZWxlY3Rvci5maWx0ZXIoJC5qTWFza0dsb2JhbHMuZGF0YU1hc2tBdHRyKS5lYWNoKEhUTUxBdHRyaWJ1dGVzKTtcbiAgICB9O1xuXG4gICAgdmFyIGdsb2JhbHMgPSB7XG4gICAgICAgIG1hc2tFbGVtZW50czogJ2lucHV0LHRkLHNwYW4sZGl2JyxcbiAgICAgICAgZGF0YU1hc2tBdHRyOiAnKltkYXRhLW1hc2tdJyxcbiAgICAgICAgZGF0YU1hc2s6IHRydWUsXG4gICAgICAgIHdhdGNoSW50ZXJ2YWw6IDMwMCxcbiAgICAgICAgd2F0Y2hJbnB1dHM6IHRydWUsXG4gICAgICAgIC8vIG9sZCB2ZXJzaW9ucyBvZiBjaHJvbWUgZG9udCB3b3JrIGdyZWF0IHdpdGggaW5wdXQgZXZlbnRcbiAgICAgICAgdXNlSW5wdXQ6ICEvQ2hyb21lXFwvWzItNF1bMC05XXxTYW1zdW5nQnJvd3Nlci8udGVzdCh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCkgJiYgZXZlbnRTdXBwb3J0ZWQoJ2lucHV0JyksXG4gICAgICAgIHdhdGNoRGF0YU1hc2s6IGZhbHNlLFxuICAgICAgICBieVBhc3NLZXlzOiBbOSwgMTYsIDE3LCAxOCwgMzYsIDM3LCAzOCwgMzksIDQwLCA5MV0sXG4gICAgICAgIHRyYW5zbGF0aW9uOiB7XG4gICAgICAgICAgICAnMCc6IHtwYXR0ZXJuOiAvXFxkL30sXG4gICAgICAgICAgICAnOSc6IHtwYXR0ZXJuOiAvXFxkLywgb3B0aW9uYWw6IHRydWV9LFxuICAgICAgICAgICAgJyMnOiB7cGF0dGVybjogL1xcZC8sIHJlY3Vyc2l2ZTogdHJ1ZX0sXG4gICAgICAgICAgICAnQSc6IHtwYXR0ZXJuOiAvW2EtekEtWjAtOV0vfSxcbiAgICAgICAgICAgICdTJzoge3BhdHRlcm46IC9bYS16QS1aXS99XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgJC5qTWFza0dsb2JhbHMgPSAkLmpNYXNrR2xvYmFscyB8fCB7fTtcbiAgICBnbG9iYWxzID0gJC5qTWFza0dsb2JhbHMgPSAkLmV4dGVuZCh0cnVlLCB7fSwgZ2xvYmFscywgJC5qTWFza0dsb2JhbHMpO1xuXG4gICAgLy8gbG9va2luZyBmb3IgaW5wdXRzIHdpdGggZGF0YS1tYXNrIGF0dHJpYnV0ZVxuICAgIGlmIChnbG9iYWxzLmRhdGFNYXNrKSB7XG4gICAgICAgICQuYXBwbHlEYXRhTWFzaygpO1xuICAgIH1cblxuICAgIHNldEludGVydmFsKGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoJC5qTWFza0dsb2JhbHMud2F0Y2hEYXRhTWFzaykge1xuICAgICAgICAgICAgJC5hcHBseURhdGFNYXNrKCk7XG4gICAgICAgIH1cbiAgICB9LCBnbG9iYWxzLndhdGNoSW50ZXJ2YWwpO1xufSwgd2luZG93LmpRdWVyeSwgd2luZG93LlplcHRvKSk7XG4iLCIoZnVuY3Rpb24oJCkge1xuICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkge1xuICAgICAgICBhcHAuaW5pdCgpO1xuICAgIH0pO1xuXG4gICAgdmFyIGFwcCA9IHtcbiAgICAgICAgaW5pdDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgbWFza0JlaGF2aW9yID0gZnVuY3Rpb24odmFsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbC5yZXBsYWNlKC9cXEQvZywgJycpLmxlbmd0aCA9PT0gMTEgPyAnKDAwKSAwMDAwMC0wMDAwJyA6ICcoMDApIDAwMDAtMDAwMDknO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgb25LZXlQcmVzczogZnVuY3Rpb24odmFsLCBlLCBmaWVsZCwgb3B0aW9ucykge1xuICAgICAgICAgICAgICAgICAgICBmaWVsZC5tYXNrKG1hc2tCZWhhdmlvci5hcHBseSh7fSwgYXJndW1lbnRzKSwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICQoJ2RpdltkYXRhLW5hbWU9XCJ0ZWxlZm9uZVwiXSBpbnB1dCcpLm1hc2sobWFza0JlaGF2aW9yLCBvcHRpb25zKTtcblxuICAgICAgICAgICAgJCgnYVtocmVmPVwiI21haW4tZm9ybS13cmFwcGVyXCJdJykuY2xpY2soZnVuY3Rpb24oZSl7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIC8vICQoJ2h0bWwsIGJvZHknKS5hbmltYXRlKHtzY3JvbGxUb3A6MH0sICdzbG93Jyk7XG4gICAgICAgICAgICAgICAgJCgnaHRtbCwgYm9keScpLmFuaW1hdGUoe1xuICAgICAgICAgICAgICAgICAgICBzY3JvbGxUb3A6ICQoJyNtYWluLWZvcm0td3JhcHBlcicpLm9mZnNldCgpLnRvcCArICdweCdcbiAgICAgICAgICAgICAgICB9LCAnc2xvdycpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH0pOyAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgfTtcbn0pKGpRdWVyeSk7Il19
